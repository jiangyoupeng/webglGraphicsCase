/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ts/src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/Spark-md5/spark-md5.js":
/*!*********************************************!*\
  !*** ./node_modules/Spark-md5/spark-md5.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function (factory) {
    if (true) {
        // Node/CommonJS
        module.exports = factory();
    } else { var glob; }
}(function (undefined) {

    'use strict';

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },
        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


    function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    }

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));


/***/ }),

/***/ "./node_modules/glsl-parser/direct.js":
/*!********************************************!*\
  !*** ./node_modules/glsl-parser/direct.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__(/*! ./lib/index */ "./node_modules/glsl-parser/lib/index.js")

module.exports = parseArray

function parseArray(tokens) {
  var parser = parse()

  for (var i = 0; i < tokens.length; i++) {
    parser(tokens[i])
  }

  return parser(null)
}


/***/ }),

/***/ "./node_modules/glsl-parser/lib/expr.js":
/*!**********************************************!*\
  !*** ./node_modules/glsl-parser/lib/expr.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var state
  , token
  , tokens
  , idx

var original_symbol = {
    nud: function() { return this.children && this.children.length ? this : fail('unexpected')() }
  , led: fail('missing operator')
}

var symbol_table = {}

function itself() {
  return this
}

symbol('(ident)').nud = itself
symbol('(keyword)').nud = itself
symbol('(builtin)').nud = itself
symbol('(literal)').nud = itself
symbol('(end)')

symbol(':')
symbol(';')
symbol(',')
symbol(')')
symbol(']')
symbol('}')

infixr('&&', 30)
infixr('||', 30)
infix('|', 43)
infix('^', 44)
infix('&', 45)
infix('==', 46)
infix('!=', 46)
infix('<', 47)
infix('<=', 47)
infix('>', 47)
infix('>=', 47)
infix('>>', 48)
infix('<<', 48)
infix('+', 50)
infix('-', 50)
infix('*', 60)
infix('/', 60)
infix('%', 60)
infix('?', 20, function(left) {
  this.children = [left, expression(0), (advance(':'), expression(0))]
  this.type = 'ternary'
  return this
})
infix('.', 80, function(left) {
  token.type = 'literal'
  state.fake(token)
  this.children = [left, token]
  advance()
  return this
})
infix('[', 80, function(left) {
  this.children = [left, expression(0)]
  this.type = 'binary'
  advance(']')
  return this
})
infix('(', 80, function(left) {
  this.children = [left]
  this.type = 'call'

  if(token.data !== ')') while(1) {
    this.children.push(expression(0))
    if(token.data !== ',') break
    advance(',')
  }
  advance(')')
  return this
})

prefix('-')
prefix('+')
prefix('!')
prefix('~')
prefix('defined')
prefix('(', function() {
  this.type = 'group'
  this.children = [expression(0)]
  advance(')')
  return this
})
prefix('++')
prefix('--')
suffix('++')
suffix('--')

assignment('=')
assignment('+=')
assignment('-=')
assignment('*=')
assignment('/=')
assignment('%=')
assignment('&=')
assignment('|=')
assignment('^=')
assignment('>>=')
assignment('<<=')

module.exports = function(incoming_state, incoming_tokens) {
  state = incoming_state
  tokens = incoming_tokens
  idx = 0
  var result

  if(!tokens.length) return

  advance()
  result = expression(0)
  result.parent = state[0]
  emit(result)

  if(idx < tokens.length) {
    throw new Error('did not use all tokens')
  }

  result.parent.children = [result]

  function emit(node) {
    state.unshift(node, false)
    for(var i = 0, len = node.children.length; i < len; ++i) {
      emit(node.children[i])
    }
    state.shift()
  }

}

function symbol(id, binding_power) {
  var sym = symbol_table[id]
  binding_power = binding_power || 0
  if(sym) {
    if(binding_power > sym.lbp) {
      sym.lbp = binding_power
    }
  } else {
    sym = Object.create(original_symbol)
    sym.id = id
    sym.lbp = binding_power
    symbol_table[id] = sym
  }
  return sym
}

function expression(rbp) {
  var left, t = token
  advance()

  left = t.nud()
  while(rbp < token.lbp) {
    t = token
    advance()
    left = t.led(left)
  }
  return left
}

function infix(id, bp, led) {
  var sym = symbol(id, bp)
  sym.led = led || function(left) {
    this.children = [left, expression(bp)]
    this.type = 'binary'
    return this
  }
}

function infixr(id, bp, led) {
  var sym = symbol(id, bp)
  sym.led = led || function(left) {
    this.children = [left, expression(bp - 1)]
    this.type = 'binary'
    return this
  }
  return sym
}

function prefix(id, nud) {
  var sym = symbol(id)
  sym.nud = nud || function() {
    this.children = [expression(70)]
    this.type = 'unary'
    return this
  }
  return sym
}

function suffix(id) {
  var sym = symbol(id, 150)
  sym.led = function(left) {
    this.children = [left]
    this.type = 'suffix'
    return this
  }
}

function assignment(id) {
  return infixr(id, 10, function(left) {
    this.children = [left, expression(9)]
    this.assignment = true
    this.type = 'assign'
    return this
  })
}

function advance(id) {
  var next
    , value
    , type
    , output

  if(id && token.data !== id) {
    return state.unexpected('expected `'+ id + '`, got `'+token.data+'`')
  }

  if(idx >= tokens.length) {
    token = symbol_table['(end)']
    return
  }

  next = tokens[idx++]
  value = next.data
  type = next.type

  if(type === 'ident') {
    output = state.scope.find(value) || state.create_node()
    type = output.type
  } else if(type === 'builtin') {
    output = symbol_table['(builtin)']
  } else if(type === 'keyword') {
    output = symbol_table['(keyword)']
  } else if(type === 'operator') {
    output = symbol_table[value]
    if(!output) {
      return state.unexpected('unknown operator `'+value+'`')
    }
  } else if(type === 'float' || type === 'integer') {
    type = 'literal'
    output = symbol_table['(literal)']
  } else {
    return state.unexpected('unexpected token.')
  }

  if(output) {
    if(!output.nud) { output.nud = itself }
    if(!output.children) { output.children = [] }
  }

  output = Object.create(output)
  output.token = next
  output.type = type
  if(!output.data) output.data = value

  return token = output
}

function fail(message) {
  return function() { return state.unexpected(message) }
}


/***/ }),

/***/ "./node_modules/glsl-parser/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/glsl-parser/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = parser

var full_parse_expr = __webpack_require__(/*! ./expr */ "./node_modules/glsl-parser/lib/expr.js")
  , Scope = __webpack_require__(/*! ./scope */ "./node_modules/glsl-parser/lib/scope.js")

// singleton!
var Advance = new Object

var DEBUG = false

var _ = 0
  , IDENT = _++
  , STMT = _++
  , STMTLIST = _++
  , STRUCT = _++
  , FUNCTION = _++
  , FUNCTIONARGS = _++
  , DECL = _++
  , DECLLIST = _++
  , FORLOOP = _++
  , WHILELOOP = _++
  , IF = _++
  , EXPR = _++
  , PRECISION = _++
  , COMMENT = _++
  , PREPROCESSOR = _++
  , KEYWORD = _++
  , KEYWORD_OR_IDENT = _++
  , RETURN = _++
  , BREAK = _++
  , CONTINUE = _++
  , DISCARD = _++
  , DOWHILELOOP = _++
  , PLACEHOLDER = _++
  , QUANTIFIER = _++

var DECL_ALLOW_ASSIGN = 0x1
  , DECL_ALLOW_COMMA = 0x2
  , DECL_REQUIRE_NAME = 0x4
  , DECL_ALLOW_INVARIANT = 0x8
  , DECL_ALLOW_STORAGE = 0x10
  , DECL_NO_INOUT = 0x20
  , DECL_ALLOW_STRUCT = 0x40
  , DECL_STATEMENT = 0xFF
  , DECL_FUNCTION = DECL_STATEMENT & ~(DECL_ALLOW_ASSIGN | DECL_ALLOW_COMMA | DECL_NO_INOUT | DECL_ALLOW_INVARIANT | DECL_REQUIRE_NAME)
  , DECL_STRUCT = DECL_STATEMENT & ~(DECL_ALLOW_ASSIGN | DECL_ALLOW_INVARIANT | DECL_ALLOW_STORAGE | DECL_ALLOW_STRUCT)

var QUALIFIERS = ['const', 'attribute', 'uniform', 'varying']

var NO_ASSIGN_ALLOWED = false
  , NO_COMMA_ALLOWED = false

// map of tokens to stmt types
var token_map = {
    'block-comment': COMMENT
  , 'line-comment': COMMENT
  , 'preprocessor': PREPROCESSOR
}

// map of stmt types to human
var stmt_type = _ = [
    'ident'
  , 'stmt'
  , 'stmtlist'
  , 'struct'
  , 'function'
  , 'functionargs'
  , 'decl'
  , 'decllist'
  , 'forloop'
  , 'whileloop'
  , 'if'
  , 'expr'
  , 'precision'
  , 'comment'
  , 'preprocessor'
  , 'keyword'
  , 'keyword_or_ident'
  , 'return'
  , 'break'
  , 'continue'
  , 'discard'
  , 'do-while'
  , 'placeholder'
  , 'quantifier'
]

function parser() {
  var stmtlist = n(STMTLIST)
    , stmt = n(STMT)
    , decllist = n(DECLLIST)
    , precision = n(PRECISION)
    , ident = n(IDENT)
    , keyword_or_ident = n(KEYWORD_OR_IDENT)
    , fn = n(FUNCTION)
    , fnargs = n(FUNCTIONARGS)
    , forstmt = n(FORLOOP)
    , ifstmt = n(IF)
    , whilestmt = n(WHILELOOP)
    , returnstmt = n(RETURN)
    , dowhilestmt = n(DOWHILELOOP)
    , quantifier = n(QUANTIFIER)

  var parse_struct
    , parse_precision
    , parse_quantifier
    , parse_forloop
    , parse_if
    , parse_return
    , parse_whileloop
    , parse_dowhileloop
    , parse_function
    , parse_function_args

  var check = arguments.length ? [].slice.call(arguments) : []
    , complete = false
    , ended = false
    , depth = 0
    , state = []
    , nodes = []
    , tokens = []
    , whitespace = []
    , errored = false
    , program
    , token
    , node

  // setup state
  state.shift = special_shift
  state.unshift = special_unshift
  state.fake = special_fake
  state.unexpected = unexpected
  state.scope = new Scope(state)
  state.create_node = function() {
    var n = mknode(IDENT, token)
    n.parent = reader.program
    return n
  }

  setup_stative_parsers()

  // setup root node
  node = stmtlist()
  node.expecting = '(eof)'
  node.mode = STMTLIST
  node.token = {type: '(program)', data: '(program)'}
  program = node

  reader.program = program
  reader.scope = function(scope) {
    if(arguments.length === 1) {
      state.scope = scope
    }
    return state.scope
  }

  state.unshift(node)
  return reader

  function reader(data) {
    if (data === null) {
      return end(), program
    }

    nodes = []
    write(data)
    return nodes
  }

  // stream functions ---------------------------------------------

  function write(input) {
    if(input.type === 'whitespace' || input.type === 'line-comment' || input.type === 'block-comment') {

      whitespace.push(input)
      return
    }
    tokens.push(input)
    token = token || tokens[0]

    if(token && whitespace.length) {
      token.preceding = token.preceding || []
      token.preceding = token.preceding.concat(whitespace)
      whitespace = []
    }

    while(take()) switch(state[0].mode) {
      case STMT: parse_stmt(); break
      case STMTLIST: parse_stmtlist(); break
      case DECL: parse_decl(); break
      case DECLLIST: parse_decllist(); break
      case EXPR: parse_expr(); break
      case STRUCT: parse_struct(true, true); break
      case PRECISION: parse_precision(); break
      case IDENT: parse_ident(); break
      case KEYWORD: parse_keyword(); break
      case KEYWORD_OR_IDENT: parse_keyword_or_ident(); break
      case FUNCTION: parse_function(); break
      case FUNCTIONARGS: parse_function_args(); break
      case FORLOOP: parse_forloop(); break
      case WHILELOOP: parse_whileloop(); break
      case DOWHILELOOP: parse_dowhileloop(); break
      case RETURN: parse_return(); break
      case IF: parse_if(); break
      case QUANTIFIER: parse_quantifier(); break
    }
  }

  function end(tokens) {
    if(arguments.length) {
      write(tokens)
    }

    if(state.length > 1) {
      unexpected('unexpected EOF')
      return
    }

    complete = true
  }

  function take() {
    if(errored || !state.length)
      return false

    return (token = tokens[0])
  }

  // ----- state manipulation --------

  function special_fake(x) {
    state.unshift(x)
    state.shift()
  }

  function special_unshift(_node, add_child) {
    _node.parent = state[0]

    var ret = [].unshift.call(this, _node)

    add_child = add_child === undefined ? true : add_child

    if(DEBUG) {
      var pad = ''
      for(var i = 0, len = this.length - 1; i < len; ++i) {
        pad += ' |'
      }
      console.log(pad, '\\'+_node.type, _node.token.data)
    }

    if(add_child && node !== _node) node.children.push(_node)
    node = _node

    return ret
  }

  function special_shift() {
    var _node = [].shift.call(this)
      , okay = check[this.length]
      , emit = false

    if(DEBUG) {
      var pad = ''
      for(var i = 0, len = this.length; i < len; ++i) {
        pad += ' |'
      }
      console.log(pad, '/'+_node.type)
    }

    if(check.length) {
      if(typeof check[0] === 'function') {
        emit = check[0](_node)
      } else if(okay !== undefined) {
        emit = okay.test ? okay.test(_node.type) : okay === _node.type
      }
    } else {
      emit = true
    }

    if(emit && !errored) nodes.push(_node)

    node = _node.parent
    return _node
  }

  // parse states ---------------

  function parse_stmtlist() {
    // determine the type of the statement
    // and then start parsing
    return stative(
      function() { state.scope.enter(); return Advance }
    , normal_mode
    )()

    function normal_mode() {
      if(token.data === state[0].expecting) {
        return state.scope.exit(), state.shift()
      }
      switch(token.type) {
        case 'preprocessor':
          state.fake(adhoc())
          tokens.shift()
        return
        default:
          state.unshift(stmt())
        return
      }
    }
  }

  function parse_stmt() {
    if(state[0].brace) {
      if(token.data !== '}') {
        return unexpected('expected `}`, got '+token.data)
      }
      state[0].brace = false
      return tokens.shift(), state.shift()
    }
    switch(token.type) {
      case 'eof': return got_eof()
      case 'keyword':
        switch(token.data) {
          case 'for': return state.unshift(forstmt());
          case 'if': return state.unshift(ifstmt());
          case 'while': return state.unshift(whilestmt());
          case 'do': return state.unshift(dowhilestmt());
          case 'break': return state.fake(mknode(BREAK, token)), tokens.shift()
          case 'continue': return state.fake(mknode(CONTINUE, token)), tokens.shift()
          case 'discard': return state.fake(mknode(DISCARD, token)), tokens.shift()
          case 'return': return state.unshift(returnstmt());
          case 'precision': return state.unshift(precision());
        }
        return state.unshift(decl(DECL_STATEMENT))
      case 'ident':
        var lookup
        if(lookup = state.scope.find(token.data)) {
          if(lookup.parent.type === 'struct') {
            // this is strictly untrue, you could have an
            // expr that starts with a struct constructor.
            //      ... sigh
            return state.unshift(decl(DECL_STATEMENT))
          }
          return state.unshift(expr(';'))
        }
      case 'operator':
        if(token.data === '{') {
          state[0].brace = true
          var n = stmtlist()
          n.expecting = '}'
          return tokens.shift(), state.unshift(n)
        }
        if(token.data === ';') {
          return tokens.shift(), state.shift()
        }
      default: return state.unshift(expr(';'))
    }
  }

  function got_eof() {
    if (ended) errored = true
    ended = true
    return state.shift()
  }

  function parse_decl() {
    var stmt = state[0]

    return stative(
      invariant_or_not,
      storage_or_not,
      parameter_or_not,
      precision_or_not,
      struct_or_type,
      maybe_name,
      maybe_lparen,     // lparen means we're a function
      is_decllist,
      done
    )()

    function invariant_or_not() {
      if(token.data === 'invariant') {
        if(stmt.flags & DECL_ALLOW_INVARIANT) {
          state.unshift(keyword())
          return Advance
        } else {
          return unexpected('`invariant` is not allowed here')
        }
      } else {
        state.fake(mknode(PLACEHOLDER, {data: '', position: token.position}))
        return Advance
      }
    }

    function storage_or_not() {
      if(is_storage(token)) {
        if(stmt.flags & DECL_ALLOW_STORAGE) {
          state.unshift(keyword())
          return Advance
        } else {
          return unexpected('storage is not allowed here')
        }
      } else {
        state.fake(mknode(PLACEHOLDER, {data: '', position: token.position}))
        return Advance
      }
    }

    function parameter_or_not() {
      if(is_parameter(token)) {
        if(!(stmt.flags & DECL_NO_INOUT)) {
          state.unshift(keyword())
          return Advance
        } else {
          return unexpected('parameter is not allowed here')
        }
      } else {
        state.fake(mknode(PLACEHOLDER, {data: '', position: token.position}))
        return Advance
      }
    }

    function precision_or_not() {
      if(is_precision(token)) {
        state.unshift(keyword())
        return Advance
      } else {
        state.fake(mknode(PLACEHOLDER, {data: '', position: token.position}))
        return Advance
      }
    }

    function struct_or_type() {
      if(token.data === 'struct') {
        if(!(stmt.flags & DECL_ALLOW_STRUCT)) {
          return unexpected('cannot nest structs')
        }
        state.unshift(struct())
        return Advance
      }

      if(token.type === 'keyword') {
        state.unshift(keyword())
        return Advance
      }

      var lookup = state.scope.find(token.data)

      if(lookup) {
        state.fake(Object.create(lookup))
        tokens.shift()
        return Advance
      }
      return unexpected('expected user defined type, struct or keyword, got '+token.data)
    }

    function maybe_name() {
      if(token.data === ',' && !(stmt.flags & DECL_ALLOW_COMMA)) {
        return state.shift()
      }

      if(token.data === '[') {
        // oh lord.
        state.unshift(quantifier())
        return
      }

      if(token.data === ')') return state.shift()

      if(token.data === ';') {
        return stmt.stage + 3
      }

      if(token.type !== 'ident' && token.type !== 'builtin') {
        return unexpected('expected identifier, got '+token.data)
      }

      stmt.collected_name = tokens.shift()
      return Advance
    }

    function maybe_lparen() {
      if(token.data === '(') {
        tokens.unshift(stmt.collected_name)
        delete stmt.collected_name
        state.unshift(fn())
        return stmt.stage + 2
      }
      return Advance
    }

    function is_decllist() {
      tokens.unshift(stmt.collected_name)
      delete stmt.collected_name
      state.unshift(decllist())
      return Advance
    }

    function done() {
      return state.shift()
    }
  }

  function parse_decllist() {
    // grab ident

    if(token.type === 'ident' || token.type === 'builtin') {
      var name = token.data
      state.unshift(ident())
      state.scope.define(name)
      return
    }

    if(token.type === 'operator') {

      if(token.data === ',') {
        // multi-decl!
        if(!(state[1].flags & DECL_ALLOW_COMMA)) {
          return state.shift()
        }

        return tokens.shift()
      } else if(token.data === '=') {
        if(!(state[1].flags & DECL_ALLOW_ASSIGN)) return unexpected('`=` is not allowed here.')

        tokens.shift()

        state.unshift(expr(',', ';'))
        return
      } else if(token.data === '[') {
        state.unshift(quantifier())
        return
      }
    }
    return state.shift()
  }

  function parse_keyword_or_ident() {
    if(token.type === 'keyword') {
      state[0].type = 'keyword'
      state[0].mode = KEYWORD
      return
    }

    if(token.type === 'ident') {
      state[0].type = 'ident'
      state[0].mode = IDENT
      return
    }

    return unexpected('expected keyword or user-defined name, got '+token.data)
  }

  function parse_keyword() {
    if(token.type !== 'keyword') {
      return unexpected('expected keyword, got '+token.data)
    }

    return state.shift(), tokens.shift()
  }

  function parse_ident() {
    if(token.type !== 'ident' && token.type !== 'builtin') {
      return unexpected('expected user-defined name, got '+token.data)
    }

    state[0].data = token.data
    return state.shift(), tokens.shift()
  }


  function parse_expr() {
    var expecting = state[0].expecting

    state[0].tokens = state[0].tokens || []

    if(state[0].parenlevel === undefined) {
      state[0].parenlevel = 0
      state[0].bracelevel = 0
    }
    if(state[0].parenlevel < 1 && expecting.indexOf(token.data) > -1) {
      return parseexpr(state[0].tokens)
    }
    if(token.data === '(') {
      ++state[0].parenlevel
    } else if(token.data === ')') {
      --state[0].parenlevel
    }

    switch(token.data) {
      case '{': ++state[0].bracelevel; break
      case '}': --state[0].bracelevel; break
      case '(': ++state[0].parenlevel; break
      case ')': --state[0].parenlevel; break
    }

    if(state[0].parenlevel < 0) return unexpected('unexpected `)`')
    if(state[0].bracelevel < 0) return unexpected('unexpected `}`')

    state[0].tokens.push(tokens.shift())
    return

    function parseexpr(tokens) {
      try {
        full_parse_expr(state, tokens)
      } catch(err) {
        errored = true
        throw err
      }

      return state.shift()
    }
  }

  // node types ---------------

  function n(type) {
    // this is a function factory that suffices for most kinds of expressions and statements
    return function() {
      return mknode(type, token)
    }
  }

  function adhoc() {
    return mknode(token_map[token.type], token, node)
  }

  function decl(flags) {
    var _ = mknode(DECL, token, node)
    _.flags = flags

    return _
  }

  function struct(allow_assign, allow_comma) {
    var _ = mknode(STRUCT, token, node)
    _.allow_assign = allow_assign === undefined ? true : allow_assign
    _.allow_comma = allow_comma === undefined ? true : allow_comma
    return _
  }

  function expr() {
    var n = mknode(EXPR, token, node)

    n.expecting = [].slice.call(arguments)
    return n
  }

  function keyword(default_value) {
    var t = token
    if(default_value) {
      t = {'type': '(implied)', data: '(default)', position: t.position}
    }
    return mknode(KEYWORD, t, node)
  }

  // utils ----------------------------

  function unexpected(str) {
    errored = true
    throw new Error(
      (str || 'unexpected '+state) +
      ' at line '+state[0].token.line
    )
  }

  function assert(type, data) {
    return 1,
      assert_null_string_or_array(type, token.type) &&
      assert_null_string_or_array(data, token.data)
  }

  function assert_null_string_or_array(x, y) {
    switch(typeof x) {
      case 'string': if(y !== x) {
        unexpected('expected `'+x+'`, got '+y+'\n'+token.data);
      } return !errored

      case 'object': if(x && x.indexOf(y) === -1) {
        unexpected('expected one of `'+x.join('`, `')+'`, got '+y);
      } return !errored
    }
    return true
  }

  // stative ----------------------------

  function stative() {
    var steps = [].slice.call(arguments)
      , step
      , result

    return function() {
      var current = state[0]

      current.stage || (current.stage = 0)

      step = steps[current.stage]
      if(!step) return unexpected('parser in undefined state!')

      result = step()

      if(result === Advance) return ++current.stage
      if(result === undefined) return
      current.stage = result
    }
  }

  function advance(op, t) {
    t = t || 'operator'
    return function() {
      if(!assert(t, op)) return

      var last = tokens.shift()
        , children = state[0].children
        , last_node = children[children.length - 1]

      if(last_node && last_node.token && last.preceding) {
        last_node.token.succeeding = last_node.token.succeeding || []
        last_node.token.succeeding = last_node.token.succeeding.concat(last.preceding)
      }
      return Advance
    }
  }

  function advance_expr(until) {
    return function() {
      state.unshift(expr(until))
      return Advance
    }
  }

  function advance_ident(declare) {
    return declare ? function() {
      var name = token.data
      return assert('ident') && (state.unshift(ident()), state.scope.define(name), Advance)
    } :  function() {
      if(!assert('ident')) return

      var s = Object.create(state.scope.find(token.data))
      s.token = token

      return (tokens.shift(), Advance)
    }
  }

  function advance_stmtlist() {
    return function() {
      var n = stmtlist()
      n.expecting = '}'
      return state.unshift(n), Advance
    }
  }

  function maybe_stmtlist(skip) {
    return function() {
      var current = state[0].stage
      if(token.data !== '{') { return state.unshift(stmt()), current + skip }
      return tokens.shift(), Advance
    }
  }

  function popstmt() {
    return function() { return state.shift(), state.shift() }
  }


  function setup_stative_parsers() {

    // could also be
    // struct { } decllist
    parse_struct =
        stative(
          advance('struct', 'keyword')
        , function() {
            if(token.data === '{') {
              state.fake(mknode(IDENT, {data:'', position: token.position, type:'ident'}))
              return Advance
            }

            return advance_ident(true)()
          }
        , function() { state.scope.enter(); return Advance }
        , advance('{')
        , function() {
            if(token.type === 'preprocessor') {
              state.fake(adhoc())
              tokens.shift()
              return
            }
            if(token.data === '}') {
              state.scope.exit()
              tokens.shift()
              return state.shift()
            }
            if(token.data === ';') { tokens.shift(); return }
            state.unshift(decl(DECL_STRUCT))
          }
        )

    parse_precision =
        stative(
          function() { return tokens.shift(), Advance }
        , function() {
            return assert(
            'keyword', ['lowp', 'mediump', 'highp']
            ) && (state.unshift(keyword()), Advance)
          }
        , function() { return (state.unshift(keyword()), Advance) }
        , function() { return state.shift() }
        )

    parse_quantifier =
        stative(
          advance('[')
        , advance_expr(']')
        , advance(']')
        , function() { return state.shift() }
        )

    parse_forloop =
        stative(
          advance('for', 'keyword')
        , advance('(')
        , function() {
            var lookup
            if(token.type === 'ident') {
              if(!(lookup = state.scope.find(token.data))) {
                lookup = state.create_node()
              }

              if(lookup.parent.type === 'struct') {
                return state.unshift(decl(DECL_STATEMENT)), Advance
              }
            } else if(token.type === 'builtin' || token.type === 'keyword') {
              return state.unshift(decl(DECL_STATEMENT)), Advance
            }
            return advance_expr(';')()
          }
        , advance(';')
        , advance_expr(';')
        , advance(';')
        , advance_expr(')')
        , advance(')')
        , maybe_stmtlist(3)
        , advance_stmtlist()
        , advance('}')
        , popstmt()
        )

    parse_if =
        stative(
          advance('if', 'keyword')
        , advance('(')
        , advance_expr(')')
        , advance(')')
        , maybe_stmtlist(3)
        , advance_stmtlist()
        , advance('}')
        , function() {
            if(token.data === 'else') {
              return tokens.shift(), state.unshift(stmt()), Advance
            }
            return popstmt()()
          }
        , popstmt()
        )

    parse_return =
        stative(
          advance('return', 'keyword')
        , function() {
            if(token.data === ';') return Advance
            return state.unshift(expr(';')), Advance
          }
        , function() { tokens.shift(), popstmt()() }
        )

    parse_whileloop =
        stative(
          advance('while', 'keyword')
        , advance('(')
        , advance_expr(')')
        , advance(')')
        , maybe_stmtlist(3)
        , advance_stmtlist()
        , advance('}')
        , popstmt()
        )

    parse_dowhileloop =
      stative(
        advance('do', 'keyword')
      , maybe_stmtlist(3)
      , advance_stmtlist()
      , advance('}')
      , advance('while', 'keyword')
      , advance('(')
      , advance_expr(')')
      , advance(')')
      , popstmt()
      )

    parse_function =
      stative(
        function() {
          for(var i = 1, len = state.length; i < len; ++i) if(state[i].mode === FUNCTION) {
            return unexpected('function definition is not allowed within another function')
          }

          return Advance
        }
      , function() {
          if(!assert("ident")) return

          var name = token.data
            , lookup = state.scope.find(name)

          state.unshift(ident())
          state.scope.define(name)

          state.scope.enter(lookup ? lookup.scope : null)
          return Advance
        }
      , advance('(')
      , function() { return state.unshift(fnargs()), Advance }
      , advance(')')
      , function() {
          // forward decl
          if(token.data === ';') {
            return state.scope.exit(), state.shift(), state.shift()
          }
          return Advance
        }
      , advance('{')
      , advance_stmtlist()
      , advance('}')
      , function() { state.scope.exit(); return Advance }
      , function() { return state.shift(), state.shift(), state.shift() }
      )

    parse_function_args =
      stative(
        function() {
          if(token.data === 'void') { state.fake(keyword()); tokens.shift(); return Advance }
          if(token.data === ')') { state.shift(); return }
          if(token.data === 'struct') {
            state.unshift(struct(NO_ASSIGN_ALLOWED, NO_COMMA_ALLOWED))
            return Advance
          }
          state.unshift(decl(DECL_FUNCTION))
          return Advance
        }
      , function() {
          if(token.data === ',') { tokens.shift(); return 0 }
          if(token.data === ')') { state.shift(); return }
          unexpected('expected one of `,` or `)`, got '+token.data)
        }
      )
  }
}

function mknode(mode, sourcetoken) {
  return {
      mode: mode
    , token: sourcetoken
    , children: []
    , type: stmt_type[mode]
    , id: (Math.random() * 0xFFFFFFFF).toString(16)
  }
}

function is_storage(token) {
  return token.data === 'const' ||
         token.data === 'attribute' ||
         token.data === 'uniform' ||
         token.data === 'varying'
}

function is_parameter(token) {
  return token.data === 'in' ||
         token.data === 'inout' ||
         token.data === 'out'
}

function is_precision(token) {
  return token.data === 'highp' ||
         token.data === 'mediump' ||
         token.data === 'lowp'
}


/***/ }),

/***/ "./node_modules/glsl-parser/lib/scope.js":
/*!***********************************************!*\
  !*** ./node_modules/glsl-parser/lib/scope.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = scope

function scope(state) {
  if(this.constructor !== scope)
    return new scope(state)

  this.state = state
  this.scopes = []
  this.current = null
}

var cons = scope
  , proto = cons.prototype

proto.enter = function(s) {
  this.scopes.push(
    this.current = this.state[0].scope = s || {}
  )
}

proto.exit = function() {
  this.scopes.pop()
  this.current = this.scopes[this.scopes.length - 1]
}

proto.define = function(str) {
  this.current[str] = this.state[0]
}

proto.find = function(name, fail) {
  for(var i = this.scopes.length - 1; i > -1; --i) {
    if(this.scopes[i].hasOwnProperty(name)) {
      return this.scopes[i][name]
    }
  }

  return null
}


/***/ }),

/***/ "./node_modules/glsl-tokenizer/index.js":
/*!**********************************************!*\
  !*** ./node_modules/glsl-tokenizer/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = tokenize

var literals100 = __webpack_require__(/*! ./lib/literals */ "./node_modules/glsl-tokenizer/lib/literals.js")
  , operators = __webpack_require__(/*! ./lib/operators */ "./node_modules/glsl-tokenizer/lib/operators.js")
  , builtins100 = __webpack_require__(/*! ./lib/builtins */ "./node_modules/glsl-tokenizer/lib/builtins.js")
  , literals300es = __webpack_require__(/*! ./lib/literals-300es */ "./node_modules/glsl-tokenizer/lib/literals-300es.js")
  , builtins300es = __webpack_require__(/*! ./lib/builtins-300es */ "./node_modules/glsl-tokenizer/lib/builtins-300es.js")

var NORMAL = 999          // <-- never emitted
  , TOKEN = 9999          // <-- never emitted
  , BLOCK_COMMENT = 0
  , LINE_COMMENT = 1
  , PREPROCESSOR = 2
  , OPERATOR = 3
  , INTEGER = 4
  , FLOAT = 5
  , IDENT = 6
  , BUILTIN = 7
  , KEYWORD = 8
  , WHITESPACE = 9
  , EOF = 10
  , HEX = 11

var map = [
    'block-comment'
  , 'line-comment'
  , 'preprocessor'
  , 'operator'
  , 'integer'
  , 'float'
  , 'ident'
  , 'builtin'
  , 'keyword'
  , 'whitespace'
  , 'eof'
  , 'integer'
]

function tokenize(opt) {
  var i = 0
    , total = 0
    , mode = NORMAL
    , c
    , last
    , content = []
    , tokens = []
    , token_idx = 0
    , token_offs = 0
    , line = 1
    , col = 0
    , start = 0
    , isnum = false
    , isoperator = false
    , input = ''
    , len

  opt = opt || {}
  var allBuiltins = builtins100
  var allLiterals = literals100
  if (opt.version === '300 es') {
    allBuiltins = builtins300es
    allLiterals = literals300es
  }

  // cache by name
  var builtinsDict = {}, literalsDict = {}
  for (var i = 0; i < allBuiltins.length; i++) {
    builtinsDict[allBuiltins[i]] = true
  }
  for (var i = 0; i < allLiterals.length; i++) {
    literalsDict[allLiterals[i]] = true
  }

  return function(data) {
    tokens = []
    if (data !== null) return write(data)
    return end()
  }

  function token(data) {
    if (data.length) {
      tokens.push({
        type: map[mode]
      , data: data
      , position: start
      , line: line
      , column: col
      })
    }
  }

  function write(chunk) {
    i = 0

    if (chunk.toString) chunk = chunk.toString()

    input += chunk.replace(/\r\n/g, '\n')
    len = input.length


    var last

    while(c = input[i], i < len) {
      last = i

      switch(mode) {
        case BLOCK_COMMENT: i = block_comment(); break
        case LINE_COMMENT: i = line_comment(); break
        case PREPROCESSOR: i = preprocessor(); break
        case OPERATOR: i = operator(); break
        case INTEGER: i = integer(); break
        case HEX: i = hex(); break
        case FLOAT: i = decimal(); break
        case TOKEN: i = readtoken(); break
        case WHITESPACE: i = whitespace(); break
        case NORMAL: i = normal(); break
      }

      if(last !== i) {
        switch(input[last]) {
          case '\n': col = 0; ++line; break
          default: ++col; break
        }
      }
    }

    total += i
    input = input.slice(i)
    return tokens
  }

  function end(chunk) {
    if(content.length) {
      token(content.join(''))
    }

    mode = EOF
    token('(eof)')
    return tokens
  }

  function normal() {
    content = content.length ? [] : content

    if(last === '/' && c === '*') {
      start = total + i - 1
      mode = BLOCK_COMMENT
      last = c
      return i + 1
    }

    if(last === '/' && c === '/') {
      start = total + i - 1
      mode = LINE_COMMENT
      last = c
      return i + 1
    }

    if(c === '#') {
      mode = PREPROCESSOR
      start = total + i
      return i
    }

    if(/\s/.test(c)) {
      mode = WHITESPACE
      start = total + i
      return i
    }

    isnum = /\d/.test(c)
    isoperator = /[^\w_]/.test(c)

    start = total + i
    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN
    return i
  }

  function whitespace() {
    if(/[^\s]/g.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }

  function preprocessor() {
    if((c === '\r' || c === '\n') && last !== '\\') {
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }

  function line_comment() {
    return preprocessor()
  }

  function block_comment() {
    if(c === '/' && last === '*') {
      content.push(c)
      token(content.join(''))
      mode = NORMAL
      return i + 1
    }

    content.push(c)
    last = c
    return i + 1
  }

  function operator() {
    if(last === '.' && /\d/.test(c)) {
      mode = FLOAT
      return i
    }

    if(last === '/' && c === '*') {
      mode = BLOCK_COMMENT
      return i
    }

    if(last === '/' && c === '/') {
      mode = LINE_COMMENT
      return i
    }

    if(c === '.' && content.length) {
      while(determine_operator(content));

      mode = FLOAT
      return i
    }

    if(c === ';' || c === ')' || c === '(') {
      if(content.length) while(determine_operator(content));
      token(c)
      mode = NORMAL
      return i + 1
    }

    var is_composite_operator = content.length === 2 && c !== '='
    if(/[\w_\d\s]/.test(c) || is_composite_operator) {
      while(determine_operator(content));
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function determine_operator(buf) {
    var j = 0
      , idx
      , res

    do {
      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))
      res = operators[idx]

      if(idx === -1) {
        if(j-- + buf.length > 0) continue
        res = buf.slice(0, 1).join('')
      }

      token(res)

      start += res.length
      content = content.slice(res.length)
      return content.length
    } while(1)
  }

  function hex() {
    if(/[^a-fA-F0-9]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function integer() {
    if(c === '.') {
      content.push(c)
      mode = FLOAT
      last = c
      return i + 1
    }

    if(/[eE]/.test(c)) {
      content.push(c)
      mode = FLOAT
      last = c
      return i + 1
    }

    if(c === 'x' && content.length === 1 && content[0] === '0') {
      mode = HEX
      content.push(c)
      last = c
      return i + 1
    }

    if(/[^\d]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function decimal() {
    if(c === 'f') {
      content.push(c)
      last = c
      i += 1
    }

    if(/[eE]/.test(c)) {
      content.push(c)
      last = c
      return i + 1
    }

    if ((c === '-' || c === '+') && /[eE]/.test(last)) {
      content.push(c)
      last = c
      return i + 1
    }

    if(/[^\d]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function readtoken() {
    if(/[^\d\w_]/.test(c)) {
      var contentstr = content.join('')
      if(literalsDict[contentstr]) {
        mode = KEYWORD
      } else if(builtinsDict[contentstr]) {
        mode = BUILTIN
      } else {
        mode = IDENT
      }
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }
}


/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/builtins-300es.js":
/*!***********************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/builtins-300es.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 300es builtins/reserved words that were previously valid in v100
var v100 = __webpack_require__(/*! ./builtins */ "./node_modules/glsl-tokenizer/lib/builtins.js")

// The texture2D|Cube functions have been removed
// And the gl_ features are updated
v100 = v100.slice().filter(function (b) {
  return !/^(gl\_|texture)/.test(b)
})

module.exports = v100.concat([
  // the updated gl_ constants
    'gl_VertexID'
  , 'gl_InstanceID'
  , 'gl_Position'
  , 'gl_PointSize'
  , 'gl_FragCoord'
  , 'gl_FrontFacing'
  , 'gl_FragDepth'
  , 'gl_PointCoord'
  , 'gl_MaxVertexAttribs'
  , 'gl_MaxVertexUniformVectors'
  , 'gl_MaxVertexOutputVectors'
  , 'gl_MaxFragmentInputVectors'
  , 'gl_MaxVertexTextureImageUnits'
  , 'gl_MaxCombinedTextureImageUnits'
  , 'gl_MaxTextureImageUnits'
  , 'gl_MaxFragmentUniformVectors'
  , 'gl_MaxDrawBuffers'
  , 'gl_MinProgramTexelOffset'
  , 'gl_MaxProgramTexelOffset'
  , 'gl_DepthRangeParameters'
  , 'gl_DepthRange'

  // other builtins
  , 'trunc'
  , 'round'
  , 'roundEven'
  , 'isnan'
  , 'isinf'
  , 'floatBitsToInt'
  , 'floatBitsToUint'
  , 'intBitsToFloat'
  , 'uintBitsToFloat'
  , 'packSnorm2x16'
  , 'unpackSnorm2x16'
  , 'packUnorm2x16'
  , 'unpackUnorm2x16'
  , 'packHalf2x16'
  , 'unpackHalf2x16'
  , 'outerProduct'
  , 'transpose'
  , 'determinant'
  , 'inverse'
  , 'texture'
  , 'textureSize'
  , 'textureProj'
  , 'textureLod'
  , 'textureOffset'
  , 'texelFetch'
  , 'texelFetchOffset'
  , 'textureProjOffset'
  , 'textureLodOffset'
  , 'textureProjLod'
  , 'textureProjLodOffset'
  , 'textureGrad'
  , 'textureGradOffset'
  , 'textureProjGrad'
  , 'textureProjGradOffset'
])


/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/builtins.js":
/*!*****************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/builtins.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = [
  // Keep this list sorted
  'abs'
  , 'acos'
  , 'all'
  , 'any'
  , 'asin'
  , 'atan'
  , 'ceil'
  , 'clamp'
  , 'cos'
  , 'cross'
  , 'dFdx'
  , 'dFdy'
  , 'degrees'
  , 'distance'
  , 'dot'
  , 'equal'
  , 'exp'
  , 'exp2'
  , 'faceforward'
  , 'floor'
  , 'fract'
  , 'gl_BackColor'
  , 'gl_BackLightModelProduct'
  , 'gl_BackLightProduct'
  , 'gl_BackMaterial'
  , 'gl_BackSecondaryColor'
  , 'gl_ClipPlane'
  , 'gl_ClipVertex'
  , 'gl_Color'
  , 'gl_DepthRange'
  , 'gl_DepthRangeParameters'
  , 'gl_EyePlaneQ'
  , 'gl_EyePlaneR'
  , 'gl_EyePlaneS'
  , 'gl_EyePlaneT'
  , 'gl_Fog'
  , 'gl_FogCoord'
  , 'gl_FogFragCoord'
  , 'gl_FogParameters'
  , 'gl_FragColor'
  , 'gl_FragCoord'
  , 'gl_FragData'
  , 'gl_FragDepth'
  , 'gl_FragDepthEXT'
  , 'gl_FrontColor'
  , 'gl_FrontFacing'
  , 'gl_FrontLightModelProduct'
  , 'gl_FrontLightProduct'
  , 'gl_FrontMaterial'
  , 'gl_FrontSecondaryColor'
  , 'gl_LightModel'
  , 'gl_LightModelParameters'
  , 'gl_LightModelProducts'
  , 'gl_LightProducts'
  , 'gl_LightSource'
  , 'gl_LightSourceParameters'
  , 'gl_MaterialParameters'
  , 'gl_MaxClipPlanes'
  , 'gl_MaxCombinedTextureImageUnits'
  , 'gl_MaxDrawBuffers'
  , 'gl_MaxFragmentUniformComponents'
  , 'gl_MaxLights'
  , 'gl_MaxTextureCoords'
  , 'gl_MaxTextureImageUnits'
  , 'gl_MaxTextureUnits'
  , 'gl_MaxVaryingFloats'
  , 'gl_MaxVertexAttribs'
  , 'gl_MaxVertexTextureImageUnits'
  , 'gl_MaxVertexUniformComponents'
  , 'gl_ModelViewMatrix'
  , 'gl_ModelViewMatrixInverse'
  , 'gl_ModelViewMatrixInverseTranspose'
  , 'gl_ModelViewMatrixTranspose'
  , 'gl_ModelViewProjectionMatrix'
  , 'gl_ModelViewProjectionMatrixInverse'
  , 'gl_ModelViewProjectionMatrixInverseTranspose'
  , 'gl_ModelViewProjectionMatrixTranspose'
  , 'gl_MultiTexCoord0'
  , 'gl_MultiTexCoord1'
  , 'gl_MultiTexCoord2'
  , 'gl_MultiTexCoord3'
  , 'gl_MultiTexCoord4'
  , 'gl_MultiTexCoord5'
  , 'gl_MultiTexCoord6'
  , 'gl_MultiTexCoord7'
  , 'gl_Normal'
  , 'gl_NormalMatrix'
  , 'gl_NormalScale'
  , 'gl_ObjectPlaneQ'
  , 'gl_ObjectPlaneR'
  , 'gl_ObjectPlaneS'
  , 'gl_ObjectPlaneT'
  , 'gl_Point'
  , 'gl_PointCoord'
  , 'gl_PointParameters'
  , 'gl_PointSize'
  , 'gl_Position'
  , 'gl_ProjectionMatrix'
  , 'gl_ProjectionMatrixInverse'
  , 'gl_ProjectionMatrixInverseTranspose'
  , 'gl_ProjectionMatrixTranspose'
  , 'gl_SecondaryColor'
  , 'gl_TexCoord'
  , 'gl_TextureEnvColor'
  , 'gl_TextureMatrix'
  , 'gl_TextureMatrixInverse'
  , 'gl_TextureMatrixInverseTranspose'
  , 'gl_TextureMatrixTranspose'
  , 'gl_Vertex'
  , 'greaterThan'
  , 'greaterThanEqual'
  , 'inversesqrt'
  , 'length'
  , 'lessThan'
  , 'lessThanEqual'
  , 'log'
  , 'log2'
  , 'matrixCompMult'
  , 'max'
  , 'min'
  , 'mix'
  , 'mod'
  , 'normalize'
  , 'not'
  , 'notEqual'
  , 'pow'
  , 'radians'
  , 'reflect'
  , 'refract'
  , 'sign'
  , 'sin'
  , 'smoothstep'
  , 'sqrt'
  , 'step'
  , 'tan'
  , 'texture2D'
  , 'texture2DLod'
  , 'texture2DProj'
  , 'texture2DProjLod'
  , 'textureCube'
  , 'textureCubeLod'
  , 'texture2DLodEXT'
  , 'texture2DProjLodEXT'
  , 'textureCubeLodEXT'
  , 'texture2DGradEXT'
  , 'texture2DProjGradEXT'
  , 'textureCubeGradEXT'
]


/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/literals-300es.js":
/*!***********************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/literals-300es.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var v100 = __webpack_require__(/*! ./literals */ "./node_modules/glsl-tokenizer/lib/literals.js")

module.exports = v100.slice().concat([
   'layout'
  , 'centroid'
  , 'smooth'
  , 'case'
  , 'mat2x2'
  , 'mat2x3'
  , 'mat2x4'
  , 'mat3x2'
  , 'mat3x3'
  , 'mat3x4'
  , 'mat4x2'
  , 'mat4x3'
  , 'mat4x4'
  , 'uvec2'
  , 'uvec3'
  , 'uvec4'
  , 'samplerCubeShadow'
  , 'sampler2DArray'
  , 'sampler2DArrayShadow'
  , 'isampler2D'
  , 'isampler3D'
  , 'isamplerCube'
  , 'isampler2DArray'
  , 'usampler2D'
  , 'usampler3D'
  , 'usamplerCube'
  , 'usampler2DArray'
  , 'coherent'
  , 'restrict'
  , 'readonly'
  , 'writeonly'
  , 'resource'
  , 'atomic_uint'
  , 'noperspective'
  , 'patch'
  , 'sample'
  , 'subroutine'
  , 'common'
  , 'partition'
  , 'active'
  , 'filter'
  , 'image1D'
  , 'image2D'
  , 'image3D'
  , 'imageCube'
  , 'iimage1D'
  , 'iimage2D'
  , 'iimage3D'
  , 'iimageCube'
  , 'uimage1D'
  , 'uimage2D'
  , 'uimage3D'
  , 'uimageCube'
  , 'image1DArray'
  , 'image2DArray'
  , 'iimage1DArray'
  , 'iimage2DArray'
  , 'uimage1DArray'
  , 'uimage2DArray'
  , 'image1DShadow'
  , 'image2DShadow'
  , 'image1DArrayShadow'
  , 'image2DArrayShadow'
  , 'imageBuffer'
  , 'iimageBuffer'
  , 'uimageBuffer'
  , 'sampler1DArray'
  , 'sampler1DArrayShadow'
  , 'isampler1D'
  , 'isampler1DArray'
  , 'usampler1D'
  , 'usampler1DArray'
  , 'isampler2DRect'
  , 'usampler2DRect'
  , 'samplerBuffer'
  , 'isamplerBuffer'
  , 'usamplerBuffer'
  , 'sampler2DMS'
  , 'isampler2DMS'
  , 'usampler2DMS'
  , 'sampler2DMSArray'
  , 'isampler2DMSArray'
  , 'usampler2DMSArray'
])


/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/literals.js":
/*!*****************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/literals.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = [
  // current
    'precision'
  , 'highp'
  , 'mediump'
  , 'lowp'
  , 'attribute'
  , 'const'
  , 'uniform'
  , 'varying'
  , 'break'
  , 'continue'
  , 'do'
  , 'for'
  , 'while'
  , 'if'
  , 'else'
  , 'in'
  , 'out'
  , 'inout'
  , 'float'
  , 'int'
  , 'uint'
  , 'void'
  , 'bool'
  , 'true'
  , 'false'
  , 'discard'
  , 'return'
  , 'mat2'
  , 'mat3'
  , 'mat4'
  , 'vec2'
  , 'vec3'
  , 'vec4'
  , 'ivec2'
  , 'ivec3'
  , 'ivec4'
  , 'bvec2'
  , 'bvec3'
  , 'bvec4'
  , 'sampler1D'
  , 'sampler2D'
  , 'sampler3D'
  , 'samplerCube'
  , 'sampler1DShadow'
  , 'sampler2DShadow'
  , 'struct'

  // future
  , 'asm'
  , 'class'
  , 'union'
  , 'enum'
  , 'typedef'
  , 'template'
  , 'this'
  , 'packed'
  , 'goto'
  , 'switch'
  , 'default'
  , 'inline'
  , 'noinline'
  , 'volatile'
  , 'public'
  , 'static'
  , 'extern'
  , 'external'
  , 'interface'
  , 'long'
  , 'short'
  , 'double'
  , 'half'
  , 'fixed'
  , 'unsigned'
  , 'input'
  , 'output'
  , 'hvec2'
  , 'hvec3'
  , 'hvec4'
  , 'dvec2'
  , 'dvec3'
  , 'dvec4'
  , 'fvec2'
  , 'fvec3'
  , 'fvec4'
  , 'sampler2DRect'
  , 'sampler3DRect'
  , 'sampler2DRectShadow'
  , 'sizeof'
  , 'cast'
  , 'namespace'
  , 'using'
]


/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/operators.js":
/*!******************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/operators.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = [
    '<<='
  , '>>='
  , '++'
  , '--'
  , '<<'
  , '>>'
  , '<='
  , '>='
  , '=='
  , '!='
  , '&&'
  , '||'
  , '+='
  , '-='
  , '*='
  , '/='
  , '%='
  , '&='
  , '^^'
  , '^='
  , '|='
  , '('
  , ')'
  , '['
  , ']'
  , '.'
  , '!'
  , '~'
  , '*'
  , '/'
  , '%'
  , '+'
  , '-'
  , '<'
  , '>'
  , '&'
  , '^'
  , '|'
  , '?'
  , ':'
  , '='
  , ','
  , ';'
  , '{'
  , '}'
]


/***/ }),

/***/ "./node_modules/glsl-tokenizer/string.js":
/*!***********************************************!*\
  !*** ./node_modules/glsl-tokenizer/string.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var tokenize = __webpack_require__(/*! ./index */ "./node_modules/glsl-tokenizer/index.js")

module.exports = tokenizeString

function tokenizeString(str, opt) {
  var generator = tokenize(opt)
  var tokens = []

  tokens = tokens.concat(generator(str))
  tokens = tokens.concat(generator(null))

  return tokens
}


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./ts/src/FileSaver.ts":
/*!*****************************!*\
  !*** ./ts/src/FileSaver.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
/*
 * FileSaver.js
 * A saveAs() FileSaver implementation.
 *
 * By Eli Grey, http://eligrey.com
 *
 * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
 * source  : http://purl.eligrey.com/github/FileSaver.js
 */
Object.defineProperty(exports, "__esModule", { value: true });
// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
var _global = typeof window === "object" && window.window === window
    ? window
    : typeof self === "object" && self.self === self
        ? self
        : typeof global === "object" && global.global === global
            ? global
            : this;
function bom(blob, opts) {
    if (typeof opts === "undefined")
        opts = { autoBom: false };
    else if (typeof opts !== "object") {
        console.warn("Deprecated: Expected third argument to be a object");
        opts = { autoBom: !opts };
    }
    // prepend BOM for UTF-8 XML and text/* types (including HTML)
    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
    if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });
    }
    return blob;
}
function download(url, name, opts) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.onload = function () {
        saveAs(xhr.response, name, opts);
    };
    xhr.onerror = function () {
        console.error("could not download file");
    };
    xhr.send();
}
function corsEnabled(url) {
    var xhr = new XMLHttpRequest();
    // use sync to avoid popup blocker
    xhr.open("HEAD", url, false);
    try {
        xhr.send();
    }
    catch (e) { }
    return xhr.status >= 200 && xhr.status <= 299;
}
// `a.click()` doesn't work for all browsers (#465)
function click(node, tmp2) {
    try {
        node.dispatchEvent(new MouseEvent("click"));
    }
    catch (e) {
        var evt = document.createEvent("MouseEvents");
        evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
        node.dispatchEvent(evt);
    }
}
// Detect WebView inside a native macOS app by ruling out all browsers
// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
var isMacOSWebView = _global.navigator &&
    /Macintosh/.test(navigator.userAgent) &&
    /AppleWebKit/.test(navigator.userAgent) &&
    !/Safari/.test(navigator.userAgent);
var saveAs = _global.saveAs ||
    // probably in some web worker
    (typeof window !== "object" || window !== _global
        ? function saveAs() {
            /* noop */
        }
        : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView
            "download" in HTMLAnchorElement.prototype && !isMacOSWebView
                ? function saveAs(blob, name, opts) {
                    var URL = _global.URL || _global.webkitURL;
                    var a = document.createElement("a");
                    name = name || blob.name || "download";
                    a.download = name;
                    a.rel = "noopener"; // tabnabbing
                    // TODO: detect chrome extensions & packaged apps
                    // a.target = '_blank'
                    if (typeof blob === "string") {
                        // Support regular links
                        a.href = blob;
                        if (a.origin !== location.origin) {
                            corsEnabled(a.href) ? download(blob, name, opts) : click(a, (a.target = "_blank"));
                        }
                        else {
                            click(a);
                        }
                    }
                    else {
                        // Support blobs
                        a.href = URL.createObjectURL(blob);
                        setTimeout(function () {
                            URL.revokeObjectURL(a.href);
                        }, 4e4); // 40s
                        setTimeout(function () {
                            click(a);
                        }, 0);
                    }
                }
                : // Use msSaveOrOpenBlob as a second approach
                    "msSaveOrOpenBlob" in navigator
                        ? function saveAs(blob, name, opts) {
                            name = name || blob.name || "download";
                            if (typeof blob === "string") {
                                if (corsEnabled(blob)) {
                                    download(blob, name, opts);
                                }
                                else {
                                    var a = document.createElement("a");
                                    a.href = blob;
                                    a.target = "_blank";
                                    setTimeout(function () {
                                        click(a);
                                    });
                                }
                            }
                            else {
                                navigator.msSaveOrOpenBlob(bom(blob, opts), name);
                            }
                        }
                        : // Fallback to using FileReader and a popup
                            function saveAs(blob, name, opts, popup) {
                                // Open a popup immediately do go around popup blocker
                                // Mostly only available on user interaction and the fileReader is async so...
                                popup = popup || open("", "_blank");
                                if (popup) {
                                    popup.document.title = popup.document.body.innerText = "downloading...";
                                }
                                if (typeof blob === "string")
                                    return download(blob, name, opts);
                                var force = blob.type === "application/octet-stream";
                                var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari;
                                var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
                                if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== "undefined") {
                                    // Safari doesn't allow downloading of blob URLs
                                    var reader = new FileReader();
                                    reader.onloadend = function () {
                                        var url = reader.result;
                                        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
                                        if (popup)
                                            popup.location.href = url;
                                        else
                                            location = url;
                                        popup = null; // reverse-tabnabbing #460
                                    };
                                    reader.readAsDataURL(blob);
                                }
                                else {
                                    var URL = _global.URL || _global.webkitURL;
                                    var url = URL.createObjectURL(blob);
                                    if (popup)
                                        popup.location = url;
                                    else
                                        location.href = url;
                                    popup = null; // reverse-tabnabbing #460
                                    setTimeout(function () {
                                        URL.revokeObjectURL(url);
                                    }, 4e4); // 40s
                                }
                            });
_global.saveAs = saveAs.saveAs = saveAs;
exports.fileSaveAs = saveAs;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./ts/src/glslCompiler/DeparseGlslGlobalVal.ts":
/*!*****************************************************!*\
  !*** ./ts/src/glslCompiler/DeparseGlslGlobalVal.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InOutType;
(function (InOutType) {
    InOutType[InOutType["in"] = 0] = "in";
    InOutType[InOutType["out"] = 1] = "out";
    InOutType[InOutType["inout"] = 2] = "inout";
})(InOutType = exports.InOutType || (exports.InOutType = {}));
class DeparseGlslGlobalVal {
    constructor() {
        // 等待推入的声明对象
        this.waitPushDecVal = new Map();
        this.nowTypeCach = "";
        this.nowFuncTypeCach = "";
        this.nowBlockLevel = 0;
        this.isFuncArgs = false;
        this.inForDefine = false;
        this.useBuiltinFuncs = new Set();
        this.useBuiltinOperators = new Set();
        // 当前声明的数组数量
        this.declArrNum = [];
        // 是否处于左赋值语句中
        this.isLeftSet = false;
        this.inFunc = false;
        this.isFuncBlock = false;
        this.uniformData = new Map();
        this.varyingData = new Map();
        this.attributeData = new Map();
        this.structDataMap = new Map();
        this.defines = null;
        this.customFuns = new Map();
        this.customFunsInOutType = new Map();
        // 对应每一层块的变量 会往当前块往父节点块的变量查找 如果都找不到 那么会往类数据查找
        // funcObj会记录对象名和类型
        this.nowFucObj = new Map();
        // 用于函数参数in 的替代声明
        this.funcArgsInReplace = [];
    }
    forceInit(ud, vd, ad, sdm, d) {
        this.nowFuncTypeCach = "";
        this.waitPushDecVal = new Map();
        this.nowTypeCach = "";
        this.declArrNum = [];
        this.isLeftSet = false;
        this.inFunc = false;
        this.isFuncArgs = false;
        this.inForDefine = false;
        this.uniformData = ud;
        this.varyingData = vd;
        this.attributeData = ad;
        this.structDataMap = sdm;
        this.defines = d;
        this.nowFucObj = new Map();
        this.useBuiltinFuncs = new Set();
        this.useBuiltinOperators = new Set();
        this.customFuns = new Map();
        this.customFunsInOutType = new Map();
    }
}
exports.DeparseGlslGlobalVal = DeparseGlslGlobalVal;


/***/ }),

/***/ "./ts/src/glslCompiler/GLSLInterpreter.ts":
/*!************************************************!*\
  !*** ./ts/src/glslCompiler/GLSLInterpreter.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const deparserToTs_1 = __webpack_require__(/*! ./deparserToTs */ "./ts/src/glslCompiler/deparserToTs.ts");
let tokenizeString = __webpack_require__(/*! glsl-tokenizer */ "./node_modules/glsl-tokenizer/string.js");
let parseArray = __webpack_require__(/*! glsl-parser/direct */ "./node_modules/glsl-parser/direct.js");
let SparkMD5 = __webpack_require__(/*! Spark-md5 */ "./node_modules/Spark-md5/spark-md5.js");
const shaderBeginContent = `import { AttributeData, FragShaderHandle, UniformData, VaryingData, VertShaderHandle, StructData } from "../../ShaderDefine"
import { IntData, FloatData, Vec2Data, Vec3Data, Vec4Data, Mat3Data, Mat4Data, BoolData, Sampler2D, SamplerCube } from "../builtin/BuiltinData"
`;
var BlockType;
(function (BlockType) {
    BlockType[BlockType["structBlock"] = 0] = "structBlock";
    BlockType[BlockType["funcBlock"] = 1] = "funcBlock";
    BlockType[BlockType["ifBlock"] = 2] = "ifBlock";
    BlockType[BlockType["whileBlock"] = 3] = "whileBlock";
    BlockType[BlockType["defineIfBlock"] = 4] = "defineIfBlock";
    BlockType[BlockType["defineElseBlock"] = 5] = "defineElseBlock";
    BlockType[BlockType["defineElifBlock"] = 6] = "defineElifBlock";
})(BlockType || (BlockType = {}));
var JudgeType;
(function (JudgeType) {
    JudgeType[JudgeType["more"] = 0] = "more";
    JudgeType[JudgeType["moreEqual"] = 1] = "moreEqual";
    JudgeType[JudgeType["less"] = 2] = "less";
    JudgeType[JudgeType["lessEqual"] = 3] = "lessEqual";
    JudgeType[JudgeType["equal"] = 4] = "equal";
    JudgeType[JudgeType["noEqual"] = 5] = "noEqual";
})(JudgeType || (JudgeType = {}));
class DefineBlockJudgeData {
    constructor() {
        this.nowLevel = 0;
        this.canCompile = false;
        this.blockType = null;
        this.content = "";
    }
}
function getDefineOrConstNum(str, define) {
    let index = str.indexOf("!");
    let logicNeg = false;
    if (index !== -1) {
        logicNeg = true;
        str = str.substring(index + 1);
    }
    str = str.replace(/\s*/g, "");
    let num = parseFloat(str);
    if (isNaN(num)) {
        num = define.get(str);
    }
    // 在define中找不到其實也正常
    if (num === undefined) {
        console.log("在define中查找不到对应变量 " + str);
        num = 0;
    }
    if (logicNeg) {
        num = num !== 0 ? 0 : 1;
    }
    return num;
}
function compilerJudge(left, right, type, define) {
    let leftNum = getDefineOrConstNum(left, define);
    let rightNum = getDefineOrConstNum(right, define);
    let canCompiler = false;
    switch (type) {
        case JudgeType.more:
            canCompiler = leftNum > rightNum;
            break;
        case JudgeType.moreEqual:
            canCompiler = leftNum >= rightNum;
            break;
        case JudgeType.less:
            canCompiler = leftNum < rightNum;
            break;
        case JudgeType.lessEqual:
            canCompiler = leftNum <= rightNum;
            break;
        case JudgeType.equal:
            canCompiler = leftNum == rightNum;
            break;
        case JudgeType.noEqual:
            canCompiler = leftNum != rightNum;
            break;
        default:
            console.error("无法识别的类型");
            debugger;
    }
    return canCompiler;
}
let judgeOperatorStrs = [">", ">=", "<", "<=", "==", "!="];
function interpreterDefine(lineStr, defines, defineCode) {
    let judgeLine = [];
    let judgeStr = lineStr.substring(lineStr.indexOf(defineCode) + defineCode.length);
    let isAndArr = [];
    while (true) {
        let andIndex = judgeStr.indexOf("&&");
        let orIndex = judgeStr.indexOf("||");
        let spIndex;
        if (andIndex * orIndex >= 0) {
            spIndex = Math.min(andIndex, orIndex);
        }
        else {
            spIndex = Math.max(andIndex, orIndex);
        }
        if (spIndex !== -1) {
            isAndArr.push(spIndex == andIndex);
            judgeLine.push(judgeStr.substring(0, spIndex));
            judgeStr = judgeStr.substring(spIndex + defineCode.length);
        }
        else {
            judgeLine.push(judgeStr);
            break;
        }
    }
    let canCompiler = true;
    for (let index = 0; index < judgeLine.length; index++) {
        let isAnd = isAndArr[index];
        if (isAnd === undefined) {
            isAnd = true;
        }
        let str = judgeLine[index];
        let isJudgeSuc = false;
        let judgeType = null;
        let judgeIndex = -1;
        for (let index = 0; index < judgeOperatorStrs.length; index++) {
            const element = judgeOperatorStrs[index];
            judgeIndex = str.indexOf(element);
            if (judgeIndex !== -1) {
                judgeType = index;
                break;
            }
        }
        if (judgeIndex !== -1) {
            let operatorStr = judgeOperatorStrs[judgeType];
            let leftStr = str.substring(0, judgeIndex);
            let rightStr = str.substring(judgeIndex + operatorStr.length);
            // 去掉空格
            leftStr = leftStr.replace(/\s*/g, "");
            rightStr = rightStr.replace(/\s*/g, "");
            isJudgeSuc = compilerJudge(leftStr, rightStr, judgeType, defines);
        }
        else {
            let num = getDefineOrConstNum(str, defines);
            isJudgeSuc = num != 0;
        }
        if (isJudgeSuc) {
            if (isAnd) {
                // 继续
            }
            else {
                canCompiler = true;
                break;
            }
        }
        else {
            if (isAnd) {
                canCompiler = false;
                break;
            }
            else {
                // 继续
            }
        }
    }
    return canCompiler;
}
class GLSLInterpreter {
    static interpreter(source) {
        let lines = source.split("\n");
        let defines = new Map();
        let strDefines = new Map();
        // 根据块层级定义的defines语句判断
        let nowLevelBlock = 0;
        let levelBlockDefinesJudge = new Map();
        let attributeKey = "attribute ";
        let varyingKey = "varying ";
        let uniformKey = "uniform ";
        let structKey = "struct ";
        let isVert = source.indexOf("gl_Position") !== -1;
        // 不能提前计算define
        // 通过#if 语句排除不执行的语句
        let excludeUnuseLine = [];
        let remainContent = "";
        let bloackStack = [];
        for (let i = 0; i < lines.length; i++) {
            const lineStr = lines[i];
            let strArr = lineStr.split(" ");
            let analysisStr = [];
            strArr.forEach((element) => {
                if (element !== "") {
                    analysisStr.push(element);
                }
            });
            // 所以的语句都会被判断
            // 所以要一直往父节点判断 都是可以编译的 才能编译
            let canHandleLine = false;
            if (levelBlockDefinesJudge.size > 0) {
                for (let index = nowLevelBlock; index > 0; index--) {
                    let levelBlockData = levelBlockDefinesJudge.get(index);
                    let nowBlockData = levelBlockData[levelBlockData.length - 1];
                    canHandleLine = nowBlockData.canCompile;
                    if (!canHandleLine) {
                        break;
                    }
                }
            }
            else {
                canHandleLine = true;
            }
            if (lineStr.indexOf("#") !== -1) {
                if (lineStr.indexOf("define") !== -1) {
                    if (!canHandleLine) {
                        continue;
                    }
                    let index = lineStr.indexOf("define");
                    if (lineStr.indexOf("(") !== -1) {
                        console.error("暂时无法识别define中的(");
                        debugger;
                    }
                    let remainStr = lineStr.substr(index + "define".length);
                    let strArr = remainStr.split(" ");
                    let keyValueStr = [];
                    strArr.forEach((element) => {
                        if (element !== "") {
                            keyValueStr.push(element);
                        }
                    });
                    let value = parseFloat(keyValueStr[1]);
                    if (isNaN(value)) {
                        value = keyValueStr[1];
                        strDefines.set(keyValueStr[0], value);
                    }
                    else {
                        defines.set(keyValueStr[0], value);
                    }
                }
                else if (lineStr.indexOf("#ifdef") !== -1 || lineStr.indexOf("# ifdef") !== -1) {
                    nowLevelBlock++;
                    let nowLevelBlockData = new DefineBlockJudgeData();
                    nowLevelBlockData.nowLevel = nowLevelBlock;
                    nowLevelBlockData.blockType = BlockType.defineIfBlock;
                    nowLevelBlockData.content = lineStr;
                    if (levelBlockDefinesJudge.get(nowLevelBlock)) {
                        console.error("不应该在if语句中有同一层级的数据");
                        debugger;
                    }
                    // if下的语句可以编译
                    if (defines.get(analysisStr[1])) {
                        nowLevelBlockData.canCompile = true;
                        // bloackStack.push({ type: BlockType.defineIfBlock, value: true, canBuild: true })
                    }
                    else {
                        nowLevelBlockData.canCompile = false;
                        // 不可编译
                        // bloackStack.push({ type: BlockType.defineIfBlock, value: false, canBuild: false })
                    }
                    levelBlockDefinesJudge.set(nowLevelBlock, [nowLevelBlockData]);
                }
                else if (lineStr.indexOf("#if") !== -1 || lineStr.indexOf("# if") !== -1) {
                    nowLevelBlock++;
                    let nowLevelBlockData = new DefineBlockJudgeData();
                    nowLevelBlockData.nowLevel = nowLevelBlock;
                    nowLevelBlockData.blockType = BlockType.defineIfBlock;
                    nowLevelBlockData.content = lineStr;
                    if (levelBlockDefinesJudge.get(nowLevelBlock)) {
                        console.error("不应该在if语句中有同一层级的数据");
                        debugger;
                    }
                    // 要进行语句判断
                    let canCompiler = interpreterDefine(lineStr, defines, "if");
                    nowLevelBlockData.canCompile = canCompiler;
                    levelBlockDefinesJudge.set(nowLevelBlock, [nowLevelBlockData]);
                    // if (canCompiler) {
                    //     bloackStack.push({ type: BlockType.defineIfBlock, value: true, canBuild: true, nowLevel: 0, buildLevel: 0 })
                    // } else {
                    //     // 不可编译
                    //     bloackStack.push({ type: BlockType.defineIfBlock, value: false, canBuild: false })
                    // }
                }
                else if (lineStr.indexOf("#elif") !== -1 || lineStr.indexOf("# elif") !== -1) {
                    let levelBlockData = levelBlockDefinesJudge.get(nowLevelBlock);
                    if (!levelBlockData) {
                        console.error("elif语句中必然有同一层级的数据");
                        debugger;
                    }
                    // 如果之前有成功编译的条件语句的话 后面的预编译判断都不能生效
                    let hasCompiler = false;
                    for (let index = 0; index < levelBlockData.length; index++) {
                        const element = levelBlockData[index];
                        if (element.canCompile) {
                            hasCompiler = true;
                            break;
                        }
                    }
                    let nowLevelBlockData = new DefineBlockJudgeData();
                    nowLevelBlockData.nowLevel = nowLevelBlock;
                    nowLevelBlockData.blockType = BlockType.defineElifBlock;
                    nowLevelBlockData.content = lineStr;
                    if (hasCompiler) {
                        nowLevelBlockData.canCompile = false;
                    }
                    else {
                        let canCompiler = interpreterDefine(lineStr, defines, "elif");
                        nowLevelBlockData.canCompile = canCompiler;
                    }
                    levelBlockData.push(nowLevelBlockData);
                }
                else if (lineStr.indexOf("#else") !== -1 || lineStr.indexOf("# else") !== -1) {
                    let levelBlockData = levelBlockDefinesJudge.get(nowLevelBlock);
                    if (!levelBlockData) {
                        console.error("elif语句中必然有同一层级的数据");
                        debugger;
                    }
                    // 如果之前有成功编译的条件语句的话 后面的预编译判断都不能生效
                    let hasCompiler = false;
                    for (let index = 0; index < levelBlockData.length; index++) {
                        const element = levelBlockData[index];
                        if (element.canCompile) {
                            hasCompiler = true;
                            break;
                        }
                    }
                    let nowLevelBlockData = new DefineBlockJudgeData();
                    nowLevelBlockData.nowLevel = nowLevelBlock;
                    nowLevelBlockData.blockType = BlockType.defineElifBlock;
                    nowLevelBlockData.content = lineStr;
                    if (hasCompiler) {
                        nowLevelBlockData.canCompile = false;
                    }
                    else {
                        // 如果是之前都没编译 证明之前的都是false 所以这个else应该生效
                        nowLevelBlockData.canCompile = true;
                    }
                    levelBlockData.push(nowLevelBlockData);
                }
                else if (lineStr.indexOf("#endif") !== -1 || lineStr.indexOf("# endif") !== -1) {
                    let levelBlockData = levelBlockDefinesJudge.get(nowLevelBlock);
                    if (!levelBlockData) {
                        console.error("endif语句中必然有同一层级的数据");
                        debugger;
                    }
                    levelBlockDefinesJudge.delete(nowLevelBlock);
                    nowLevelBlock--;
                }
                else {
                    console.error("未识别的宏定义: " + lineStr);
                }
            }
            else {
                if (canHandleLine) {
                    let pushStr = lineStr;
                    strDefines.forEach((str, replaceStr) => {
                        pushStr = pushStr.replace(new RegExp(replaceStr, "g"), str);
                    });
                    excludeUnuseLine.push(pushStr);
                }
            }
        }
        for (let i = 0; i < excludeUnuseLine.length; i++) {
            const lineStr = excludeUnuseLine[i];
            remainContent += lineStr + "\n";
        }
        // console.log(remainContent)
        // defines.forEach((value: string | number, key: string) => {
        //     remainContent = `#define ${key} ${value}\n` + remainContent
        // })
        let token = tokenizeString(remainContent);
        let ast = parseArray(token);
        let factDoGlsl = remainContent;
        strDefines.forEach((value, key) => {
            factDoGlsl = `#define ${key} ${value}\n` + factDoGlsl;
        });
        defines.forEach((value, key) => {
            factDoGlsl = `#define ${key} ${value}\n` + factDoGlsl;
        });
        let uniformData = new Map();
        let varyingData = new Map();
        let attributeData = new Map();
        let structDataMap = new Map();
        let structData = null;
        let logicLines = [];
        // 获取所有的函数外部变量
        for (let i = 0; i < excludeUnuseLine.length; i++) {
            let lineStr = excludeUnuseLine[i];
            // 删掉冒号
            let deleteIndex = lineStr.indexOf(";");
            if (deleteIndex !== -1) {
                lineStr = lineStr.substr(0, deleteIndex);
            }
            let strArr = lineStr.split(" ");
            let analysisStr = [];
            strArr.forEach((element) => {
                if (element !== "") {
                    analysisStr.push(element);
                }
            });
            let index = lineStr.indexOf(varyingKey);
            if (index !== -1) {
                if (analysisStr.length == 4) {
                    varyingData.set(analysisStr[3], analysisStr[2]);
                }
                else {
                    varyingData.set(analysisStr[2], analysisStr[1]);
                }
                continue;
            }
            index = lineStr.indexOf(attributeKey);
            if (index !== -1) {
                if (analysisStr.length == 4) {
                    attributeData.set(analysisStr[3], analysisStr[2]);
                }
                else {
                    attributeData.set(analysisStr[2], analysisStr[1]);
                }
                continue;
            }
            index = lineStr.indexOf(uniformKey);
            if (index !== -1) {
                if (analysisStr.length == 4) {
                    uniformData.set(analysisStr[3], analysisStr[2]);
                }
                else {
                    uniformData.set(analysisStr[2], analysisStr[1]);
                }
                continue;
            }
            index = lineStr.indexOf(structKey);
            if (index !== -1) {
                structData = new Map();
                structDataMap.set(analysisStr[1], structData);
                continue;
            }
            if (structData) {
                analysisStr.forEach((str) => {
                    if (str.indexOf("}") !== -1) {
                        structData = null;
                    }
                });
                if (analysisStr.length == 2) {
                    structData.set(analysisStr[1], analysisStr[0]);
                }
                else if (analysisStr.length == 3) {
                    structData.set(analysisStr[2], analysisStr[1]);
                }
            }
            else {
                logicLines.push(lineStr);
            }
        }
        let hash = SparkMD5.hash(source);
        // 这里的ts脚本是不包含uniform等变量声明的
        let args = deparserToTs_1.deparseToTs(ast, true, "    ", uniformData, varyingData, attributeData, structDataMap, defines, isVert, hash);
        let importStr = args[0];
        let tsScript = args[1];
        let originSource = "/*\norigin glsl source: \n";
        originSource += source + "\n*/\n";
        // console.log(originSource + tsScript)
        originSource += `/*\nfact do glsl source: \n` + factDoGlsl + `*/\n`;
        let outStr = originSource + importStr + shaderBeginContent + tsScript;
        let win = window;
        outStr = win.prettier.format(outStr, {
            parser: "typescript",
            plugins: win.prettierPlugins,
            tabWidth: 4,
            useTabs: false,
            semi: false,
            printWidth: 140,
        });
        // console.log(outStr)
        return [hash, outStr];
    }
}
exports.GLSLInterpreter = GLSLInterpreter;


/***/ }),

/***/ "./ts/src/glslCompiler/WsManager.ts":
/*!******************************************!*\
  !*** ./ts/src/glslCompiler/WsManager.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Nothing = "";
class WsManager {
    constructor(whitespace_enabled = false, indent_text = "") {
        this.enabled = false;
        this.indent_text = "";
        this.level = 0;
        this.optional = null;
        this.enabled = whitespace_enabled;
        this.indent_text = indent_text;
        this.level = 0;
        this.tabcache = ["", indent_text, indent_text + indent_text, indent_text + indent_text + indent_text];
        this.optional = whitespace_enabled ? this.required : this.disabled;
    }
    indent() {
        ++this.level;
    }
    dedent() {
        --this.level;
    }
    disabled() {
        return Nothing;
    }
    required(c) {
        if (c === "\n" && this.enabled) {
            // 增加;一边ts对代码的重排处理
            c += this.tab();
        }
        return c;
    }
    tab() {
        // yes, we're caching tabs.
        // why? well, every line is going to be calling this,
        // which would suck if we were indented a bunch in a block.
        if (this.tabcache[this.level]) {
            return this.tabcache[this.level];
        }
        var _ = "";
        for (var i = 0, len = this.level, o = this.indent_text; i < len; ++i) {
            _ += o;
        }
        return (this.tabcache[len] = _);
    }
}
exports.WsManager = WsManager;


/***/ }),

/***/ "./ts/src/glslCompiler/builtinAtt.ts":
/*!*******************************************!*\
  !*** ./ts/src/glslCompiler/builtinAtt.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.builtinDataAtt = {
    Vec2Data: {
        type: "Vec2Data",
        att: {
            x: "number",
            y: "number",
            xx: "Vec2Data",
            yx: "Vec2Data",
            xy: "Vec2Data",
            yy: "Vec2Data",
            r: "number",
            g: "number",
            rr: "Vec2Data",
            gr: "Vec2Data",
            rg: "Vec2Data",
            gg: "Vec2Data",
            s: "number",
            t: "number",
            ss: "Vec2Data",
            ts: "Vec2Data",
            st: "Vec2Data",
            tt: "Vec2Data",
        },
    },
    Vec3Data: {
        type: "Vec3Data",
        att: {
            x: "number",
            y: "number",
            z: "number",
            xx: "Vec2Data",
            yx: "Vec2Data",
            zx: "Vec2Data",
            xy: "Vec2Data",
            yy: "Vec2Data",
            zy: "Vec2Data",
            xz: "Vec2Data",
            yz: "Vec2Data",
            zz: "Vec2Data",
            xxx: "Vec3Data",
            yxx: "Vec3Data",
            zxx: "Vec3Data",
            xyx: "Vec3Data",
            yyx: "Vec3Data",
            zyx: "Vec3Data",
            xzx: "Vec3Data",
            yzx: "Vec3Data",
            zzx: "Vec3Data",
            xxy: "Vec3Data",
            yxy: "Vec3Data",
            zxy: "Vec3Data",
            xyy: "Vec3Data",
            yyy: "Vec3Data",
            zyy: "Vec3Data",
            xzy: "Vec3Data",
            yzy: "Vec3Data",
            zzy: "Vec3Data",
            xxz: "Vec3Data",
            yxz: "Vec3Data",
            zxz: "Vec3Data",
            xyz: "Vec3Data",
            yyz: "Vec3Data",
            zyz: "Vec3Data",
            xzz: "Vec3Data",
            yzz: "Vec3Data",
            zzz: "Vec3Data",
            r: "number",
            g: "number",
            b: "number",
            rr: "Vec2Data",
            gr: "Vec2Data",
            br: "Vec2Data",
            rg: "Vec2Data",
            gg: "Vec2Data",
            bg: "Vec2Data",
            rb: "Vec2Data",
            gb: "Vec2Data",
            bb: "Vec2Data",
            rrr: "Vec3Data",
            grr: "Vec3Data",
            brr: "Vec3Data",
            rgr: "Vec3Data",
            ggr: "Vec3Data",
            bgr: "Vec3Data",
            rbr: "Vec3Data",
            gbr: "Vec3Data",
            bbr: "Vec3Data",
            rrg: "Vec3Data",
            grg: "Vec3Data",
            brg: "Vec3Data",
            rgg: "Vec3Data",
            ggg: "Vec3Data",
            bgg: "Vec3Data",
            rbg: "Vec3Data",
            gbg: "Vec3Data",
            bbg: "Vec3Data",
            rrb: "Vec3Data",
            grb: "Vec3Data",
            brb: "Vec3Data",
            rgb: "Vec3Data",
            ggb: "Vec3Data",
            bgb: "Vec3Data",
            rbb: "Vec3Data",
            gbb: "Vec3Data",
            bbb: "Vec3Data",
            s: "number",
            t: "number",
            p: "number",
            ss: "Vec2Data",
            ts: "Vec2Data",
            ps: "Vec2Data",
            st: "Vec2Data",
            tt: "Vec2Data",
            pt: "Vec2Data",
            sp: "Vec2Data",
            tp: "Vec2Data",
            pp: "Vec2Data",
            sss: "Vec3Data",
            tss: "Vec3Data",
            pss: "Vec3Data",
            sts: "Vec3Data",
            tts: "Vec3Data",
            pts: "Vec3Data",
            sps: "Vec3Data",
            tps: "Vec3Data",
            pps: "Vec3Data",
            sst: "Vec3Data",
            tst: "Vec3Data",
            pst: "Vec3Data",
            stt: "Vec3Data",
            ttt: "Vec3Data",
            ptt: "Vec3Data",
            spt: "Vec3Data",
            tpt: "Vec3Data",
            ppt: "Vec3Data",
            ssp: "Vec3Data",
            tsp: "Vec3Data",
            psp: "Vec3Data",
            stp: "Vec3Data",
            ttp: "Vec3Data",
            ptp: "Vec3Data",
            spp: "Vec3Data",
            tpp: "Vec3Data",
            ppp: "Vec3Data",
        },
    },
    Vec4Data: {
        type: "Vec4Data",
        att: {
            x: "number",
            y: "number",
            z: "number",
            w: "number",
            xx: "Vec2Data",
            yx: "Vec2Data",
            zx: "Vec2Data",
            wx: "Vec2Data",
            xy: "Vec2Data",
            yy: "Vec2Data",
            zy: "Vec2Data",
            wy: "Vec2Data",
            xz: "Vec2Data",
            yz: "Vec2Data",
            zz: "Vec2Data",
            wz: "Vec2Data",
            xw: "Vec2Data",
            yw: "Vec2Data",
            zw: "Vec2Data",
            ww: "Vec2Data",
            xxx: "Vec3Data",
            yxx: "Vec3Data",
            zxx: "Vec3Data",
            wxx: "Vec3Data",
            xyx: "Vec3Data",
            yyx: "Vec3Data",
            zyx: "Vec3Data",
            wyx: "Vec3Data",
            xzx: "Vec3Data",
            yzx: "Vec3Data",
            zzx: "Vec3Data",
            wzx: "Vec3Data",
            xwx: "Vec3Data",
            ywx: "Vec3Data",
            zwx: "Vec3Data",
            wwx: "Vec3Data",
            xxy: "Vec3Data",
            yxy: "Vec3Data",
            zxy: "Vec3Data",
            wxy: "Vec3Data",
            xyy: "Vec3Data",
            yyy: "Vec3Data",
            zyy: "Vec3Data",
            wyy: "Vec3Data",
            xzy: "Vec3Data",
            yzy: "Vec3Data",
            zzy: "Vec3Data",
            wzy: "Vec3Data",
            xwy: "Vec3Data",
            ywy: "Vec3Data",
            zwy: "Vec3Data",
            wwy: "Vec3Data",
            xxz: "Vec3Data",
            yxz: "Vec3Data",
            zxz: "Vec3Data",
            wxz: "Vec3Data",
            xyz: "Vec3Data",
            yyz: "Vec3Data",
            zyz: "Vec3Data",
            wyz: "Vec3Data",
            xzz: "Vec3Data",
            yzz: "Vec3Data",
            zzz: "Vec3Data",
            wzz: "Vec3Data",
            xwz: "Vec3Data",
            ywz: "Vec3Data",
            zwz: "Vec3Data",
            wwz: "Vec3Data",
            xxw: "Vec3Data",
            yxw: "Vec3Data",
            zxw: "Vec3Data",
            wxw: "Vec3Data",
            xyw: "Vec3Data",
            yyw: "Vec3Data",
            zyw: "Vec3Data",
            wyw: "Vec3Data",
            xzw: "Vec3Data",
            yzw: "Vec3Data",
            zzw: "Vec3Data",
            wzw: "Vec3Data",
            xww: "Vec3Data",
            yww: "Vec3Data",
            zww: "Vec3Data",
            www: "Vec3Data",
            xxxx: "Vec4Data",
            yxxx: "Vec4Data",
            zxxx: "Vec4Data",
            wxxx: "Vec4Data",
            xyxx: "Vec4Data",
            yyxx: "Vec4Data",
            zyxx: "Vec4Data",
            wyxx: "Vec4Data",
            xzxx: "Vec4Data",
            yzxx: "Vec4Data",
            zzxx: "Vec4Data",
            wzxx: "Vec4Data",
            xwxx: "Vec4Data",
            ywxx: "Vec4Data",
            zwxx: "Vec4Data",
            wwxx: "Vec4Data",
            xxyx: "Vec4Data",
            yxyx: "Vec4Data",
            zxyx: "Vec4Data",
            wxyx: "Vec4Data",
            xyyx: "Vec4Data",
            yyyx: "Vec4Data",
            zyyx: "Vec4Data",
            wyyx: "Vec4Data",
            xzyx: "Vec4Data",
            yzyx: "Vec4Data",
            zzyx: "Vec4Data",
            wzyx: "Vec4Data",
            xwyx: "Vec4Data",
            ywyx: "Vec4Data",
            zwyx: "Vec4Data",
            wwyx: "Vec4Data",
            xxzx: "Vec4Data",
            yxzx: "Vec4Data",
            zxzx: "Vec4Data",
            wxzx: "Vec4Data",
            xyzx: "Vec4Data",
            yyzx: "Vec4Data",
            zyzx: "Vec4Data",
            wyzx: "Vec4Data",
            xzzx: "Vec4Data",
            yzzx: "Vec4Data",
            zzzx: "Vec4Data",
            wzzx: "Vec4Data",
            xwzx: "Vec4Data",
            ywzx: "Vec4Data",
            zwzx: "Vec4Data",
            wwzx: "Vec4Data",
            xxwx: "Vec4Data",
            yxwx: "Vec4Data",
            zxwx: "Vec4Data",
            wxwx: "Vec4Data",
            xywx: "Vec4Data",
            yywx: "Vec4Data",
            zywx: "Vec4Data",
            wywx: "Vec4Data",
            xzwx: "Vec4Data",
            yzwx: "Vec4Data",
            zzwx: "Vec4Data",
            wzwx: "Vec4Data",
            xwwx: "Vec4Data",
            ywwx: "Vec4Data",
            zwwx: "Vec4Data",
            wwwx: "Vec4Data",
            xxxy: "Vec4Data",
            yxxy: "Vec4Data",
            zxxy: "Vec4Data",
            wxxy: "Vec4Data",
            xyxy: "Vec4Data",
            yyxy: "Vec4Data",
            zyxy: "Vec4Data",
            wyxy: "Vec4Data",
            xzxy: "Vec4Data",
            yzxy: "Vec4Data",
            zzxy: "Vec4Data",
            wzxy: "Vec4Data",
            xwxy: "Vec4Data",
            ywxy: "Vec4Data",
            zwxy: "Vec4Data",
            wwxy: "Vec4Data",
            xxyy: "Vec4Data",
            yxyy: "Vec4Data",
            zxyy: "Vec4Data",
            wxyy: "Vec4Data",
            xyyy: "Vec4Data",
            yyyy: "Vec4Data",
            zyyy: "Vec4Data",
            wyyy: "Vec4Data",
            xzyy: "Vec4Data",
            yzyy: "Vec4Data",
            zzyy: "Vec4Data",
            wzyy: "Vec4Data",
            xwyy: "Vec4Data",
            ywyy: "Vec4Data",
            zwyy: "Vec4Data",
            wwyy: "Vec4Data",
            xxzy: "Vec4Data",
            yxzy: "Vec4Data",
            zxzy: "Vec4Data",
            wxzy: "Vec4Data",
            xyzy: "Vec4Data",
            yyzy: "Vec4Data",
            zyzy: "Vec4Data",
            wyzy: "Vec4Data",
            xzzy: "Vec4Data",
            yzzy: "Vec4Data",
            zzzy: "Vec4Data",
            wzzy: "Vec4Data",
            xwzy: "Vec4Data",
            ywzy: "Vec4Data",
            zwzy: "Vec4Data",
            wwzy: "Vec4Data",
            xxwy: "Vec4Data",
            yxwy: "Vec4Data",
            zxwy: "Vec4Data",
            wxwy: "Vec4Data",
            xywy: "Vec4Data",
            yywy: "Vec4Data",
            zywy: "Vec4Data",
            wywy: "Vec4Data",
            xzwy: "Vec4Data",
            yzwy: "Vec4Data",
            zzwy: "Vec4Data",
            wzwy: "Vec4Data",
            xwwy: "Vec4Data",
            ywwy: "Vec4Data",
            zwwy: "Vec4Data",
            wwwy: "Vec4Data",
            xxxz: "Vec4Data",
            yxxz: "Vec4Data",
            zxxz: "Vec4Data",
            wxxz: "Vec4Data",
            xyxz: "Vec4Data",
            yyxz: "Vec4Data",
            zyxz: "Vec4Data",
            wyxz: "Vec4Data",
            xzxz: "Vec4Data",
            yzxz: "Vec4Data",
            zzxz: "Vec4Data",
            wzxz: "Vec4Data",
            xwxz: "Vec4Data",
            ywxz: "Vec4Data",
            zwxz: "Vec4Data",
            wwxz: "Vec4Data",
            xxyz: "Vec4Data",
            yxyz: "Vec4Data",
            zxyz: "Vec4Data",
            wxyz: "Vec4Data",
            xyyz: "Vec4Data",
            yyyz: "Vec4Data",
            zyyz: "Vec4Data",
            wyyz: "Vec4Data",
            xzyz: "Vec4Data",
            yzyz: "Vec4Data",
            zzyz: "Vec4Data",
            wzyz: "Vec4Data",
            xwyz: "Vec4Data",
            ywyz: "Vec4Data",
            zwyz: "Vec4Data",
            wwyz: "Vec4Data",
            xxzz: "Vec4Data",
            yxzz: "Vec4Data",
            zxzz: "Vec4Data",
            wxzz: "Vec4Data",
            xyzz: "Vec4Data",
            yyzz: "Vec4Data",
            zyzz: "Vec4Data",
            wyzz: "Vec4Data",
            xzzz: "Vec4Data",
            yzzz: "Vec4Data",
            zzzz: "Vec4Data",
            wzzz: "Vec4Data",
            xwzz: "Vec4Data",
            ywzz: "Vec4Data",
            zwzz: "Vec4Data",
            wwzz: "Vec4Data",
            xxwz: "Vec4Data",
            yxwz: "Vec4Data",
            zxwz: "Vec4Data",
            wxwz: "Vec4Data",
            xywz: "Vec4Data",
            yywz: "Vec4Data",
            zywz: "Vec4Data",
            wywz: "Vec4Data",
            xzwz: "Vec4Data",
            yzwz: "Vec4Data",
            zzwz: "Vec4Data",
            wzwz: "Vec4Data",
            xwwz: "Vec4Data",
            ywwz: "Vec4Data",
            zwwz: "Vec4Data",
            wwwz: "Vec4Data",
            xxxw: "Vec4Data",
            yxxw: "Vec4Data",
            zxxw: "Vec4Data",
            wxxw: "Vec4Data",
            xyxw: "Vec4Data",
            yyxw: "Vec4Data",
            zyxw: "Vec4Data",
            wyxw: "Vec4Data",
            xzxw: "Vec4Data",
            yzxw: "Vec4Data",
            zzxw: "Vec4Data",
            wzxw: "Vec4Data",
            xwxw: "Vec4Data",
            ywxw: "Vec4Data",
            zwxw: "Vec4Data",
            wwxw: "Vec4Data",
            xxyw: "Vec4Data",
            yxyw: "Vec4Data",
            zxyw: "Vec4Data",
            wxyw: "Vec4Data",
            xyyw: "Vec4Data",
            yyyw: "Vec4Data",
            zyyw: "Vec4Data",
            wyyw: "Vec4Data",
            xzyw: "Vec4Data",
            yzyw: "Vec4Data",
            zzyw: "Vec4Data",
            wzyw: "Vec4Data",
            xwyw: "Vec4Data",
            ywyw: "Vec4Data",
            zwyw: "Vec4Data",
            wwyw: "Vec4Data",
            xxzw: "Vec4Data",
            yxzw: "Vec4Data",
            zxzw: "Vec4Data",
            wxzw: "Vec4Data",
            xyzw: "Vec4Data",
            yyzw: "Vec4Data",
            zyzw: "Vec4Data",
            wyzw: "Vec4Data",
            xzzw: "Vec4Data",
            yzzw: "Vec4Data",
            zzzw: "Vec4Data",
            wzzw: "Vec4Data",
            xwzw: "Vec4Data",
            ywzw: "Vec4Data",
            zwzw: "Vec4Data",
            wwzw: "Vec4Data",
            xxww: "Vec4Data",
            yxww: "Vec4Data",
            zxww: "Vec4Data",
            wxww: "Vec4Data",
            xyww: "Vec4Data",
            yyww: "Vec4Data",
            zyww: "Vec4Data",
            wyww: "Vec4Data",
            xzww: "Vec4Data",
            yzww: "Vec4Data",
            zzww: "Vec4Data",
            wzww: "Vec4Data",
            xwww: "Vec4Data",
            ywww: "Vec4Data",
            zwww: "Vec4Data",
            wwww: "Vec4Data",
            r: "number",
            g: "number",
            b: "number",
            a: "number",
            rr: "Vec2Data",
            gr: "Vec2Data",
            br: "Vec2Data",
            ar: "Vec2Data",
            rg: "Vec2Data",
            gg: "Vec2Data",
            bg: "Vec2Data",
            ag: "Vec2Data",
            rb: "Vec2Data",
            gb: "Vec2Data",
            bb: "Vec2Data",
            ab: "Vec2Data",
            ra: "Vec2Data",
            ga: "Vec2Data",
            ba: "Vec2Data",
            aa: "Vec2Data",
            rrr: "Vec3Data",
            grr: "Vec3Data",
            brr: "Vec3Data",
            arr: "Vec3Data",
            rgr: "Vec3Data",
            ggr: "Vec3Data",
            bgr: "Vec3Data",
            agr: "Vec3Data",
            rbr: "Vec3Data",
            gbr: "Vec3Data",
            bbr: "Vec3Data",
            abr: "Vec3Data",
            rar: "Vec3Data",
            gar: "Vec3Data",
            bar: "Vec3Data",
            aar: "Vec3Data",
            rrg: "Vec3Data",
            grg: "Vec3Data",
            brg: "Vec3Data",
            arg: "Vec3Data",
            rgg: "Vec3Data",
            ggg: "Vec3Data",
            bgg: "Vec3Data",
            agg: "Vec3Data",
            rbg: "Vec3Data",
            gbg: "Vec3Data",
            bbg: "Vec3Data",
            abg: "Vec3Data",
            rag: "Vec3Data",
            gag: "Vec3Data",
            bag: "Vec3Data",
            aag: "Vec3Data",
            rrb: "Vec3Data",
            grb: "Vec3Data",
            brb: "Vec3Data",
            arb: "Vec3Data",
            rgb: "Vec3Data",
            ggb: "Vec3Data",
            bgb: "Vec3Data",
            agb: "Vec3Data",
            rbb: "Vec3Data",
            gbb: "Vec3Data",
            bbb: "Vec3Data",
            abb: "Vec3Data",
            rab: "Vec3Data",
            gab: "Vec3Data",
            bab: "Vec3Data",
            aab: "Vec3Data",
            rra: "Vec3Data",
            gra: "Vec3Data",
            bra: "Vec3Data",
            ara: "Vec3Data",
            rga: "Vec3Data",
            gga: "Vec3Data",
            bga: "Vec3Data",
            aga: "Vec3Data",
            rba: "Vec3Data",
            gba: "Vec3Data",
            bba: "Vec3Data",
            aba: "Vec3Data",
            raa: "Vec3Data",
            gaa: "Vec3Data",
            baa: "Vec3Data",
            aaa: "Vec3Data",
            rrrr: "Vec4Data",
            grrr: "Vec4Data",
            brrr: "Vec4Data",
            arrr: "Vec4Data",
            rgrr: "Vec4Data",
            ggrr: "Vec4Data",
            bgrr: "Vec4Data",
            agrr: "Vec4Data",
            rbrr: "Vec4Data",
            gbrr: "Vec4Data",
            bbrr: "Vec4Data",
            abrr: "Vec4Data",
            rarr: "Vec4Data",
            garr: "Vec4Data",
            barr: "Vec4Data",
            aarr: "Vec4Data",
            rrgr: "Vec4Data",
            grgr: "Vec4Data",
            brgr: "Vec4Data",
            argr: "Vec4Data",
            rggr: "Vec4Data",
            gggr: "Vec4Data",
            bggr: "Vec4Data",
            aggr: "Vec4Data",
            rbgr: "Vec4Data",
            gbgr: "Vec4Data",
            bbgr: "Vec4Data",
            abgr: "Vec4Data",
            ragr: "Vec4Data",
            gagr: "Vec4Data",
            bagr: "Vec4Data",
            aagr: "Vec4Data",
            rrbr: "Vec4Data",
            grbr: "Vec4Data",
            brbr: "Vec4Data",
            arbr: "Vec4Data",
            rgbr: "Vec4Data",
            ggbr: "Vec4Data",
            bgbr: "Vec4Data",
            agbr: "Vec4Data",
            rbbr: "Vec4Data",
            gbbr: "Vec4Data",
            bbbr: "Vec4Data",
            abbr: "Vec4Data",
            rabr: "Vec4Data",
            gabr: "Vec4Data",
            babr: "Vec4Data",
            aabr: "Vec4Data",
            rrar: "Vec4Data",
            grar: "Vec4Data",
            brar: "Vec4Data",
            arar: "Vec4Data",
            rgar: "Vec4Data",
            ggar: "Vec4Data",
            bgar: "Vec4Data",
            agar: "Vec4Data",
            rbar: "Vec4Data",
            gbar: "Vec4Data",
            bbar: "Vec4Data",
            abar: "Vec4Data",
            raar: "Vec4Data",
            gaar: "Vec4Data",
            baar: "Vec4Data",
            aaar: "Vec4Data",
            rrrg: "Vec4Data",
            grrg: "Vec4Data",
            brrg: "Vec4Data",
            arrg: "Vec4Data",
            rgrg: "Vec4Data",
            ggrg: "Vec4Data",
            bgrg: "Vec4Data",
            agrg: "Vec4Data",
            rbrg: "Vec4Data",
            gbrg: "Vec4Data",
            bbrg: "Vec4Data",
            abrg: "Vec4Data",
            rarg: "Vec4Data",
            garg: "Vec4Data",
            barg: "Vec4Data",
            aarg: "Vec4Data",
            rrgg: "Vec4Data",
            grgg: "Vec4Data",
            brgg: "Vec4Data",
            argg: "Vec4Data",
            rggg: "Vec4Data",
            gggg: "Vec4Data",
            bggg: "Vec4Data",
            aggg: "Vec4Data",
            rbgg: "Vec4Data",
            gbgg: "Vec4Data",
            bbgg: "Vec4Data",
            abgg: "Vec4Data",
            ragg: "Vec4Data",
            gagg: "Vec4Data",
            bagg: "Vec4Data",
            aagg: "Vec4Data",
            rrbg: "Vec4Data",
            grbg: "Vec4Data",
            brbg: "Vec4Data",
            arbg: "Vec4Data",
            rgbg: "Vec4Data",
            ggbg: "Vec4Data",
            bgbg: "Vec4Data",
            agbg: "Vec4Data",
            rbbg: "Vec4Data",
            gbbg: "Vec4Data",
            bbbg: "Vec4Data",
            abbg: "Vec4Data",
            rabg: "Vec4Data",
            gabg: "Vec4Data",
            babg: "Vec4Data",
            aabg: "Vec4Data",
            rrag: "Vec4Data",
            grag: "Vec4Data",
            brag: "Vec4Data",
            arag: "Vec4Data",
            rgag: "Vec4Data",
            ggag: "Vec4Data",
            bgag: "Vec4Data",
            agag: "Vec4Data",
            rbag: "Vec4Data",
            gbag: "Vec4Data",
            bbag: "Vec4Data",
            abag: "Vec4Data",
            raag: "Vec4Data",
            gaag: "Vec4Data",
            baag: "Vec4Data",
            aaag: "Vec4Data",
            rrrb: "Vec4Data",
            grrb: "Vec4Data",
            brrb: "Vec4Data",
            arrb: "Vec4Data",
            rgrb: "Vec4Data",
            ggrb: "Vec4Data",
            bgrb: "Vec4Data",
            agrb: "Vec4Data",
            rbrb: "Vec4Data",
            gbrb: "Vec4Data",
            bbrb: "Vec4Data",
            abrb: "Vec4Data",
            rarb: "Vec4Data",
            garb: "Vec4Data",
            barb: "Vec4Data",
            aarb: "Vec4Data",
            rrgb: "Vec4Data",
            grgb: "Vec4Data",
            brgb: "Vec4Data",
            argb: "Vec4Data",
            rggb: "Vec4Data",
            gggb: "Vec4Data",
            bggb: "Vec4Data",
            aggb: "Vec4Data",
            rbgb: "Vec4Data",
            gbgb: "Vec4Data",
            bbgb: "Vec4Data",
            abgb: "Vec4Data",
            ragb: "Vec4Data",
            gagb: "Vec4Data",
            bagb: "Vec4Data",
            aagb: "Vec4Data",
            rrbb: "Vec4Data",
            grbb: "Vec4Data",
            brbb: "Vec4Data",
            arbb: "Vec4Data",
            rgbb: "Vec4Data",
            ggbb: "Vec4Data",
            bgbb: "Vec4Data",
            agbb: "Vec4Data",
            rbbb: "Vec4Data",
            gbbb: "Vec4Data",
            bbbb: "Vec4Data",
            abbb: "Vec4Data",
            rabb: "Vec4Data",
            gabb: "Vec4Data",
            babb: "Vec4Data",
            aabb: "Vec4Data",
            rrab: "Vec4Data",
            grab: "Vec4Data",
            brab: "Vec4Data",
            arab: "Vec4Data",
            rgab: "Vec4Data",
            ggab: "Vec4Data",
            bgab: "Vec4Data",
            agab: "Vec4Data",
            rbab: "Vec4Data",
            gbab: "Vec4Data",
            bbab: "Vec4Data",
            abab: "Vec4Data",
            raab: "Vec4Data",
            gaab: "Vec4Data",
            baab: "Vec4Data",
            aaab: "Vec4Data",
            rrra: "Vec4Data",
            grra: "Vec4Data",
            brra: "Vec4Data",
            arra: "Vec4Data",
            rgra: "Vec4Data",
            ggra: "Vec4Data",
            bgra: "Vec4Data",
            agra: "Vec4Data",
            rbra: "Vec4Data",
            gbra: "Vec4Data",
            bbra: "Vec4Data",
            abra: "Vec4Data",
            rara: "Vec4Data",
            gara: "Vec4Data",
            bara: "Vec4Data",
            aara: "Vec4Data",
            rrga: "Vec4Data",
            grga: "Vec4Data",
            brga: "Vec4Data",
            arga: "Vec4Data",
            rgga: "Vec4Data",
            ggga: "Vec4Data",
            bgga: "Vec4Data",
            agga: "Vec4Data",
            rbga: "Vec4Data",
            gbga: "Vec4Data",
            bbga: "Vec4Data",
            abga: "Vec4Data",
            raga: "Vec4Data",
            gaga: "Vec4Data",
            baga: "Vec4Data",
            aaga: "Vec4Data",
            rrba: "Vec4Data",
            grba: "Vec4Data",
            brba: "Vec4Data",
            arba: "Vec4Data",
            rgba: "Vec4Data",
            ggba: "Vec4Data",
            bgba: "Vec4Data",
            agba: "Vec4Data",
            rbba: "Vec4Data",
            gbba: "Vec4Data",
            bbba: "Vec4Data",
            abba: "Vec4Data",
            raba: "Vec4Data",
            gaba: "Vec4Data",
            baba: "Vec4Data",
            aaba: "Vec4Data",
            rraa: "Vec4Data",
            graa: "Vec4Data",
            braa: "Vec4Data",
            araa: "Vec4Data",
            rgaa: "Vec4Data",
            ggaa: "Vec4Data",
            bgaa: "Vec4Data",
            agaa: "Vec4Data",
            rbaa: "Vec4Data",
            gbaa: "Vec4Data",
            bbaa: "Vec4Data",
            abaa: "Vec4Data",
            raaa: "Vec4Data",
            gaaa: "Vec4Data",
            baaa: "Vec4Data",
            aaaa: "Vec4Data",
            s: "number",
            t: "number",
            p: "number",
            q: "number",
            ss: "Vec2Data",
            ts: "Vec2Data",
            ps: "Vec2Data",
            qs: "Vec2Data",
            st: "Vec2Data",
            tt: "Vec2Data",
            pt: "Vec2Data",
            qt: "Vec2Data",
            sp: "Vec2Data",
            tp: "Vec2Data",
            pp: "Vec2Data",
            qp: "Vec2Data",
            sq: "Vec2Data",
            tq: "Vec2Data",
            pq: "Vec2Data",
            qq: "Vec2Data",
            sss: "Vec3Data",
            tss: "Vec3Data",
            pss: "Vec3Data",
            qss: "Vec3Data",
            sts: "Vec3Data",
            tts: "Vec3Data",
            pts: "Vec3Data",
            qts: "Vec3Data",
            sps: "Vec3Data",
            tps: "Vec3Data",
            pps: "Vec3Data",
            qps: "Vec3Data",
            sqs: "Vec3Data",
            tqs: "Vec3Data",
            pqs: "Vec3Data",
            qqs: "Vec3Data",
            sst: "Vec3Data",
            tst: "Vec3Data",
            pst: "Vec3Data",
            qst: "Vec3Data",
            stt: "Vec3Data",
            ttt: "Vec3Data",
            ptt: "Vec3Data",
            qtt: "Vec3Data",
            spt: "Vec3Data",
            tpt: "Vec3Data",
            ppt: "Vec3Data",
            qpt: "Vec3Data",
            sqt: "Vec3Data",
            tqt: "Vec3Data",
            pqt: "Vec3Data",
            qqt: "Vec3Data",
            ssp: "Vec3Data",
            tsp: "Vec3Data",
            psp: "Vec3Data",
            qsp: "Vec3Data",
            stp: "Vec3Data",
            ttp: "Vec3Data",
            ptp: "Vec3Data",
            qtp: "Vec3Data",
            spp: "Vec3Data",
            tpp: "Vec3Data",
            ppp: "Vec3Data",
            qpp: "Vec3Data",
            sqp: "Vec3Data",
            tqp: "Vec3Data",
            pqp: "Vec3Data",
            qqp: "Vec3Data",
            ssq: "Vec3Data",
            tsq: "Vec3Data",
            psq: "Vec3Data",
            qsq: "Vec3Data",
            stq: "Vec3Data",
            ttq: "Vec3Data",
            ptq: "Vec3Data",
            qtq: "Vec3Data",
            spq: "Vec3Data",
            tpq: "Vec3Data",
            ppq: "Vec3Data",
            qpq: "Vec3Data",
            sqq: "Vec3Data",
            tqq: "Vec3Data",
            pqq: "Vec3Data",
            qqq: "Vec3Data",
            ssss: "Vec4Data",
            tsss: "Vec4Data",
            psss: "Vec4Data",
            qsss: "Vec4Data",
            stss: "Vec4Data",
            ttss: "Vec4Data",
            ptss: "Vec4Data",
            qtss: "Vec4Data",
            spss: "Vec4Data",
            tpss: "Vec4Data",
            ppss: "Vec4Data",
            qpss: "Vec4Data",
            sqss: "Vec4Data",
            tqss: "Vec4Data",
            pqss: "Vec4Data",
            qqss: "Vec4Data",
            ssts: "Vec4Data",
            tsts: "Vec4Data",
            psts: "Vec4Data",
            qsts: "Vec4Data",
            stts: "Vec4Data",
            ttts: "Vec4Data",
            ptts: "Vec4Data",
            qtts: "Vec4Data",
            spts: "Vec4Data",
            tpts: "Vec4Data",
            ppts: "Vec4Data",
            qpts: "Vec4Data",
            sqts: "Vec4Data",
            tqts: "Vec4Data",
            pqts: "Vec4Data",
            qqts: "Vec4Data",
            ssps: "Vec4Data",
            tsps: "Vec4Data",
            psps: "Vec4Data",
            qsps: "Vec4Data",
            stps: "Vec4Data",
            ttps: "Vec4Data",
            ptps: "Vec4Data",
            qtps: "Vec4Data",
            spps: "Vec4Data",
            tpps: "Vec4Data",
            ppps: "Vec4Data",
            qpps: "Vec4Data",
            sqps: "Vec4Data",
            tqps: "Vec4Data",
            pqps: "Vec4Data",
            qqps: "Vec4Data",
            ssqs: "Vec4Data",
            tsqs: "Vec4Data",
            psqs: "Vec4Data",
            qsqs: "Vec4Data",
            stqs: "Vec4Data",
            ttqs: "Vec4Data",
            ptqs: "Vec4Data",
            qtqs: "Vec4Data",
            spqs: "Vec4Data",
            tpqs: "Vec4Data",
            ppqs: "Vec4Data",
            qpqs: "Vec4Data",
            sqqs: "Vec4Data",
            tqqs: "Vec4Data",
            pqqs: "Vec4Data",
            qqqs: "Vec4Data",
            ssst: "Vec4Data",
            tsst: "Vec4Data",
            psst: "Vec4Data",
            qsst: "Vec4Data",
            stst: "Vec4Data",
            ttst: "Vec4Data",
            ptst: "Vec4Data",
            qtst: "Vec4Data",
            spst: "Vec4Data",
            tpst: "Vec4Data",
            ppst: "Vec4Data",
            qpst: "Vec4Data",
            sqst: "Vec4Data",
            tqst: "Vec4Data",
            pqst: "Vec4Data",
            qqst: "Vec4Data",
            sstt: "Vec4Data",
            tstt: "Vec4Data",
            pstt: "Vec4Data",
            qstt: "Vec4Data",
            sttt: "Vec4Data",
            tttt: "Vec4Data",
            pttt: "Vec4Data",
            qttt: "Vec4Data",
            sptt: "Vec4Data",
            tptt: "Vec4Data",
            pptt: "Vec4Data",
            qptt: "Vec4Data",
            sqtt: "Vec4Data",
            tqtt: "Vec4Data",
            pqtt: "Vec4Data",
            qqtt: "Vec4Data",
            sspt: "Vec4Data",
            tspt: "Vec4Data",
            pspt: "Vec4Data",
            qspt: "Vec4Data",
            stpt: "Vec4Data",
            ttpt: "Vec4Data",
            ptpt: "Vec4Data",
            qtpt: "Vec4Data",
            sppt: "Vec4Data",
            tppt: "Vec4Data",
            pppt: "Vec4Data",
            qppt: "Vec4Data",
            sqpt: "Vec4Data",
            tqpt: "Vec4Data",
            pqpt: "Vec4Data",
            qqpt: "Vec4Data",
            ssqt: "Vec4Data",
            tsqt: "Vec4Data",
            psqt: "Vec4Data",
            qsqt: "Vec4Data",
            stqt: "Vec4Data",
            ttqt: "Vec4Data",
            ptqt: "Vec4Data",
            qtqt: "Vec4Data",
            spqt: "Vec4Data",
            tpqt: "Vec4Data",
            ppqt: "Vec4Data",
            qpqt: "Vec4Data",
            sqqt: "Vec4Data",
            tqqt: "Vec4Data",
            pqqt: "Vec4Data",
            qqqt: "Vec4Data",
            sssp: "Vec4Data",
            tssp: "Vec4Data",
            pssp: "Vec4Data",
            qssp: "Vec4Data",
            stsp: "Vec4Data",
            ttsp: "Vec4Data",
            ptsp: "Vec4Data",
            qtsp: "Vec4Data",
            spsp: "Vec4Data",
            tpsp: "Vec4Data",
            ppsp: "Vec4Data",
            qpsp: "Vec4Data",
            sqsp: "Vec4Data",
            tqsp: "Vec4Data",
            pqsp: "Vec4Data",
            qqsp: "Vec4Data",
            sstp: "Vec4Data",
            tstp: "Vec4Data",
            pstp: "Vec4Data",
            qstp: "Vec4Data",
            sttp: "Vec4Data",
            tttp: "Vec4Data",
            pttp: "Vec4Data",
            qttp: "Vec4Data",
            sptp: "Vec4Data",
            tptp: "Vec4Data",
            pptp: "Vec4Data",
            qptp: "Vec4Data",
            sqtp: "Vec4Data",
            tqtp: "Vec4Data",
            pqtp: "Vec4Data",
            qqtp: "Vec4Data",
            sspp: "Vec4Data",
            tspp: "Vec4Data",
            pspp: "Vec4Data",
            qspp: "Vec4Data",
            stpp: "Vec4Data",
            ttpp: "Vec4Data",
            ptpp: "Vec4Data",
            qtpp: "Vec4Data",
            sppp: "Vec4Data",
            tppp: "Vec4Data",
            pppp: "Vec4Data",
            qppp: "Vec4Data",
            sqpp: "Vec4Data",
            tqpp: "Vec4Data",
            pqpp: "Vec4Data",
            qqpp: "Vec4Data",
            ssqp: "Vec4Data",
            tsqp: "Vec4Data",
            psqp: "Vec4Data",
            qsqp: "Vec4Data",
            stqp: "Vec4Data",
            ttqp: "Vec4Data",
            ptqp: "Vec4Data",
            qtqp: "Vec4Data",
            spqp: "Vec4Data",
            tpqp: "Vec4Data",
            ppqp: "Vec4Data",
            qpqp: "Vec4Data",
            sqqp: "Vec4Data",
            tqqp: "Vec4Data",
            pqqp: "Vec4Data",
            qqqp: "Vec4Data",
            sssq: "Vec4Data",
            tssq: "Vec4Data",
            pssq: "Vec4Data",
            qssq: "Vec4Data",
            stsq: "Vec4Data",
            ttsq: "Vec4Data",
            ptsq: "Vec4Data",
            qtsq: "Vec4Data",
            spsq: "Vec4Data",
            tpsq: "Vec4Data",
            ppsq: "Vec4Data",
            qpsq: "Vec4Data",
            sqsq: "Vec4Data",
            tqsq: "Vec4Data",
            pqsq: "Vec4Data",
            qqsq: "Vec4Data",
            sstq: "Vec4Data",
            tstq: "Vec4Data",
            pstq: "Vec4Data",
            qstq: "Vec4Data",
            sttq: "Vec4Data",
            tttq: "Vec4Data",
            pttq: "Vec4Data",
            qttq: "Vec4Data",
            sptq: "Vec4Data",
            tptq: "Vec4Data",
            pptq: "Vec4Data",
            qptq: "Vec4Data",
            sqtq: "Vec4Data",
            tqtq: "Vec4Data",
            pqtq: "Vec4Data",
            qqtq: "Vec4Data",
            sspq: "Vec4Data",
            tspq: "Vec4Data",
            pspq: "Vec4Data",
            qspq: "Vec4Data",
            stpq: "Vec4Data",
            ttpq: "Vec4Data",
            ptpq: "Vec4Data",
            qtpq: "Vec4Data",
            sppq: "Vec4Data",
            tppq: "Vec4Data",
            pppq: "Vec4Data",
            qppq: "Vec4Data",
            sqpq: "Vec4Data",
            tqpq: "Vec4Data",
            pqpq: "Vec4Data",
            qqpq: "Vec4Data",
            ssqq: "Vec4Data",
            tsqq: "Vec4Data",
            psqq: "Vec4Data",
            qsqq: "Vec4Data",
            stqq: "Vec4Data",
            ttqq: "Vec4Data",
            ptqq: "Vec4Data",
            qtqq: "Vec4Data",
            spqq: "Vec4Data",
            tpqq: "Vec4Data",
            ppqq: "Vec4Data",
            qpqq: "Vec4Data",
            sqqq: "Vec4Data",
            tqqq: "Vec4Data",
            pqqq: "Vec4Data",
            qqqq: "Vec4Data",
        },
    },
    FloatData: {
        type: "FloatData",
        att: {
            v: "number",
        },
    },
    IntData: {
        type: "IntData",
        att: {
            v: "number",
        },
    },
    NumData: {
        type: "NumData",
        att: {
            v: "number",
        },
    },
};


/***/ }),

/***/ "./ts/src/glslCompiler/deparserConverMap.ts":
/*!**************************************************!*\
  !*** ./ts/src/glslCompiler/deparserConverMap.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.builtinValue = {
    gl_FragData: "Vec4Data[]",
    gl_Position: "Vec4Data",
    gl_FragCoord: "Vec4Data",
    gl_FragDepth: "FloatData",
    gl_FrontFacing: "BoolData",
    gl_FragColor: "Vec4Data",
};
exports.convertToTsType = {
    int: "IntData",
    "int[]": "IntData[]",
    float: "FloatData",
    "float[]": "FloatData[]",
    double: "FloatData",
    "double[]": "FloatData[]",
    vec2: "Vec2Data",
    "vec2[]": "Vec2Data[]",
    vec3: "Vec3Data",
    "vec3[]": "Vec3Data[]",
    vec4: "Vec4Data",
    "vec4[]": "Vec4Data[]",
    mat3: "Mat3Data",
    "mat3[]": "Mat3Data[]",
    mat4: "Mat4Data",
    "mat4[]": "Mat4Data[]",
    sampler2D: "Sampler2D",
    samplerCube: "SamplerCube",
    void: "void",
    bool: "BoolData",
    "bool[]": "BoolData[]",
};
exports.convertToBuiltinCall = {
    IntData: "int",
    FloatData: "float",
    Vec2Data: "vec2",
    Vec3Data: "vec3",
    Vec4Data: "vec4",
    Mat3Data: "mat3",
    Mat4Data: "mat4",
    BoolData: "bool",
};
exports.tsbuiltinOperationFunsWithReturn = {
    glAdd_N_N: "NumData",
    glAdd_N_V2: "Vec2Data",
    glAdd_N_V3: "Vec3Data",
    glAdd_N_V4: "Vec4Data",
    glAdd_V2_N: "Vec2Data",
    glAdd_V2_V2: "Vec2Data",
    glAdd_V3_N: "Vec3Data",
    glAdd_V3_V3: "Vec3Data",
    glAdd_V4_N: "Vec4Data",
    glAdd_V4_V4: "Vec4Data",
    glAdd_M3_M3: "Mat3Data",
    glAdd_M3_N: "Mat3Data",
    glAdd_M4_N: "Mat4Data",
    glAdd_N_M4: "Mat4Data",
    glAdd_N_M3: "Mat3Data",
    glAdd_M4_M4: "Mat4Data",
    glAddSet_N_N: "void",
    glAddSet_V2_N: "void",
    glAddSet_V2_V2: "void",
    glAddSet_V3_N: "void",
    glAddSet_V3_V3: "void",
    glAddSet_V4_N: "void",
    glAddSet_M3_N: "void",
    glAddSet_M4_N: "void",
    glAddSet_M3_M3: "void",
    glAddSet_M4_M4: "void",
    glAddSet_V4_V4: "void",
    glSub_N_N: "NumData",
    glSub_N_V2: "Vec2Data",
    glSub_N_V3: "Vec3Data",
    glSub_N_V4: "Vec4Data",
    glSub_V2_N: "Vec2Data",
    glSub_V2_V2: "Vec2Data",
    glSub_V3_N: "Vec3Data",
    glSub_V3_V3: "Vec3Data",
    glSub_V4_N: "Vec4Data",
    glSub_V4_V4: "Vec4Data",
    glSub_M3_M3: "Mat3Data",
    glSub_M3_N: "Mat3Data",
    glSub_N_M3: "Mat3Data",
    glSub_M4_M4: "Mat4Data",
    glSub_M4_N: "Mat4Data",
    glSub_N_M4: "Mat4Data",
    glSubSet_N_N: "void",
    glSubSet_V2_N: "void",
    glSubSet_V2_V2: "void",
    glSubSet_V3_N: "void",
    glSubSet_V3_V3: "void",
    glSubSet_V4_N: "void",
    glSubSet_V4_V4: "void",
    glSubSet_M3_N: "void",
    glSubSet_M4_N: "void",
    glSubSet_M3_M3: "void",
    gSubSet_M4_M4: "void",
    glMul_N_N: "NumData",
    glMul_N_V2: "Vec2Data",
    glMul_N_V3: "Vec3Data",
    glMul_N_V4: "Vec4Data",
    glMul_V2_N: "Vec2Data",
    glMul_V2_V2: "Vec2Data",
    glMul_V3_N: "Vec3Data",
    glMul_V3_V3: "Vec3Data",
    glMul_V3_M3: "Vec3Data",
    glMul_V4_N: "Vec4Data",
    glMul_V4_V4: "Vec4Data",
    glMul_M3_M3: "Mat3Data",
    glMul_M3_N: "Mat3Data",
    glMul_N_M3: "Mat3Data",
    glMul_M4_M4: "Mat4Data",
    glMul_M4_N: "Mat4Data",
    glMul_N_M4: "Mat4Data",
    glMulSet_N_N: "void",
    glMulSet_V2_N: "void",
    glMulSet_V2_V2: "void",
    glMulSet_V3_N: "void",
    glMulSet_V3_V3: "void",
    glMulSet_V4_N: "void",
    glMulSet_V4_V4: "void",
    glMul_M4_V4: "Vec4Data",
    glMul_V4_M4: "Vec4Data",
    glMulSet_M3_N: "void",
    glMulSet_M4_N: "void",
    glMulSet_M3_M3: "void",
    gMulSet_M4_M4: "void",
    glDiv_N_N: "NumData",
    glDiv_N_V2: "Vec2Data",
    glDiv_N_V3: "Vec3Data",
    glDiv_N_V4: "Vec4Data",
    glDiv_V2_N: "Vec2Data",
    glDiv_V2_V2: "Vec2Data",
    glDiv_V3_N: "Vec3Data",
    glDiv_V3_V3: "Vec3Data",
    glDiv_V4_N: "Vec4Data",
    glDiv_V4_V4: "Vec4Data",
    glDiv_M3_M3: "Mat3Data",
    glDiv_M3_N: "Mat3Data",
    glDiv_N_M3: "Mat3Data",
    glDiv_M4_M4: "Mat4Data",
    glDiv_M4_N: "Mat4Data",
    glDiv_N_M4: "Mat4Data",
    glDivSet_N_N: "void",
    glDivSet_V2_N: "void",
    glDivSet_V2_V2: "void",
    glDivSet_V3_N: "void",
    glDivSet_V3_V3: "void",
    glDivSet_V4_N: "void",
    glDivSet_M3_M3: "void",
    glDivSet_M3_N: "void",
    glDivSet_M4_M4: "void",
    glDivSet_M4_N: "void",
    glNegative_N: "NumData",
    glNegative_V2: "Vec2Data",
    glNegative_V3: "Vec3Data",
    glNegative_V4: "Vec4Data",
    glSet_A_A: "ValueType[]",
    glSet_AA_AA: "ValueType[][]",
    glSet_N_N: "NumData",
    glSet_B_B: "BoolData",
    glSet_B_b: "BoolData",
    glSet_V2_V2: "Vec2Data",
    glSet_V3_V3: "Vec3Data",
    glSet_V4_V4: "Vec4Data",
    glSet_M3_M3: "Mat3Data",
    glSet_M4_M4: "Mat4Data",
    glSet_Struct_Struct: "any",
    glIsNotEqual_N_N: "boolean",
    glIsEqual_N_N: "boolean",
    glIsLessEqual_N_N: "boolean",
    glIsLess_N_N: "boolean",
    glIsMore_N_N: "boolean",
    glIsMoreEqual_N_N: "boolean",
    glFrontAddSelf_N: "NumData",
    glAfterAddSelf_N: "NumData",
    glFrontSubSelf_N: "NumData",
    glAfterSubSelf_N: "NumData",
    glFrontAddSelf_V2: "Vec2Data",
    glAfterAddSelf_V2: "Vec2Data",
    glFrontSubSelf_V2: "Vec2Data",
    glAfterSubSelf_V2: "Vec2Data",
    glFrontAddSelf_V3: "Vec3Data",
    glAfterAddSelf_V3: "Vec3Data",
    glFrontSubSelf_V3: "Vec3Data",
    glAfterSubSelf_V3: "Vec3Data",
    glFrontAddSelf_V4: "Vec4Data",
    glAfterAddSelf_V4: "Vec4Data",
    glFrontSubSelf_V4: "Vec4Data",
    glAfterSubSelf_V4: "Vec4Data",
    glFrontAddSelf_M3: "Mat3Data",
    glAfterAddSelf_M3: "Mat3Data",
    glFrontSubSelf_M3: "Mat3Data",
    glAfterSubSelf_M3: "Mat3Data",
    glFrontAddSelf_M4: "Mat4Data",
    glAfterAddSelf_M4: "Mat4Data",
    glFrontSubSelf_M4: "Mat4Data",
    glAfterSubSelf_M4: "Mat4Data",
    getValueKeyByIndex: "string",
    getOutValueKeyByIndex: "string",
};
exports.glslBuiltinType = {
    Mat3Data: true,
    Mat4Data: true,
    Vec4Data: true,
    Vec3Data: true,
    Vec2Data: true,
    Sampler2D: true,
    SamplerCube: true,
};
exports.tsbuiltinFunsWithReturn = {
    radian_N: "NumData",
    radian_V2: "Vec2Data",
    radian_V3: "Vec3Data",
    radian_V4: "Vec4Data",
    degrees_N: "NumData",
    degrees_V2: "Vec2Data",
    degrees_V3: "Vec3Data",
    degrees_V4: "Vec4Data",
    sin_N: "NumData",
    sin_V2: "Vec2Data",
    sin_V3: "Vec3Data",
    sin_V4: "Vec4Data",
    cos_N: "NumData",
    cos_V2: "Vec2Data",
    cos_V3: "Vec3Data",
    cos_V4: "Vec4Data",
    tan_N: "NumData",
    tan_V2: "Vec2Data",
    tan_V3: "Vec3Data",
    tan_V4: "Vec4Data",
    asin_N: "NumData",
    asin_V2: "Vec2Data",
    asin_V3: "Vec3Data",
    asin_V4: "Vec4Data",
    acos_N: "NumData",
    acos_V2: "Vec2Data",
    acos_V3: "Vec3Data",
    acos_V4: "Vec4Data",
    atan_N: "NumData",
    atan_V2: "Vec2Data",
    atan_V3: "Vec3Data",
    atan_V4: "Vec4Data",
    atan_N_N: "NumData",
    atan_V2_V2: "Vec2Data",
    atan_V3_V3: "Vec3Data",
    atan_V4_V4: "Vec4Data",
    sinh_N: "NumData",
    sinh_V2: "Vec2Data",
    sinh_V3: "Vec3Data",
    sinh_V4: "Vec4Data",
    cosh_N: "NumData",
    cosh_V2: "Vec2Data",
    cosh_V3: "Vec3Data",
    cosh_V4: "Vec4Data",
    tanh_N: "NumData",
    tanh_V2: "Vec2Data",
    tanh_V3: "Vec3Data",
    tanh_V4: "Vec4Data",
    asinh_N: "NumData",
    asinh_V2: "Vec2Data",
    asinh_V3: "Vec3Data",
    asinh_V4: "Vec4Data",
    acosh_N: "NumData",
    acosh_V2: "Vec2Data",
    acosh_V3: "Vec3Data",
    acosh_V4: "Vec4Data",
    atanh_N: "NumData",
    atanh_V2: "Vec2Data",
    atanh_V3: "Vec3Data",
    atanh_V4: "Vec4Data",
    abs_N: "NumData",
    abs_V2: "Vec2Data",
    abs_V3: "Vec3Data",
    abs_V4: "Vec4Data",
    ceil_N: "NumData",
    ceil_V2: "Vec2Data",
    ceil_V3: "Vec3Data",
    ceil_V4: "Vec4Data",
    clamp_N_N_N: "NumData",
    clamp_V2_N_N: "Vec2Data",
    clamp_V3_N_N: "Vec3Data",
    clamp_V4_N_N: "Vec4Data",
    clamp_V2_V2_V2: "Vec2Data",
    clamp_V3_V3_V3: "Vec3Data",
    clamp_V4_V4_V4: "Vec4Data",
    mix_N_N_N: "NumData",
    mix_V2_V2_N: "Vec2Data",
    mix_V3_V3_N: "Vec3Data",
    mix_V4_V4_N: "Vec4Data",
    mix_V2_V2_V2: "Vec2Data",
    mix_V3_V3_V3: "Vec3Data",
    mix_V4_V4_V4: "Vec4Data",
    floor_N: "NumData",
    floor_V2: "Vec2Data",
    floor_V3: "Vec3Data",
    floor_V4: "Vec4Data",
    fract_N: "NumData",
    fract_V2: "Vec2Data",
    fract_V3: "Vec3Data",
    fract_V4: "Vec4Data",
    exp2_N: "NumData",
    exp2_V2: "Vec2Data",
    exp2_V3: "Vec3Data",
    exp2_V4: "Vec4Data",
    exp_N: "NumData",
    exp_V2: "Vec2Data",
    exp_V3: "Vec3Data",
    exp_V4: "Vec4Data",
    inversesqrt_N: "NumData",
    inversesqrt_V2: "Vec2Data",
    inversesqrt_V3: "Vec3Data",
    inversesqrt_V4: "Vec4Data",
    log_N: "NumData",
    log_V2: "Vec2Data",
    log_V3: "Vec3Data",
    log_V4: "Vec4Data",
    log2_N: "NumData",
    log2_V2: "Vec2Data",
    log2_V3: "Vec3Data",
    log2_V4: "Vec4Data",
    max_N_N: "NumData",
    max_V2_N: "Vec2Data",
    max_V3_N: "Vec3Data",
    max_V4_N: "Vec4Data",
    max_V2_V2: "Vec2Data",
    max_V3_V3: "Vec3Data",
    max_V4_V4: "Vec4Data",
    min_N_N: "NumData",
    min_V2_N: "Vec2Data",
    min_V3_N: "Vec3Data",
    min_V4_N: "Vec4Data",
    min_V2_V2: "Vec2Data",
    min_V3_V3: "Vec3Data",
    min_V4_V4: "Vec4Data",
    mod_N_N: "NumData",
    mod_V2_N: "Vec2Data",
    mod_V3_N: "Vec3Data",
    mod_V4_N: "Vec4Data",
    mod_V2_V2: "Vec2Data",
    mod_V3_V3: "Vec3Data",
    mod_V4_V4: "Vec4Data",
    pow_N_N: "NumData",
    pow_V2_V2: "Vec2Data",
    pow_V3: "Vec3Data",
    pow_V4: "Vec4Data",
    round_N: "NumData",
    round_V2: "Vec2Data",
    round_V3: "Vec3Data",
    round_V4: "Vec4Data",
    sign_N: "NumData",
    sign_V2: "Vec2Data",
    sign_V3: "Vec3Data",
    sign_V4: "Vec4Data",
    smoothstep_N_N_N: "NumData",
    smoothstep_V2_N_N: "Vec2Data",
    smoothstep_V3_N_N: "Vec3Data",
    smoothstep_V4_N_N: "Vec4Data",
    smoothstep_V2_V2_V2: "Vec2Data",
    smoothstep_V3_V3_V3: "Vec3Data",
    smoothstep_V4_V4_V4: "Vec4Data",
    sqrt_N: "NumData",
    sqrt_V2: "Vec2Data",
    sqrt_V3: "Vec3Data",
    sqrt_V4: "Vec4Data",
    step_N_N: "NumData",
    step_N_V2: "Vec2Data",
    step_N_V3: "Vec3Data",
    step_N_V4: "Vec4Data",
    step_V2_V2: "Vec2Data",
    step_V3_V3: "Vec3Data",
    step_V4_V4: "Vec4Data",
    trunc_N: "NumData",
    trunc_V2: "Vec2Data",
    trunc_V3: "Vec3Data",
    trunc_V4: "Vec4Data",
    cross_V3_V3: "Vec3Data",
    distance_N_N: "FloatData",
    distance_V2_V2: "FloatData",
    distance_V3_V3: "FloatData",
    distance_V4_V4: "FloatData",
    dot_N_N: "FloatData",
    dot_V2_V2: "FloatData",
    dot_V3_V3: "FloatData",
    dot_V4_V4: "FloatData",
    equal_N_N: "boolean",
    equal_V2_V2: "boolean",
    equal_V3_V3: "boolean",
    equal_V4_V4: "boolean",
    faceforward_N_N_N: "NumData",
    faceforward_V2_V2_V2: "Vec2Data",
    faceforward_V3_V3_V3: "Vec3Data",
    faceforward_V4_V4_V4: "Vec4Data",
    length_N: "FloatData",
    length_V2: "FloatData",
    length_V3: "FloatData",
    length_V4: "FloatData",
    normalize_N: "NumData",
    normalize_V2: "Vec2Data",
    normalize_V3: "Vec3Data",
    normalize_V4: "Vec4Data",
    notEqual_N_N: "boolean",
    notEqual_V2_V2: "boolean",
    notEqual_V3_V3: "boolean",
    notEqual_V4_V4: "boolean",
    reflect_N_N: "NumData",
    reflect_V2_V2: "Vec2Data",
    reflect_V3_V3: "Vec3Data",
    reflect_V4_V4: "Vec4Data",
    refract_N_N_N: "NumData",
    refract_V2_V2_N: "Vec2Data",
    refract_V3_V3_N: "Vec3Data",
    refract_V4_V4_N: "Vec4Data",
    determinant_M3: "FloatData",
    determinant_M4: "FloatData",
    inverse_M3: "Mat3Data",
    inverse_M4: "Mat4Data",
    int: "IntData",
    int_N: "IntData",
    float: "IntData",
    float_N: "FloatData",
    vec2: "Vec2Data",
    vec2_N: "Vec2Data",
    vec2_N_N: "Vec2Data",
    vec2_V2: "Vec2Data",
    vec3: "Vec3Data",
    vec3_N: "Vec3Data",
    vec3_N_N_N: "Vec3Data",
    vec3_V2_N: "Vec3Data",
    vec3_N_V2: "Vec3Data",
    vec3_V3: "Vec3Data",
    vec4: "Vec4Data",
    vec4_N: "Vec4Data",
    vec4_N_N_N_N: "Vec4Data",
    vec4_N_N_V2: "Vec4Data",
    vec4_N_V3: "Vec4Data",
    vec4_V2_N_N: "Vec4Data",
    vec4_V2_V2: "Vec4Data",
    vec4_V3_N: "Vec4Data",
    vec4_V4: "Vec4Data",
    mat3: "Mat3Data",
    mat3_N_N_N_N_N_N_N_N_N: "Mat3Data",
    mat3_M3: "Mat3Data",
    mat3_M4: "Mat3Data",
    mat3_V3_V3_V3: "Mat3Data",
    mat4: "Mat4Data",
    mat4_M3: "Mat4Data",
    mat4_M4: "Mat4Data",
    mat4_V4_V4_V4_V4: "Mat4Data",
    mat4_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N: "Mat4Data",
    texture2D_N_V2: "Vec4Data",
    textureCube_N_V3: "Vec4Data",
};
exports.builtinFuns = {
    radian: true,
    degrees: true,
    sin: true,
    cos: true,
    tan: true,
    asin: true,
    acos: true,
    atan: true,
    sinh: true,
    cosh: true,
    tanh: true,
    asinh: true,
    acosh: true,
    atanh: true,
    abs: true,
    ceil: true,
    clamp: true,
    mix: true,
    floor: true,
    fract: true,
    exp2: true,
    exp: true,
    inversesqrt: true,
    log: true,
    log2: true,
    max: true,
    min: true,
    mod: true,
    pow: true,
    round: true,
    sign: true,
    smoothstep: true,
    sqrt: true,
    step: true,
    trunc: true,
    cross: true,
    distance: true,
    dot: true,
    equal: true,
    faceforward: true,
    length: true,
    normalize: true,
    notEqual: true,
    reflect: true,
    refract: true,
    determinant: true,
    inverse: true,
    int: true,
    float: true,
    vec2: true,
    vec3: true,
    vec4: true,
    mat3: true,
    mat4: true,
};
exports.builtinAbbreviation = {
    Vec2Data: "V2",
    "Vec2Data[]": "V2A",
    Vec3Data: "V3",
    "Vec3Data[]": "V3A",
    Vec4Data: "V4",
    "Vec4Data[]": "V4[]",
    Mat3Data: "M3",
    "Mat3Data[]": "M3A",
    Mat4Data: "M4",
    "Mat4Data[]": "M4A",
    FloatData: "N",
    "FloatData[]": "NA",
    IntData: "N",
    "IntData[]": "NA",
    NumData: "N",
    "NumData[]": "NA",
    number: "N",
    "number[]": "NA",
    BoolData: "B",
    "BoolData[]": "BA",
    boolean: "b",
    "boolean[]": "bA",
    Sampler2D: "N",
    SamplerCube: "N",
};
function convertToAbbreviation(str) {
    return exports.builtinAbbreviation[str] || str;
}
exports.convertToAbbreviation = convertToAbbreviation;


/***/ }),

/***/ "./ts/src/glslCompiler/deparserFunc.ts":
/*!*********************************************!*\
  !*** ./ts/src/glslCompiler/deparserFunc.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function splitArrData(str, defines) {
    let data = {};
    let arrIndex = str.indexOf("[");
    data.factObjName = "";
    let arrNum = 0;
    if (arrIndex !== -1) {
        data.factObjName = str.substring(0, arrIndex);
        let numOrDefineStr = str.substring(arrIndex + 1, str.indexOf("]"));
        arrNum = parseInt(numOrDefineStr);
        if (isNaN(arrNum)) {
            arrNum = defines.get(numOrDefineStr);
        }
    }
    else {
        data.factObjName = str;
    }
    data.arrNum = arrNum;
    return data;
}
exports.splitArrData = splitArrData;
function customGetTypeNumStr(convertType) {
    let typeNumStr;
    if (convertType == "IntData") {
        typeNumStr = "INT";
    }
    else if (convertType == "FloatData") {
        typeNumStr = "FLOAT";
    }
    else if (convertType == "Vec4Data") {
        typeNumStr = "FLOAT_VEC4";
    }
    else if (convertType == "Vec3Data") {
        typeNumStr = "FLOAT_VEC3";
    }
    else if (convertType == "Vec2Data") {
        typeNumStr = "FLOAT_VEC2";
    }
    else if (convertType == "Mat3Data") {
        typeNumStr = "FLOAT_MAT3";
    }
    else if (convertType == "Mat4Data") {
        typeNumStr = "FLOAT_MAT4";
    }
    else if (convertType == "Sampler2D") {
        typeNumStr = "SAMPLER_2D";
    }
    else if (convertType == "SamplerCube") {
        typeNumStr = "SAMPLER_CUBE";
    }
    else {
        debugger;
        console.error("无法识别的类型转换 in uniform");
    }
    return typeNumStr;
}
exports.customGetTypeNumStr = customGetTypeNumStr;


/***/ }),

/***/ "./ts/src/glslCompiler/deparserToTs.ts":
/*!*********************************************!*\
  !*** ./ts/src/glslCompiler/deparserToTs.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const builtinAtt_1 = __webpack_require__(/*! ./builtinAtt */ "./ts/src/glslCompiler/builtinAtt.ts");
const DeparseGlslGlobalVal_1 = __webpack_require__(/*! ./DeparseGlslGlobalVal */ "./ts/src/glslCompiler/DeparseGlslGlobalVal.ts");
const deparserConverMap_1 = __webpack_require__(/*! ./deparserConverMap */ "./ts/src/glslCompiler/deparserConverMap.ts");
const deparserFunc_1 = __webpack_require__(/*! ./deparserFunc */ "./ts/src/glslCompiler/deparserFunc.ts");
const WsManager_1 = __webpack_require__(/*! ./WsManager */ "./ts/src/glslCompiler/WsManager.ts");
var needs_semicolon = {
    decl: true,
    return: true,
    break: true,
    continue: true,
    discard: true,
    precision: true,
    expr: true,
    "do-while": true,
    struct: true,
};
const types = {
    binary: deparse_binary,
    break: deparse_break,
    builtin: deparse_builtin,
    continue: deparse_continue,
    decl: deparse_decl,
    decllist: deparse_decllist,
    discard: deparse_discard,
    "do-while": deparse_do_while,
    expr: deparse_expr,
    forloop: deparse_forloop,
    function: deparse_function,
    functionargs: deparse_functionargs,
    ident: deparse_ident,
    if: deparse_if,
    keyword: deparse_keyword,
    literal: deparse_literal,
    precision: deparse_precision,
    preprocessor: deparse_preprocessor,
    return: deparse_return,
    stmt: deparse_stmt,
    stmtlist: deparse_stmtlist,
    struct: deparse_struct,
    assign: deparse_assign,
    unary: deparse_unary,
    whileloop: deparse_whileloop,
    operator: deparse_operator,
    group: deparse_group,
    suffix: deparse_suffix,
    call: deparse_call,
    quantifier: deparse_quantifier,
    ternary: deparse_ternary,
};
let output = [];
let ws = null;
let deparseGlobalVal = new DeparseGlslGlobalVal_1.DeparseGlslGlobalVal();
function deparseToTs(ast, whitespace_enabled = false, indent_text = "  ", ud, vd, ad, sdm, d, isVert = false, hash) {
    output.length = 0;
    ws = new WsManager_1.WsManager(whitespace_enabled, indent_text);
    deparseGlobalVal.forceInit(ud, vd, ad, sdm, d);
    let attributeStr = "class AttributeDataImpl implements AttributeData {\n";
    let attributerDataKeysStr = "    dataKeys: Map<string, any> = new Map([\n";
    let attributerDataSizeStr = "    dataSize: Map<string, number> = new Map([\n";
    deparseGlobalVal.attributeData.forEach((value, key) => {
        let convertType = deparserConverMap_1.convertToTsType[value];
        if (convertType) {
            let arrData = deparserFunc_1.splitArrData(key, deparseGlobalVal.defines);
            let factObjName = arrData.factObjName;
            if (arrData && arrData.arrNum > 0) {
                console.error("attribute 变量暂不支持数组");
            }
            let typeNumStr = deparserFunc_1.customGetTypeNumStr(convertType);
            attributerDataKeysStr += `        ["${key}", cpuRenderingContext.cachGameGl.${typeNumStr}],\n`;
            attributerDataSizeStr += `        ["${key}", 1],\n`;
            attributeStr += `    ${key}: ${convertType} = new ${convertType}()\n`;
        }
        else {
            console.error("不识别的shader 数据结构: " + value);
        }
    });
    attributerDataKeysStr += `    ])\n`;
    attributerDataSizeStr += `    ])\n`;
    attributeStr += attributerDataKeysStr + attributerDataSizeStr;
    attributeStr += "}\n";
    let varyingStr = "class VaryingDataImpl extends VaryingData {\n";
    let dataKeysStr = "    dataKeys: Map<string, any> = new Map([\n";
    let copyFuncStr = `    copy(varying: VaryingDataImpl) {\n`;
    deparseGlobalVal.varyingData.forEach((value, key) => {
        let convertType = deparserConverMap_1.convertToTsType[value];
        if (convertType) {
            let arrData = deparserFunc_1.splitArrData(key, deparseGlobalVal.defines);
            if (arrData && arrData.arrNum > 0) {
                console.error("varying 变量暂不支持数组");
            }
            varyingStr += `    ${key}: ${convertType} = new ${convertType}()\n`;
            let typeNumStr = deparserFunc_1.customGetTypeNumStr(convertType);
            dataKeysStr += `        ["${key}", cpuRenderingContext.cachGameGl.${typeNumStr}],\n`;
            let abbreviation = deparserConverMap_1.convertToAbbreviation(convertType);
            let setFunc = `glSet_${abbreviation}_${abbreviation}`;
            copyFuncStr += `        ${setFunc}(varying.${key}, this.${key})\n`;
            deparseGlobalVal.useBuiltinOperators.add(setFunc);
        }
        else {
            console.error("不识别的shader 数据结构: " + value);
        }
    });
    dataKeysStr += `    ])\n`;
    varyingStr += `
    factoryCreate() {
        return new VaryingDataImpl()
    }\n`;
    varyingStr += dataKeysStr + copyFuncStr + `    }\n`;
    varyingStr += "}\n";
    // 对uniform和struct中的数组对象进行处理
    let tmpUniformData = new Map();
    let uniformStr = `class UniformDataImpl implements UniformData {\n`;
    let uniformDataKeysStr = "    dataKeys: Map<string, any> = new Map([\n";
    let uniformDataSizeStr = "    dataSize: Map<string, number> = new Map([\n";
    deparseGlobalVal.uniformData.forEach((value, key) => {
        let convertType = deparserConverMap_1.convertToTsType[value];
        if (convertType) {
            let arrData = deparserFunc_1.splitArrData(key, deparseGlobalVal.defines);
            let factObjName = arrData.factObjName;
            let typeNumStr = deparserFunc_1.customGetTypeNumStr(convertType);
            uniformDataKeysStr += `        ["${factObjName}", cpuRenderingContext.cachGameGl.${typeNumStr}],\n`;
            uniformDataSizeStr += `        ["${factObjName}", ${arrData.arrNum || 1}],\n`;
            tmpUniformData.set(factObjName, `${convertType}${arrData.arrNum > 0 ? "[]" : ""}`);
            if (arrData.arrNum > 0) {
                uniformStr += `    ${factObjName}: ${convertType}${arrData.arrNum > 0 ? "[]" : ""} = [`;
                let lastIndex = arrData.arrNum - 1;
                for (let index = 0; index < arrData.arrNum; index++) {
                    uniformStr += `new ${convertType}()`;
                    if (index != lastIndex) {
                        uniformStr += `, `;
                    }
                }
                uniformStr += `]\n`;
            }
            else {
                uniformStr += `    ${factObjName}: ${convertType}${arrData.arrNum > 0 ? "[]" : ""} = new ${convertType}()\n`;
            }
        }
        else {
            console.error("不识别的shader 数据结构: " + value);
        }
    });
    uniformDataKeysStr += `    ])\n`;
    uniformDataSizeStr += `    ])\n`;
    uniformStr += uniformDataKeysStr + uniformDataSizeStr + "}\n";
    deparseGlobalVal.uniformData = tmpUniformData;
    let structStr = "";
    let tmpStructDataMap = new Map();
    deparseGlobalVal.structDataMap.forEach((value, key) => {
        structStr += `class ${key} implements StructData {\n`;
        let tmpStructValue = new Map();
        tmpStructDataMap.set(key, tmpStructValue);
        value.forEach((objType, objName) => {
            let arrData = deparserFunc_1.splitArrData(objName, deparseGlobalVal.defines);
            let factObjName = arrData.factObjName;
            let convertType = deparserConverMap_1.convertToTsType[objType];
            let builtinFuncCall = deparserConverMap_1.convertToBuiltinCall[convertType];
            let createStr = "";
            if (builtinFuncCall) {
                createStr = `${builtinFuncCall}()`;
            }
            else {
                createStr = ` new ${convertType}()`;
            }
            if (arrData.arrNum > 0) {
                tmpStructValue.set(factObjName, `${convertType}[]`);
                structStr += `    ${factObjName}: ${convertType}[] = [`;
                for (let index = 0; index < arrData.arrNum; index++) {
                    if (index !== arrData.arrNum - 1) {
                        structStr += `${createStr},`;
                    }
                    else {
                        structStr += `${createStr}]\n`;
                    }
                }
            }
            else {
                tmpStructValue.set(factObjName, `${convertType}`);
                structStr += `    ${factObjName}: ${convertType} = ${createStr}\n`;
            }
        });
        structStr += `}\n`;
    });
    deparseGlobalVal.structDataMap = tmpStructDataMap;
    deparse(ast);
    let tsScript = output.join("");
    tsScript = tsScript.replace(/\n/g, "\n    ") + "\n";
    if (isVert) {
        tsScript = `    attributeData: AttributeDataImpl = new AttributeDataImpl()\n` + tsScript;
        tsScript = `    uniformData: UniformDataImpl = new UniformDataImpl()\n` + tsScript;
        tsScript = `    varyingData: VaryingDataImpl = new VaryingDataImpl()\n` + tsScript;
    }
    else {
        tsScript = `    uniformData: UniformDataImpl = new UniformDataImpl()\n` + tsScript;
        tsScript = `    varyingData: VaryingDataImpl = new VaryingDataImpl()\n` + tsScript;
    }
    tsScript = `export class Impl_${hash} extends ${isVert ? "VertShaderHandle" : "FragShaderHandle"}{\n` + tsScript + "}\n";
    // console.log(hash)
    let defineStr = "";
    deparseGlobalVal.defines.forEach((value, key) => {
        if (!isNaN(parseFloat(value))) {
            defineStr += `let ${key} = new FloatData(${value})\n`;
        }
        else {
            defineStr += `let ${key} = "${value}"\n`;
        }
    });
    tsScript = defineStr + structStr + attributeStr + varyingStr + uniformStr + tsScript;
    let importStr = "import {\n";
    deparseGlobalVal.useBuiltinFuncs.add("float");
    deparseGlobalVal.useBuiltinFuncs.add("float_N");
    deparseGlobalVal.useBuiltinFuncs.add("bool");
    deparseGlobalVal.useBuiltinFuncs.add("bool_N");
    deparseGlobalVal.useBuiltinFuncs.add("int_N");
    deparseGlobalVal.useBuiltinFuncs.add("int");
    deparseGlobalVal.useBuiltinFuncs.add("vec4");
    deparseGlobalVal.useBuiltinFuncs.add("vec3");
    deparseGlobalVal.useBuiltinFuncs.add("vec2");
    deparseGlobalVal.useBuiltinFuncs.add("mat3");
    deparseGlobalVal.useBuiltinFuncs.add("mat4");
    deparseGlobalVal.useBuiltinFuncs.forEach((funNames) => {
        importStr += `    ${funNames},\n`;
    });
    importStr += `} from "../builtin/BuiltinFunc"\n`;
    importStr += "import {\n";
    deparseGlobalVal.useBuiltinOperators.add("getValueKeyByIndex");
    deparseGlobalVal.useBuiltinOperators.add("getOutValueKeyByIndex");
    deparseGlobalVal.useBuiltinOperators.forEach((funNames) => {
        importStr += `    ${funNames},\n`;
    });
    importStr += `} from "../builtin/BuiltinOperator"\n`;
    importStr += `import { gl_FragData, gl_FragColor, gl_Position, gl_FragCoord, gl_FragDepth, gl_FrontFacing, custom_isDiscard} from "../builtin/BuiltinVar"\n`;
    importStr += `import { cpuRenderingContext } from "../../CpuRenderingContext"\n`;
    return [importStr, tsScript];
}
exports.deparseToTs = deparseToTs;
function outputPush(str) {
    if (!isNaN(parseFloat(str))) {
        if (str.indexOf(".") !== -1) {
            str = `float_N(${str})`;
        }
        else {
            str = `int_N(${str})`;
        }
    }
    output.push(str);
}
function outputInsert(index, str) {
    output.splice(index, 0, str);
}
function outputDel(index, length) {
    output.splice(index, length);
}
function outputReplace(index, str) {
    output[index] = str;
}
function convertToClassObj(str) {
    let objStr;
    if (deparseGlobalVal.defines.get(str) !== undefined) {
        objStr = str;
    }
    else {
        objStr = deparseGlobalVal.uniformData.get(str);
        if (!objStr) {
            objStr = deparseGlobalVal.varyingData.get(str);
            if (!objStr) {
                objStr = deparseGlobalVal.attributeData.get(str);
                if (!objStr) {
                    objStr = str;
                }
                else {
                    objStr = `this.attributeData.${str}`;
                }
            }
            else {
                objStr = `this.varyingData.${str}`;
            }
        }
        else {
            objStr = `this.uniformData.${str}`;
        }
    }
    return objStr;
}
function getStructType(str) {
    let sd = deparseGlobalVal.structDataMap.get(str);
    return sd;
}
function deparse_binary(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var is_bracket = node.data === "[";
    let operatorReplace = null;
    if (node.data == "+") {
        operatorReplace = "glAdd";
    }
    else if (node.data == "-") {
        operatorReplace = "glSub";
    }
    else if (node.data == "*") {
        operatorReplace = "glMul";
    }
    else if (node.data == "/") {
        operatorReplace = "glDiv";
    }
    else if (node.data == "!=") {
        operatorReplace = "glIsNotEqual";
    }
    else if (node.data == "<=") {
        operatorReplace = "glIsLessEqual";
    }
    else if (node.data == "<") {
        operatorReplace = "glIsLess";
    }
    else if (node.data == ">=") {
        operatorReplace = "glIsMoreEqual";
    }
    else if (node.data == ">") {
        operatorReplace = "glIsMore";
    }
    else if (node.data == "==") {
        operatorReplace = "glIsEqual";
    }
    else if (node.data == "[") {
    }
    else if (node.data == "||") {
    }
    else if (node.data == "&&") {
    }
    else {
        console.error("无法识别的binary类型");
        debugger;
    }
    let leftIndex = output.length;
    // if (leftIndex == 877) {
    //     debugger
    // }
    let leftType = deparse(node.children[0]);
    if (!leftType) {
        debugger;
    }
    let leftEnd = output.length;
    !is_bracket && !operatorReplace && outputPush(ws.optional(" "));
    let operatorIndex = output.length;
    outputPush(node.data);
    !is_bracket && !operatorReplace && outputPush(ws.optional(" "));
    let rightIndex = output.length;
    // if (rightIndex == 205) {
    //     debugger
    // }
    let rightType = deparse(node.children[1]);
    if (!rightType) {
        debugger;
        let testType = deparse(node.children[1]);
    }
    if (is_bracket) {
        if (leftType == "Vec4Data" ||
            leftType == "Vec3Data" ||
            leftType == "Vec2Data" ||
            leftType == "Mat3Data" ||
            leftType == "Mat4Data" ||
            leftType == "Vec4Data[]" ||
            leftType == "Vec3Data[]" ||
            leftType == "Vec2Data[]" ||
            leftType == "Mat3Data[]" ||
            leftType == "Mat4Data[]") {
            // 如果左边的对象也是通过中括号得来的话 说明是矩阵
            if (node.children[0].data !== "[") {
                outputInsert(leftEnd - 1, "(<any>");
                outputInsert(leftEnd + 1, ")");
                if (leftType == "Vec4Data" ||
                    leftType == "Vec3Data" ||
                    leftType == "Vec2Data" ||
                    leftType == "Mat3Data" ||
                    leftType == "Mat4Data") {
                    if (deparseGlobalVal.isLeftSet) {
                        outputInsert(leftEnd + 3, "getValueKeyByIndex(");
                    }
                    else {
                        outputInsert(leftEnd + 3, "getOutValueKeyByIndex(");
                    }
                    outputPush(")");
                }
                else {
                    outputReplace(leftEnd + 3, output[leftEnd + 3] + ".v");
                }
            }
            else {
                if (leftType == "Vec4Data" ||
                    leftType == "Vec3Data" ||
                    leftType == "Vec2Data" ||
                    leftType == "Mat3Data" ||
                    leftType == "Mat4Data") {
                    if (deparseGlobalVal.isLeftSet) {
                        outputInsert(leftEnd + 1, "getValueKeyByIndex(");
                    }
                    else {
                        outputInsert(leftEnd + 1, "getOutValueKeyByIndex(");
                    }
                    outputPush(")");
                }
                else {
                    outputReplace(leftEnd + 3, output[leftEnd + 3] + ".v");
                }
            }
        }
        else if (rightType == "NumData" || rightType == "IntData" || rightType == "FloatData") {
            outputPush(".v");
        }
    }
    let rightEnd = output.length;
    if (operatorReplace) {
        operatorReplace = operatorReplace + "_" + deparserConverMap_1.convertToAbbreviation("" + leftType) + "_" + deparserConverMap_1.convertToAbbreviation("" + rightType);
        outputInsert(leftIndex, operatorReplace + "(");
        // // 因为左边插入了
        outputInsert(rightEnd + 1, ")");
        outputReplace(operatorIndex + 1, ",");
        deparseGlobalVal.useBuiltinOperators.add(operatorReplace);
    }
    if (is_bracket) {
        outputPush("]");
        if (leftType == "Vec4Data" || leftType == "Vec3Data" || leftType == "Vec2Data") {
            return "number";
        }
        else if (leftType == "Mat3Data") {
            return "Vec3Data";
        }
        else if (leftType == "Mat4Data") {
            return "Vec4Data";
        }
        else {
            return leftType.substring(0, leftType.lastIndexOf("["));
        }
    }
    if (operatorReplace) {
        return deparserConverMap_1.tsbuiltinOperationFunsWithReturn[operatorReplace];
    }
    else {
        if (node.data == "||" || node.data == "&&") {
            return "boolean";
        }
    }
}
function deparse_break(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    outputPush("break");
}
function deparse_builtin(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let parent = node.parent;
    let returnType;
    // 如果是内建函数
    if (parent.type == "call" && parent.children[0] == node) {
    }
    else {
        // 否则应该是内建变量
        returnType = deparserConverMap_1.builtinValue[node.data];
        // 如果不是内建變量 那麽可能是一個正常的变量
        if (returnType === undefined) {
            returnType = getObjType(node.data);
        }
    }
    outputPush(node.data);
    return returnType;
}
function deparse_continue(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    outputPush("continue");
}
function deparse_decl(node) {
    // it's five long
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var len = node.children.length, len_minus_one = len - 1;
    let children = node.children;
    let hasFunc = false;
    for (var i = 0; i < len; ++i) {
        let child = children[i];
        if (child.type == "function") {
            hasFunc = true;
            break;
        }
    }
    let cachValType;
    for (var i = 0; i < len; ++i) {
        let child = children[i];
        if (child.type !== "placeholder") {
            if (child.type == "keyword" || child.type == "ident") {
                if (hasFunc) {
                    deparseGlobalVal.nowFuncTypeCach = child.token.data;
                }
                else {
                    deparseGlobalVal.nowTypeCach = child.token.data;
                    cachValType = deparseGlobalVal.nowTypeCach;
                }
                continue;
            }
            deparse(child);
            if (i !== len_minus_one) {
                outputPush(ws.required(" "));
            }
        }
    }
    // 避免有天才声明了同一个类型在同一个语句中
    // 所以声明语句放在最后添加
    if (deparseGlobalVal.waitPushDecVal.size) {
        deparseGlobalVal.waitPushDecVal.forEach((value, key) => {
            let setData = deparseGlobalVal.nowFucObj.get(deparseGlobalVal.nowBlockLevel);
            if (!setData) {
                setData = new Map();
                deparseGlobalVal.nowFucObj.set(deparseGlobalVal.nowBlockLevel, setData);
            }
            setData.set(key, value);
        });
        deparseGlobalVal.waitPushDecVal.clear();
    }
    return cachValType || deparseGlobalVal.nowFuncTypeCach;
}
function deparse_decllist(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let tmpCachType = deparseGlobalVal.nowTypeCach;
    let decllistBegin = output.length;
    let setFunc = "glSet";
    if (tmpCachType == "int" || tmpCachType == "float" || tmpCachType == "double") {
        setFunc = "glSet_N_N";
    }
    else if (tmpCachType == "bool") {
        setFunc = "glSet_B_B";
    }
    else if (tmpCachType == "vec2") {
        setFunc = "glSet_V2_V2";
    }
    else if (tmpCachType == "vec3") {
        setFunc = "glSet_V3_V3";
    }
    else if (tmpCachType == "vec4") {
        setFunc = "glSet_V4_V4";
    }
    else if (tmpCachType == "mat3") {
        setFunc = "glSet_M3_M3";
    }
    else if (tmpCachType == "mat4") {
        setFunc = "glSet_M4_M4";
    }
    else {
        setFunc = "glSet_Struct_Struct";
    }
    if (deparseGlobalVal.nowTypeCach !== "") {
        // 判断是否数组类型
        let arrTypeStr = "";
        deparseGlobalVal.declArrNum = [];
        // 数据定义应该只可能是常量数值 所以不用考虑其它情况
        for (var i = 1, len = node.children.length; i < len; ++i) {
            if (node.children[i].type === "quantifier") {
                arrTypeStr += "[]";
                deparseGlobalVal.declArrNum.push(parseInt(node.children[i].children[0].children[0].data));
            }
        }
        if (deparseGlobalVal.declArrNum.length > 0) {
            deparseGlobalVal.nowTypeCach = deparseGlobalVal.nowTypeCach + arrTypeStr;
            tmpCachType = deparseGlobalVal.nowTypeCach;
        }
    }
    let isSet = false;
    let setFuncIndex = 0;
    for (var i = 0, len = node.children.length; i < len; ++i) {
        isSet = false;
        if (i > 0) {
            if (node.children[i].type !== "ident") {
                if (node.children[i].type !== "quantifier") {
                    if (deparseGlobalVal.inForDefine) {
                        outputPush(ws.optional(" "));
                        outputPush("=");
                        outputPush(ws.optional(" "));
                    }
                    else {
                        setFuncIndex = output.length;
                        outputPush(setFunc + "(");
                        outputPush(node.children[i - 1].data);
                        outputPush(", ");
                        isSet = true;
                        deparseGlobalVal.useBuiltinOperators.add(setFunc);
                    }
                }
                else {
                    continue;
                }
            }
            else {
                deparseGlobalVal.nowTypeCach = tmpCachType;
                outputPush(ws.required("\n"));
            }
        }
        let type = deparse(node.children[i]);
        if (isSet) {
            if (type == "boolean") {
                outputReplace(setFuncIndex, "glSet_B_b(");
                deparseGlobalVal.useBuiltinOperators.add("glSet_B_b");
            }
            outputPush(")");
        }
    }
}
function deparse_discard(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    outputPush("custom_isDiscard.v = true");
}
function deparse_do_while(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var is_stmtlist = node.children[0].type === "stmtlist";
    outputPush("do");
    if (is_stmtlist) {
        outputPush(ws.optional(" "));
    }
    else {
        ws.indent();
        outputPush(ws.enabled ? ws.optional("\n") : ws.required(" "));
    }
    deparse(node.children[0]);
    if (is_stmtlist) {
        outputPush(ws.optional(" "));
    }
    else {
        ws.dedent();
        outputPush(ws.optional("\n"));
    }
    outputPush("while(");
    deparse(node.children[1]);
    outputPush(")");
}
function deparse_expr(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    if (node.children.length) {
        return deparse(node.children[0]);
    }
}
// 测试过for 里面的判断应该不能直接用bool变量
function deparse_forloop(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var is_stmtlist = node.children[3].type === "stmtlist";
    outputPush("for(");
    deparseGlobalVal.inForDefine = true;
    deparse(node.children[0]);
    deparseGlobalVal.inForDefine = false;
    outputPush(";");
    outputPush(ws.optional(" "));
    deparse(node.children[1]);
    outputPush(";");
    outputPush(ws.optional(" "));
    deparse(node.children[2]);
    outputPush(")");
    if (is_stmtlist) {
        outputPush(ws.optional(" "));
    }
    else {
        ws.indent();
    }
    deparse(node.children[3]);
    if (!is_stmtlist) {
        ws.dedent();
    }
}
function deparse_function(node) {
    let funcIndex = output.length;
    deparse(node.children[0]);
    let funcName = output[output.length - 1];
    outputPush("(");
    let argsDataArr = deparse(node.children[1]);
    let returnTypes = argsDataArr[0];
    let argsInfos = argsDataArr[1];
    let customName = funcName;
    let replaceIndex = [];
    deparseGlobalVal.funcArgsInReplace = [];
    let replace;
    if (returnTypes.length > 0) {
        for (let index = 0; index < returnTypes.length; index++) {
            const element = returnTypes[index];
            customName += "_" + (deparserConverMap_1.convertToAbbreviation(deparserConverMap_1.convertToTsType[element]) || element);
            let argsInfo = argsInfos[index];
            if (argsInfo.inoutType == DeparseGlslGlobalVal_1.InOutType.in) {
                let oldData = output[argsInfo.index];
                outputReplace(argsInfo.index, `__${oldData}__`);
                replaceIndex.push(index);
                deparseGlobalVal.funcArgsInReplace.push({ name: oldData, type: deparserConverMap_1.convertToTsType[element] || element });
            }
        }
    }
    outputPush(")");
    outputPush(": " + deparserConverMap_1.convertToTsType[deparseGlobalVal.nowFuncTypeCach]);
    deparseGlobalVal.customFuns.set(customName, deparseGlobalVal.nowFuncTypeCach);
    // deparseGlobalVal.customFunsInOutType(customName, )
    deparseGlobalVal.nowFuncTypeCach = "";
    outputReplace(funcIndex, customName);
    if (node.children[2]) {
        outputPush(ws.optional(" "));
        deparse(node.children[2]);
    }
}
function deparse_functionargs(node) {
    var len = node.children.length, len_minus_one = len - 1;
    deparseGlobalVal.isFuncArgs = true;
    let returnTypes = [];
    let argsInfoArr = [];
    for (var i = 0; i < len; ++i) {
        let childNode = node.children[i];
        let argsInfo = { index: output.length, inoutType: DeparseGlslGlobalVal_1.InOutType.in };
        let returnType = deparse(childNode);
        if (childNode.token.data == "inout") {
            argsInfo.inoutType = DeparseGlslGlobalVal_1.InOutType.inout;
        }
        else if (childNode.token.data == "out") {
            argsInfo.inoutType = DeparseGlslGlobalVal_1.InOutType.out;
        }
        argsInfoArr.push(argsInfo);
        returnTypes.push(returnType);
        if (i !== len_minus_one) {
            outputPush(",");
            outputPush(ws.optional(" "));
        }
    }
    deparseGlobalVal.isFuncArgs = false;
    return [returnTypes, argsInfoArr];
}
function getFuncObjType(name) {
    for (let index = deparseGlobalVal.nowBlockLevel; index >= 0; index--) {
        const setData = deparseGlobalVal.nowFucObj.get(index);
        if (setData && setData.has(name)) {
            return setData.get(name);
        }
    }
    return null;
}
function deparse_ident(node) {
    if (deparseGlobalVal.nowTypeCach !== "") {
        if (deparseGlobalVal.inFunc) {
            outputPush("let ");
        }
        outputPush(node.data);
        let letType = deparserConverMap_1.convertToTsType[deparseGlobalVal.nowTypeCach] || deparseGlobalVal.nowTypeCach;
        outputPush(": " + letType);
        // let setData = deparseGlobalVal.nowFucObj.get(deparseGlobalVal.nowBlockLevel)
        // if (!setData) {
        //     setData = new Map()
        //     deparseGlobalVal.nowFucObj.set(deparseGlobalVal.nowBlockLevel, setData)
        // }
        // setData.set(node.data, letType)
        deparseGlobalVal.waitPushDecVal.set(node.data, letType);
        let grandParentNode = node.parent.parent;
        if (deparseGlobalVal.inFunc && !deparseGlobalVal.inForDefine) {
            outputPush(ws.optional(" "));
            outputPush("=");
            outputPush(ws.optional(" "));
            let sd = getStructType(deparseGlobalVal.nowTypeCach);
            let createStr = "";
            // 判断是否struct 类型
            let splitData = deparserFunc_1.splitArrData(deparseGlobalVal.nowTypeCach, deparseGlobalVal.defines);
            if (sd) {
                createStr = "new " + splitData.factObjName + "()";
            }
            else {
                createStr = splitData.factObjName + "()";
            }
            if (deparseGlobalVal.declArrNum.length > 0) {
                let copyArrStr = createStr;
                for (let index = deparseGlobalVal.declArrNum.length - 1; index >= 0; index--) {
                    let arrNum = deparseGlobalVal.declArrNum[index];
                    let arr = `[`;
                    for (let t = 0; t < arrNum; t++) {
                        if (t !== arrNum - 1) {
                            arr += copyArrStr + ",";
                        }
                        else {
                            arr += copyArrStr;
                        }
                    }
                    arr += `]`;
                    copyArrStr = arr;
                }
                outputPush(ws.optional(copyArrStr));
            }
            else {
                outputPush(ws.optional(createStr));
            }
            outputPush("\n");
        }
        deparseGlobalVal.nowTypeCach = "";
    }
    else if (deparseGlobalVal.nowFuncTypeCach == "") {
        let isFuncObj = false;
        for (let index = deparseGlobalVal.nowBlockLevel; index >= 0; index--) {
            const setData = deparseGlobalVal.nowFucObj.get(index);
            if (setData && setData.has(node.data)) {
                isFuncObj = true;
                break;
            }
        }
        outputPush(isFuncObj ? node.data : convertToClassObj(node.data));
        return getObjType(output[output.length - 1]);
    }
    else {
        outputPush(node.data);
    }
}
function deparse_if(node) {
    var needs_indent = true;
    for (var j = 1; j < 4; ++j) {
        if (output[output.length - j] === "else") {
            output.length = output.length - j;
            outputPush("else ");
            break;
        }
        else if (/[^\s]/.test(output[output.length - j])) {
            break;
        }
    }
    var is_first_stmt = node.children[1].type === "stmt", has_second = node.children[2], is_second_stmt = has_second && node.children[2].children[0].type !== "stmtlist";
    outputPush("if(");
    let type = deparse(node.children[0]);
    if (type == "BoolData") {
        outputPush(".v)");
    }
    else {
        outputPush(")");
    }
    if (is_first_stmt) {
        needs_indent && ws.indent();
        // if语句不要加; 避免断句错误
        outputPush(ws.enabled ? ws.optional("\n", "") : ws.required(" "));
    }
    else {
        outputPush(ws.optional(" "));
    }
    let sonBlockIndex = output.length;
    deparse(node.children[1]);
    // gl 语句支持不加{ 但原则上ts中最好不要
    if (output[sonBlockIndex] !== "{") {
        outputReplace(sonBlockIndex, "{\n" + output[sonBlockIndex]);
        outputReplace(output.length - 1, output[output.length - 1] + "}\n");
    }
    if (is_first_stmt) {
        needs_indent && ws.dedent();
        outputPush(ws.optional("\n"));
    }
    if (has_second) {
        var is_if_stmt = node.children[2].children[0].type === "if";
        if (output[output.length - 1] === "}") {
            outputPush(ws.optional(" "));
        }
        outputPush("else");
        if (is_second_stmt) {
            !is_if_stmt && ws.indent();
            outputPush(ws.enabled ? ws.optional("\n") : ws.required(" "));
        }
        else {
            outputPush(ws.optional(" "));
        }
        deparse(node.children[2]);
        if (is_second_stmt) {
            !is_if_stmt && ws.dedent();
            outputPush(ws.optional("\n"));
        }
    }
}
function deparse_keyword(node) {
    outputPush(node.token.data);
    if (node.token.data == "true" || node.token.data == "false") {
        return "boolean";
    }
}
function deparse_literal(node) {
    outputPush(node.data);
    return getObjType(output[output.length - 1]);
}
function deparse_precision(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var len = node.children.length, len_minus_one = len - 1;
    outputPush("precision");
    outputPush(ws.required(" "));
    for (var i = 0; i < len; ++i) {
        deparse(node.children[i]);
        if (i !== len_minus_one) {
            outputPush(ws.required(" "));
        }
    }
}
function deparse_preprocessor(node) {
    var level = ws.level;
    ws.level = 0;
    if (output[output.length - 1] !== "\n")
        outputPush(ws.required("\n"));
    outputPush(node.token.data);
    outputPush(ws.required("\n"));
    ws.level = level;
}
function deparse_return(node) {
    outputPush("return");
    if (node.children[0]) {
        outputPush(ws.required(" "));
        deparse(node.children[0]);
    }
}
function deparse_stmt(node) {
    if (!node.children.length)
        return;
    var has_child = node.children.length > 0, semicolon = has_child ? needs_semicolon[node.children[0].type] : "", needs_newline = true;
    let isFunSet = false;
    if (has_child && node.children[0].type === "decl") {
        if (node.children[0].children.length > 5 && node.children[0].children[5].type === "function") {
            isFunSet = true;
            deparseGlobalVal.isFuncBlock = true;
            semicolon = !node.children[0].children[5].children[2];
        }
    }
    if (has_child && node.children[0].type === "stmtlist") {
        needs_newline = false;
    }
    var last = output[output.length - 1];
    if (deparseGlobalVal.isFuncBlock && (!last || last.charAt(0) !== "\n")) {
        needs_newline && outputPush(ws.optional("\n"));
    }
    deparse(node.children[0]);
    if (deparseGlobalVal.isFuncBlock) {
        if (semicolon)
            outputPush(";");
    }
    if (isFunSet) {
        deparseGlobalVal.isFuncBlock = false;
    }
}
function deparse_stmtlist(node) {
    var has_parent = node.parent !== null && node.parent !== undefined;
    if (has_parent) {
        deparseGlobalVal.inFunc = true;
        outputPush("{");
        deparseGlobalVal.nowBlockLevel++;
        ws.indent();
        outputPush(ws.optional("\n"));
        if (deparseGlobalVal.funcArgsInReplace.length > 0) {
            for (let index = 0; index < deparseGlobalVal.funcArgsInReplace.length; index++) {
                const element = deparseGlobalVal.funcArgsInReplace[index];
                let builtinFuncCall = deparserConverMap_1.convertToBuiltinCall[element.type];
                if (builtinFuncCall) {
                    outputPush(`let ${element.name}: ${element.type} = ${builtinFuncCall}()\n`);
                }
                else {
                    // struct类型的new
                    outputPush(`let ${element.name}: ${element.type} = new ${element.type}()\n`);
                }
                let setType = deparserConverMap_1.builtinAbbreviation[element.type] || "Struct";
                let setFunc = `glSet_${setType}_${setType}`;
                outputPush(`${setFunc}(${element.name}, __${element.name}__)\n`);
                deparseGlobalVal.useBuiltinOperators.add(setFunc);
            }
        }
    }
    for (var i = 0, len = node.children.length; i < len; ++i) {
        deparse(node.children[i]);
    }
    if (has_parent) {
        deparseGlobalVal.nowFucObj.delete(deparseGlobalVal.nowBlockLevel);
        deparseGlobalVal.nowBlockLevel--;
        if (deparseGlobalVal.nowBlockLevel == 0) {
            deparseGlobalVal.inFunc = false;
            deparseGlobalVal.nowFucObj.delete(deparseGlobalVal.nowBlockLevel);
        }
        ws.dedent();
        outputPush(ws.optional("\n"));
        outputPush("}");
    }
}
function deparse_struct(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    outputPush("struct");
    outputPush(ws.required(" "));
    deparse(node.children[0]);
    outputPush(ws.optional(" "));
    outputPush("{");
    ws.indent();
    outputPush(ws.optional("\n"));
    var len = node.children.length, len_minus_one = len - 1;
    for (var i = 1, len = node.children.length; i < len; ++i) {
        deparse(node.children[i]);
        if (node.children[i].type !== "preprocessor") {
            outputPush(";");
        }
        if (i !== len_minus_one) {
            outputPush(ws.optional("\n"));
        }
    }
    ws.dedent();
    outputPush(ws.optional("\n"));
    outputPush("}");
}
function deparse_assign(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let glOpetatior;
    if (node.token.data == "+=") {
        glOpetatior = "glAddSet";
    }
    else if (node.token.data == "-=") {
        glOpetatior = "glSubSet";
    }
    else if (node.token.data == "*=") {
        glOpetatior = "glMulSet";
    }
    else if (node.token.data == "/=") {
        glOpetatior = "glDivSet";
    }
    else if (node.token.data == "=") {
        glOpetatior = "glSet";
    }
    else {
        console.error("无法识别的assign类型");
        debugger;
    }
    let leftBeginIndex = output.length;
    deparseGlobalVal.isLeftSet = true;
    let leftAssignType = deparse(node.children[0]);
    deparseGlobalVal.isLeftSet = false;
    let leftEndIndex = output.length;
    outputPush(ws.optional(" "));
    let operatorIndex = output.length;
    outputPush(node.token.data);
    outputPush(ws.optional(" "));
    let rightBeginIndex = output.length;
    // if (rightBeginIndex == 154) {
    //     debugger
    // }
    let rightAssignType = deparse(node.children[1]);
    let returnType;
    if (leftAssignType == "number") {
        if (rightAssignType == "NumData" || rightAssignType == "FloatData" || rightAssignType == "IntData") {
            outputPush(".v");
            glOpetatior = null;
            returnType = "number";
        }
        else if (rightAssignType == "number") {
            // 俩边都是number 没必要重写操作符
            glOpetatior = null;
            returnType = "number";
        }
    }
    let rightEndIndex = output.length;
    if (glOpetatior) {
        glOpetatior = glOpetatior + "_" + deparserConverMap_1.convertToAbbreviation("" + leftAssignType) + "_" + deparserConverMap_1.convertToAbbreviation("" + rightAssignType);
        outputInsert(leftBeginIndex, glOpetatior + "(");
        // // 因为左边插入了
        outputInsert(rightEndIndex + 1, ")");
        outputReplace(operatorIndex + 1, ",");
        if (glOpetatior.indexOf("undefined") !== -1) {
            debugger;
        }
        deparseGlobalVal.useBuiltinOperators.add(glOpetatior);
        return deparserConverMap_1.tsbuiltinOperationFunsWithReturn[glOpetatior];
    }
    else {
        return returnType;
    }
}
function deparse_unary(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let operatorReplace;
    if (node.data == "-") {
        operatorReplace = "glNegative";
    }
    else if (node.data == "--") {
        operatorReplace = "glFrontSubSelf";
    }
    else if (node.data == "++") {
        operatorReplace = "glFrontAddSelf";
    }
    else {
        console.log("无法识别的一元运算符");
        debugger;
    }
    let beginIndex = output.length;
    outputPush(node.data);
    let deparseType = deparse(node.children[0]);
    if (operatorReplace) {
        operatorReplace = operatorReplace + "_" + deparserConverMap_1.convertToAbbreviation("" + deparseType);
        outputInsert(beginIndex, operatorReplace + "(");
        // // 因为左边插入了
        outputDel(beginIndex + 1, 1);
        outputPush(")");
        deparseGlobalVal.useBuiltinOperators.add(operatorReplace);
    }
    return deparseType;
}
function deparse_whileloop(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var is_stmtlist = node.children[1].type === "stmtlist";
    outputPush("while(");
    deparse(node.children[0]);
    outputPush(")");
    outputPush(is_stmtlist ? ws.optional(" ") : ws.required(" "));
    deparse(node.children[1]);
}
function deparse_call(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    var len = node.children.length, len_minus_one = len - 1;
    let firstChildData = node.children[0];
    if (firstChildData.type != "builtin" && !deparserConverMap_1.builtinFuns[firstChildData.data]) {
        outputPush("this.");
    }
    let funIndex = output.length;
    // if (funIndex === 710) {
    //     debugger
    // }
    deparse(firstChildData);
    outputPush("(");
    let callParamsType = [];
    for (var i = 1; i < len; ++i) {
        let childBegin = output.length;
        // if (childBegin == 3788) {
        //     debugger
        // }
        let nowObjType = deparse(node.children[i]);
        if (!nowObjType) {
            console.log("error in call");
            debugger;
            let test = deparse(node.children[i]);
        }
        let childEnd = output.length;
        callParamsType.push(deparserConverMap_1.convertToAbbreviation("" + nowObjType));
        if (i !== len_minus_one) {
            outputPush(",");
            outputPush(ws.optional(" "));
        }
    }
    let tsFuncName = output[funIndex];
    if (callParamsType.length) {
        tsFuncName += "_" + callParamsType.join("_");
    }
    outputReplace(funIndex, tsFuncName);
    outputPush(")");
    let returnType = deparserConverMap_1.tsbuiltinFunsWithReturn[tsFuncName] || "";
    if (returnType) {
        deparseGlobalVal.useBuiltinFuncs.add(tsFuncName);
    }
    else {
        returnType = deparseGlobalVal.customFuns.get(tsFuncName);
        returnType = deparserConverMap_1.convertToTsType[returnType] || returnType;
    }
    if (!returnType) {
        debugger;
        console.error("无法获取调用的返回类型");
    }
    return returnType;
}
function getObjType(element) {
    let nowObjType;
    if (element.indexOf("int(") == -1 &&
        element.indexOf("float(") == -1 &&
        element.indexOf("int_N(") == -1 &&
        element.indexOf("float_N(") == -1) {
        // 应该优先先查找块定义内的中的
        nowObjType = getFuncObjType(element);
        if (nowObjType) {
            return nowObjType;
        }
        // 查找是否内建变量
        nowObjType = deparserConverMap_1.builtinValue[element];
        if (nowObjType) {
            return nowObjType;
        }
        let myIndex = element.indexOf("this.attributeData.");
        if (myIndex !== -1) {
            return deparserConverMap_1.convertToTsType[deparseGlobalVal.attributeData.get(element.substring(myIndex + "this.attributeData.".length))];
        }
        myIndex = element.indexOf("this.varyingData.");
        if (myIndex !== -1) {
            return (nowObjType = deparserConverMap_1.convertToTsType[deparseGlobalVal.varyingData.get(element.substring(myIndex + "this.varyingData.".length))]);
        }
        myIndex = element.indexOf("this.uniformData.");
        if (myIndex !== -1) {
            return (nowObjType = deparseGlobalVal.uniformData.get(element.substring(myIndex + "this.uniformData.".length)));
        }
        nowObjType = deparseGlobalVal.defines.get(element);
        if (nowObjType !== undefined) {
            if (!isNaN(parseFloat(nowObjType))) {
                nowObjType = "number";
            }
            else {
                debugger;
                nowObjType = "string";
            }
        }
        return nowObjType;
    }
    else {
        nowObjType = "NumData";
    }
    return nowObjType;
}
function getSonObjType(element, parentObjType) {
    let nowObjType;
    // 先检查是否内置类型 在检查struct类型
    let dataAtt = builtinAtt_1.builtinDataAtt[parentObjType];
    // 内置类型
    if (dataAtt) {
        nowObjType = dataAtt.att[element];
    }
    else {
        let sd = getStructType(parentObjType);
        if (sd) {
            let att = sd.get(element);
            if (att) {
                nowObjType = att;
            }
        }
    }
    return nowObjType;
}
function deparse_operator(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let beginIndex = output.length;
    let leftOperatorType = deparse(node.children[0]);
    outputPush(node.data);
    let rightIndex = output.length;
    let rightOperatorType = deparse(node.children[1]);
    if (rightIndex === 209) {
        debugger;
    }
    // 替换rgba 和stpq这种格式的代码
    if (node.data === "." && deparserConverMap_1.glslBuiltinType[leftOperatorType]) {
        let str = output[rightIndex];
        str = str.replace(/r/g, "x");
        str = str.replace(/g/g, "y");
        str = str.replace(/b/g, "z");
        str = str.replace(/a/g, "w");
        str = str.replace(/s/g, "x");
        str = str.replace(/t/g, "y");
        str = str.replace(/p/g, "z");
        str = str.replace(/q/g, "w");
        outputReplace(rightIndex, str);
    }
    let isTop = false;
    let callTree = [];
    let callTreeIndex = [];
    let isCallTree = true;
    let isArrayCall = false;
    let lastIsArrayCall = false;
    for (let t = output.length - 1; t >= 0; t--) {
        const code = output[t];
        if (isCallTree) {
            isCallTree = false;
            if (code === "]") {
                isArrayCall = true;
            }
            else {
                callTree.push(code);
                callTreeIndex.push(t);
            }
        }
        else if (isArrayCall) {
            if (code === "[") {
                isArrayCall = false;
                lastIsArrayCall = true;
            }
            else {
                let numStr = code.match(/[0-9]+/g);
                if (numStr) {
                    let str = numStr[0];
                    let num = parseInt(str);
                    if (!isNaN(num)) {
                        callTree.push(str);
                        callTreeIndex.push(t);
                    }
                }
            }
        }
        else {
            if (code == ".") {
                isCallTree = true;
            }
            else if (code == "]") {
                isArrayCall = true;
            }
            else {
                if (lastIsArrayCall) {
                    if (code !== ")") {
                        callTree.push(code);
                        callTreeIndex.push(t);
                        lastIsArrayCall = false;
                    }
                }
                else {
                    isTop = t == beginIndex - 1;
                    break;
                }
            }
        }
    }
    let nowObjType;
    for (let index = callTree.length - 1; index >= 0; index--) {
        const element = callTree[index];
        // 说明是数值所以是数组索引 nowObjType 不用变
        if (isNaN(parseInt(element))) {
            if (index == callTree.length - 1) {
                nowObjType = getObjType(element);
            }
            else {
                nowObjType = getSonObjType(element, nowObjType);
            }
        }
    }
    if (!nowObjType) {
        nowObjType = getSonObjType(node.children[1].data, leftOperatorType);
        isTop = true;
    }
    if (!nowObjType) {
        console.error("error get obj");
        debugger;
    }
    // 如果是call的話 且是对子节点的取值 且是自定义函数
    if (node.parent.type == "call" && callTree.length > 1) {
        let firstChildData = node.parent.children[0];
        if (firstChildData.type != "builtin" && !deparserConverMap_1.builtinFuns[firstChildData.data]) {
            // 查找父节点类型
            let parentType = undefined;
            for (let index = callTree.length - 1; index >= 1; index--) {
                const element = callTree[index];
                if (index == callTree.length - 1) {
                    parentType = getObjType(element);
                }
                else {
                    parentType = getSonObjType(element, nowObjType);
                }
            }
            if (!parentType) {
                parentType = leftOperatorType;
            }
            // 如果是内建對象的話
            if (deparserConverMap_1.glslBuiltinType[parentType]) {
                outputReplace(output.length - 1, "out_" + output[output.length - 1]);
                if (nowObjType == "number") {
                    nowObjType = "NumData";
                }
            }
        }
    }
    if (deparseGlobalVal.isLeftSet && callTree.length > 1) {
        // 查找父节点类型
        let parentType = undefined;
        for (let index = callTree.length - 1; index >= 1; index--) {
            const element = callTree[index];
            if (index == callTree.length - 1) {
                parentType = getObjType(element);
            }
            else {
                parentType = getSonObjType(element, nowObjType);
            }
        }
        if (!parentType) {
            parentType = leftOperatorType;
        }
        // 如果是内建對象的話
        if (deparserConverMap_1.glslBuiltinType[parentType]) {
            outputReplace(output.length - 1, "out_" + output[output.length - 1]);
            if (nowObjType == "number") {
                nowObjType = "NumData";
            }
        }
    }
    if (nowObjType == "number") {
        if (isTop) {
            if (
            // 如果是赋值语句的话不用进行变量转换
            !((node.parent.data == "=" ||
                node.parent.data == "+=" ||
                node.parent.data == "-=" ||
                node.parent.data == "*=" ||
                node.parent.data == "/=") &&
                node == node.parent.children[0])) {
                outputInsert(beginIndex, "float_N(");
                outputPush(")");
                nowObjType = "NumData";
            }
        }
    }
    return nowObjType;
}
function deparse_group(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    outputPush("(");
    let type = deparse(node.children[0]);
    outputPush(")");
    return type;
}
function deparse_suffix(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    let glOperation;
    if (node.data == "++") {
        glOperation = "glAfterAddSelf";
    }
    else if (node.data == "--") {
        glOperation = "glFrontSubSelf";
    }
    else {
        console.error("无法识别的suffix 语句");
        debugger;
    }
    let beginIndex = output.length;
    let type = deparse(node.children[0]);
    if (glOperation) {
        glOperation = glOperation + "_" + deparserConverMap_1.convertToAbbreviation("" + type);
        outputInsert(beginIndex, glOperation + "(");
        // // 因为左边插入了
        outputPush(")");
        deparseGlobalVal.useBuiltinOperators.add(glOperation);
    }
    else {
        outputPush(node.data);
    }
}
function deparse_quantifier(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    debugger;
    outputPush("[");
    if (node.children[0])
        deparse(node.children[0]);
    outputPush("]");
}
function deparse_ternary(node) {
    if (!deparseGlobalVal.isFuncBlock) {
        return;
    }
    deparse(node.children[0]);
    outputPush(ws.optional(" "));
    outputPush("?");
    outputPush(ws.optional(" "));
    let type1 = deparse(node.children[1]);
    outputPush(ws.optional(" "));
    outputPush(":");
    outputPush(ws.optional(" "));
    let type2 = deparse(node.children[2]);
    return type1 || type2;
}
function deparse(ast) {
    let func = types[ast.type];
    if (!func) {
        debugger;
    }
    return func(ast);
}


/***/ }),

/***/ "./ts/src/main.ts":
/*!************************!*\
  !*** ./ts/src/main.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CpuRenderingContext_1 = __webpack_require__(/*! ./webglImpl/CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
let win = window;
if (win.cpuRenderCanvas) {
    CpuRenderingContext_1.cpuRenderingContext.customContextInit(document.getElementById(win.cpuRenderCanvas));
}
else {
    console.error("没有cpuRender 的canvas");
}


/***/ }),

/***/ "./ts/src/webglImpl/CpuRenderingContext.ts":
/*!*************************************************!*\
  !*** ./ts/src/webglImpl/CpuRenderingContext.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
const GeometricOperations_1 = __webpack_require__(/*! ./geometricOperations/GeometricOperations */ "./ts/src/webglImpl/geometricOperations/GeometricOperations.ts");
const GlHack_1 = __webpack_require__(/*! ./GlHack */ "./ts/src/webglImpl/GlHack.ts");
const PipelineData_1 = __webpack_require__(/*! ./PipelineData */ "./ts/src/webglImpl/PipelineData.ts");
const RenderModel_1 = __webpack_require__(/*! ./RenderModel */ "./ts/src/webglImpl/RenderModel.ts");
const BuiltinData_1 = __webpack_require__(/*! ./shader/builtin/BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
const BuiltinVar_1 = __webpack_require__(/*! ./shader/builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
const Rect_1 = __webpack_require__(/*! ./shader/builtin/Rect */ "./ts/src/webglImpl/shader/builtin/Rect.ts");
let abs = Math.abs;
let max = Math.max;
let cpuCachData = new BuiltinData_1.BuiltinDataCach();
let renderVertxPipeCachData = new BuiltinData_1.BuiltinDataCach();
let renderFragPipeCachData = new BuiltinData_1.BuiltinDataCach();
function renderError(message, ...optionalParams) {
    debugger;
    console.error(message, ...optionalParams);
}
let globalShaderIndex = 1;
let globalProgramIndex = 1;
let globalBufferIndex = 1;
let globalTextureIndex = 1;
let globalFramebufferIndex = 1;
let globalRenderbufferIndex = 1;
class CachGlData {
    constructor() {
        this.glCall = "";
    }
}
// 用cpu实现的webgl 1接口
class CpuRenderingContext {
    constructor() {
        this._canvars2D = null;
        /**视窗 */
        this._viewSp = null;
        /**缓存的实际RenderingContext */
        this._gameGl = null;
        // 实际游戏使用的canvas
        this._gameCanvas = null;
        // 实际显示canvas的大小
        this._canvasSize = null;
        /**当前设定视窗的大小 */
        this._viewPort = null;
        /**帧数据 */
        /**大小是实际显示的大小 */
        // private _frameBuffer: Uint8ClampedArray = null!
        /**深度数据 */
        // private _depthBuffer: number[] = null!
        // 系统内置使用的framebuffer
        this._systemFrameBuffer = null;
        /*红色通道是否可以写 */
        this._colorRWriteEnable = true;
        /*绿色通道是否可以写 */
        this._colorGWriteEnable = true;
        /*蓝色通道是否可以写 */
        this._colorBWriteEnable = true;
        /*透明通道是否可以写 */
        this._colorAWriteEnable = true;
        /**背景色 清空时会用改颜色清理屏幕 */
        this._backgroundColor = new BuiltinData_1.Vec4Data(0, 0, 0, 0);
        /**默认的深度 */
        this._defaultDepth = Number.MAX_SAFE_INTEGER;
        /**深度是否可以写入 */
        this._depthWriteEnable = true;
        /**深度测试方法 */
        this._depthJudgeFunc = 0;
        /**对应的shader脚本缓存 */
        this._webglShaderMap = new Map();
        /**对应的shaderProgram脚本缓存 */
        this._webGLProgramMap = new Map();
        /**当前使用的着色程序 */
        this._useProgram = null;
        /**绑定在顶点target上的buffer数据 */
        this._vboBufferDataMap = new Map();
        /**绑定在索引target上的buffer数据 */
        this._eboBufferDataMap = new Map();
        /**当前使用的vbo 数据 */
        this._useVboBufferData = null;
        /**当前使用的ebo 数据 */
        this._useEboBufferData = null;
        /**
         * 按照自己的理解 attribute属性是全局的
         * 属性是否生效
         * */
        this._attributeLocalEnable = [];
        this._attributeReadInfo = new Map();
        /**当前正面的类型(顺时针还是逆时针) */
        this._nowFrontType = 0;
        /**裁剪面的类型 */
        this._nowCullFaceType = 0;
        /**开启裁剪正面或背面功能 */
        this._openCullFace = false;
        /**开启深度测试 */
        this._openDepthTest = false;
        /**开启Scissor测试 */
        this._openScissorTest = false;
        /**纹理从cpu到gpu的对齐准则 */
        this._pixelPackNum = 4;
        /**纹理从gpu到cpu的对齐准则 */
        this._pixelUnPackNum = 4;
        // 图片是否y翻转
        this._unpackFilpY = false;
        /**gpu上的纹理数据map */
        this._textureDataMap = new Map();
        /**纹理单元 至少保证8个纹理单元  0号纹理默认激活 */
        this._textureUnit = new Map();
        /**当前激活的纹理 */
        this._nowActiveTextureUnit = 0;
        /**cube对应面的下标索引 */
        this._cubeTexIndex = new Map();
        this._framebufferObjectMap = new Map();
        this._nowUseFramebufferObject = null;
        this._renderbufferObjectMap = new Map();
        this._nowUseRenderbufferObject = null;
        /**视窗大小 */
        this._scissorRect = null;
        this._zNear = 0;
        this._zFar = 1;
        this._blendFactorColor = new BuiltinData_1.Vec4Data();
        /*rgb 片元的混合方式 */
        this._rgbSrcBlendFunc = 0;
        /*alpha 片元的混合方式 */
        this._alphaSrcBlendFunc = 0;
        /*rgb 屏幕颜色的混合方式 */
        this._rgbDestBlendFunc = 0;
        /*alpha 屏幕颜色的混合方式 */
        this._alphaDestBlendFunc = 0;
        /*rgb运算的方式 */
        this._rgbComputerBlendFunc = 0;
        /*alpha运算的方式 */
        this._alphaComputerBlendFunc = 0;
        /**打开混合 */
        this._openBlend = false;
        this._parameter = new Map();
        /**渲染时间 毫秒 */
        this._customRenderTime = -1;
        /**当前缓存的待渲染的数据 */
        this._cachWriteData = null;
        let win = window;
        if (!win.gameCanvas) {
            console.error("没有指明gameCanvars");
            return;
        }
        let canvas = document.getElementById(win.gameCanvas);
        let gl = canvas.getContext("webgl");
        this._gameCanvas = canvas;
        this._gameGl = gl;
        /**默认裁剪背面 */
        this._nowCullFaceType = this._gameGl.BACK;
        this._nowFrontType = this._gameGl.CCW;
        let maxUnit = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        for (let i = 0; i < maxUnit; i++) {
            this._textureUnit.set(i, new Map());
        }
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X, 0);
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X, 1);
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y, 2);
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 3);
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z, 4);
        this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 5);
        this._rgbSrcBlendFunc = this._gameGl.ONE;
        this._alphaSrcBlendFunc = this._gameGl.ONE;
        this._rgbDestBlendFunc = this._gameGl.ZERO;
        this._alphaDestBlendFunc = this._gameGl.ZERO;
        this._rgbComputerBlendFunc = this._gameGl.FUNC_ADD;
        this._alphaComputerBlendFunc = this._gameGl.FUNC_ADD;
        this._depthJudgeFunc = this._gameGl.LESS;
        let maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._parameter.set(gl.MAX_VERTEX_ATTRIBS, maxVertexAttribs);
        /**默认是不生效的 */
        this._attributeLocalEnable.length = maxVertexAttribs;
        this._attributeLocalEnable.fill(false);
        this._systemFrameBuffer = new PipelineData_1.WebGLFramebufferObject(new PipelineData_1.CPUWebGLFramebuffer(0));
        this._systemFrameBuffer.colorAttachPoint = new PipelineData_1.WebGLRenderbufferObject(new PipelineData_1.CPUWebGLRenderbuffer(0));
        this._systemFrameBuffer.depthAttachPoint = new PipelineData_1.WebGLRenderbufferObject(new PipelineData_1.CPUWebGLRenderbuffer(0));
        this._systemFrameBuffer.stencilAttachPoint = new PipelineData_1.WebGLRenderbufferObject(new PipelineData_1.CPUWebGLRenderbuffer(0));
        GlHack_1.replaceWebglFunc(gl);
    }
    get cachGameGl() {
        return this._gameGl;
    }
    set customRenderTime(value) {
        this._customRenderTime = value;
    }
    _clearColorBuffer() {
        let r = this._backgroundColor.x;
        let g = this._backgroundColor.y;
        let b = this._backgroundColor.z;
        let a = this._backgroundColor.w;
        let val = 0x00000000;
        if (this._colorRWriteEnable) {
            val = ((val & 0xffffff00) | r) >>> 0;
        }
        if (this._colorGWriteEnable) {
            val = ((val & 0xffff00ff) | (g << 8)) >>> 0;
        }
        if (this._colorBWriteEnable) {
            val = ((val & 0xff00ffff) | (b << 16)) >>> 0;
        }
        if (this._colorAWriteEnable) {
            val = ((val & 0x00ffffff) | (a << 24)) >>> 0;
        }
        // let writeFramebuffer = new Uint32Array(this._frameBuffer.buffer, this._frameBuffer.byteOffset, this._frameBuffer.byteLength)
        // writeFramebuffer.fill(val, 0)
        let systemWriteFramebuffer = this.customGetNowColorBuffer();
        systemWriteFramebuffer.fill(val, 0);
    }
    _clearDeputhBuffer() {
        let depathFramebuffer = this.customGetNowDepthBuffer();
        if (depathFramebuffer) {
            depathFramebuffer.fill(this._defaultDepth, 0);
        }
    }
    customSaveGlData() {
        // writeTsImplGlslFile()
    }
    /**非gl的接口 初始化自定义的context */
    customContextInit(sp) {
        //考虑下要不要换成动态的方式创建 会不会影响性能
        this._viewSp = sp;
        this._canvars2D = this._viewSp.getContext("2d");
    }
    customGlInitBeforeCall() {
        this._canvasSize = new BuiltinData_1.Vec2Data(this._gameCanvas.width, this._gameCanvas.height);
        this._viewSp.width = this._canvasSize.x;
        this._viewSp.height = this._canvasSize.y;
        let colorAttachPoint = this._systemFrameBuffer.colorAttachPoint;
        colorAttachPoint.initBufferData(this._gameCanvas.width, this._gameCanvas.height, this._gameGl.RGBA4);
        let depthAttachPoint = this._systemFrameBuffer.depthAttachPoint;
        depthAttachPoint.initBufferData(this._gameCanvas.width, this._gameCanvas.height, this._gameGl.DEPTH_COMPONENT16);
        let stencilAttachPoint = this._systemFrameBuffer.stencilAttachPoint;
        stencilAttachPoint.initBufferData(this._gameCanvas.width, this._gameCanvas.height, this._gameGl.STENCIL_INDEX8);
    }
    _customJudgeDeleteShader(shaderIndex, shader) {
        if (!shader.isValid()) {
            shader.destory();
            this._webglShaderMap.delete(shaderIndex.cachIndex);
        }
    }
    _customJudgeDeleteProgram(programIndex, program) {
        if (!program.isValid()) {
            program.destory(programIndex);
            this._webGLProgramMap.delete(programIndex.cachIndex);
            let attachVertexShader = program.attachVertexShader;
            if (attachVertexShader) {
                this._customJudgeDeleteShader(attachVertexShader.shaderIndex, attachVertexShader);
            }
            let attachFragmentShader = program.attachFragmentShader;
            if (attachFragmentShader) {
                this._customJudgeDeleteShader(attachFragmentShader.shaderIndex, attachFragmentShader);
            }
        }
    }
    /**
     * @param type
     * @returns 实际上在opengl中的返回是GLuint
     */
    createShader(type) {
        let shaderIndex = new PipelineData_1.CPUWebGLShader(globalShaderIndex++);
        if (type === this._gameGl.VERTEX_SHADER) {
            this._webglShaderMap.set(shaderIndex.cachIndex, new PipelineData_1.CPUVertexShader(shaderIndex));
        }
        else if (type == this._gameGl.FRAGMENT_SHADER) {
            this._webglShaderMap.set(shaderIndex.cachIndex, new PipelineData_1.CPUFragmentShader(shaderIndex));
        }
        else {
            shaderIndex = null;
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " createShader no support type: " + type);
        }
        return shaderIndex;
    }
    shaderSource(shaderIndex, source) {
        let shader = this.customGetShader(shaderIndex);
        if (shader) {
            shader.source = source;
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in shaderSource ");
        }
    }
    compileShader(shaderIndex) {
        let shader = this.customGetShader(shaderIndex);
        if (shader) {
            shader.complile();
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in compileShader ");
        }
    }
    getShaderParameter(shaderIndex, pname) {
        let shader = this.customGetShader(shaderIndex);
        if (shader) {
            switch (pname) {
                case this._gameGl.DELETE_STATUS:
                    return shader.delete;
                case this._gameGl.COMPILE_STATUS:
                    return shader.compileStatus;
                case this._gameGl.SHADER_TYPE:
                    if (shader instanceof PipelineData_1.CPUVertexShader) {
                        return this._gameGl.VERTEX_SHADER;
                    }
                    else if (shader instanceof PipelineData_1.CPUFragmentShader) {
                        return this._gameGl.FRAGMENT_SHADER;
                    }
                    renderError("getShaderParameter renderError shader type");
                    return null;
            }
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in getShaderParameter ");
        }
    }
    getShaderInfoLog(shaderIndex) {
        let shader = this.customGetShader(shaderIndex);
        if (!shader) {
            renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in getShaderInfoLog ");
        }
        return shader ? shader.info : null;
    }
    getProgramInfoLog(programIndex) {
        let program = this.customGetProram(programIndex);
        if (!program) {
            renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in getProgramInfoLog ");
        }
        return program ? program.info : null;
    }
    createProgram() {
        let program = new PipelineData_1.CPUWebGLProgram(globalProgramIndex++);
        this._webGLProgramMap.set(program.cachIndex, new PipelineData_1.CPUShaderProgram());
        return program;
    }
    customGetShader(shaderIndex) {
        let shader;
        if (shaderIndex) {
            shader = this._webglShaderMap.get(shaderIndex.cachIndex);
        }
        return shader;
    }
    attachShader(programIndex, shaderIndex) {
        let program = this.customGetProram(programIndex);
        let shader = this.customGetShader(shaderIndex);
        if (program === undefined || shader === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in attachShader ");
            return;
        }
        if (shader instanceof PipelineData_1.CPUVertexShader) {
            if (program.attachVertexShader) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in attachShader ");
            }
            else {
                program.attachVertexShader = shader;
                shader.setAttachProgram(programIndex);
            }
        }
        else if (shader instanceof PipelineData_1.CPUFragmentShader) {
            if (program.attachFragmentShader) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in attachShader ");
            }
            else {
                program.attachFragmentShader = shader;
                shader.setAttachProgram(programIndex);
            }
        }
    }
    detachShader(programIndex, shaderIndex) {
        let program = this.customGetProram(programIndex);
        let shader = this.customGetShader(shaderIndex);
        if (program === undefined || shader === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in detachShader ");
            return;
        }
        if (shader instanceof PipelineData_1.CPUVertexShader) {
            if (program.attachVertexShader === shader) {
                shader.deleteAttachProgram(programIndex);
                program.attachVertexShader = null;
                this._customJudgeDeleteShader(shaderIndex, shader);
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in detachShader ");
            }
        }
        else if (shader instanceof PipelineData_1.CPUFragmentShader) {
            if (program.attachFragmentShader === shader) {
                shader.deleteAttachProgram(programIndex);
                program.attachFragmentShader = null;
                this._customJudgeDeleteShader(shaderIndex, shader);
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in detachShader ");
            }
        }
    }
    linkProgram(programIndex) {
        let program = this.customGetProram(programIndex);
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in linkProgram ");
        }
        else {
            program.link();
        }
    }
    customGetProram(programIndex) {
        let program;
        if (programIndex) {
            program = this._webGLProgramMap.get(programIndex.cachIndex);
        }
        return program;
    }
    useProgram(programIndex) {
        let program = this.customGetProram(programIndex);
        if (program === undefined) {
            this._useProgram = null;
        }
        else {
            if (program.linkStatus) {
                if (this._useProgram) {
                    this._useProgram.unUse();
                    this._customJudgeDeleteProgram(programIndex, this._useProgram);
                }
                this._useProgram = program;
                program.use();
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in useProgram ");
            }
        }
    }
    deleteProgram(programIndex) {
        let program = this.customGetProram(programIndex);
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in deleteProgram ");
        }
        else {
            program.delete = true;
            this._customJudgeDeleteProgram(programIndex, program);
        }
    }
    getProgramParameter(programIndex, pname) {
        let program = this._webGLProgramMap.get(programIndex.cachIndex);
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in getProgramParameter ");
        }
        else {
            switch (pname) {
                case this._gameGl.DELETE_STATUS:
                    return program.delete;
                case this._gameGl.LINK_STATUS:
                    return program.linkStatus;
                case this._gameGl.VALIDATE_STATUS:
                    renderError("todo");
                case this._gameGl.ATTACHED_SHADERS:
                    let attachNum = 0;
                    if (program.attachFragmentShader) {
                        attachNum++;
                    }
                    if (program.attachVertexShader) {
                        attachNum++;
                    }
                    return attachNum;
                case this._gameGl.ACTIVE_ATTRIBUTES:
                    return program.getAttributeSize();
                case this._gameGl.ACTIVE_UNIFORMS:
                    return program.getUniformSize();
            }
        }
    }
    customGetGlType(type) {
        let glType;
        if (type === BuiltinData_1.Vec4Data) {
            glType = this._gameGl.FLOAT_VEC4;
        }
        else if (type === BuiltinData_1.Vec3Data) {
            glType = this._gameGl.FLOAT_VEC3;
        }
        else if (type === BuiltinData_1.Vec2Data) {
            glType = this._gameGl.FLOAT_VEC2;
        }
        else if (type === BuiltinData_1.FloatData) {
            glType = this._gameGl.FLOAT;
        }
        else if (type === BuiltinData_1.Mat4Data) {
            glType = this._gameGl.FLOAT_MAT4;
        }
        else if (type === BuiltinData_1.Mat3Data) {
            glType = this._gameGl.FLOAT_MAT3;
        }
        else if (type === BuiltinData_1.Mat3Data) {
            glType = this._gameGl.FLOAT_MAT3;
        }
        else if (type === BuiltinData_1.IVec2Data) {
            glType = this._gameGl.INT_VEC2;
        }
        else if (type === BuiltinData_1.IVec3Data) {
            glType = this._gameGl.INT_VEC3;
        }
        else if (type === BuiltinData_1.IVec4Data) {
            glType = this._gameGl.INT_VEC4;
        }
        else if (type === BuiltinData_1.IntData) {
            glType = this._gameGl.INT;
        }
        else {
            debugger;
            console.error("暂不支持的类型转换");
        }
        return glType;
    }
    getActiveAttrib(programIndex, index) {
        let program = this.customGetProram(programIndex);
        let activeInfo = null;
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in getProgramParameter ");
        }
        else {
            let name = program.getNameByAttributeIndex(index);
            if (name === "dataKeys") {
                debugger;
            }
            if (name) {
                let dataKeys = program.linkVertexShader.attributeData.dataKeys;
                let dataSize = program.linkVertexShader.attributeData.dataSize;
                activeInfo = { name: name, type: dataKeys.get(name), size: dataSize.get(name) };
            }
        }
        return activeInfo;
    }
    getActiveUniform(programIndex, index) {
        let program = this.customGetProram(programIndex);
        let activeInfo = null;
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in getProgramParameter ");
        }
        else {
            let name = program.getNameByUniformIndex(index);
            if (name === "dataKeys") {
                debugger;
            }
            if (name) {
                let dataKeys = program.linkVertexShader.uniformData.dataKeys;
                let dataSize = program.linkVertexShader.uniformData.dataSize;
                activeInfo = { name: name, type: dataKeys.get(name), size: dataSize.get(name) };
            }
        }
        return activeInfo;
    }
    deleteShader(shaderIndex) {
        let shader = this.customGetShader(shaderIndex);
        if (shader) {
            shader.delete = true;
            this._customJudgeDeleteShader(shaderIndex, shader);
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in deleteShader ");
        }
    }
    createBuffer() {
        let buffer = new PipelineData_1.CPUWebGLBuffer(globalBufferIndex++);
        return buffer;
    }
    bindBuffer(target, buffer) {
        if (target === this._gameGl.ARRAY_BUFFER) {
            if (buffer) {
                let vboBuffer = this._vboBufferDataMap.get(buffer.cachIndex);
                if (!vboBuffer) {
                    vboBuffer = new PipelineData_1.VBOBufferData(this._gameGl.STATIC_DRAW, buffer);
                    this._vboBufferDataMap.set(buffer.cachIndex, vboBuffer);
                }
                this._useVboBufferData = vboBuffer;
            }
            else {
                this._useVboBufferData = null;
            }
        }
        else if (target === this._gameGl.ELEMENT_ARRAY_BUFFER) {
            if (buffer) {
                let eboBuffer = this._eboBufferDataMap.get(buffer.cachIndex);
                if (!eboBuffer) {
                    eboBuffer = new PipelineData_1.EBOBufferData(this._gameGl.STATIC_DRAW, buffer);
                    this._eboBufferDataMap.set(buffer.cachIndex, eboBuffer);
                }
                this._useEboBufferData = eboBuffer;
            }
            else {
                this._useEboBufferData = null;
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM   " + this._gameGl.INVALID_ENUM + " in bindBuffer ");
        }
    }
    /**合并了原本webGl上的2个接口 */
    /**不支持重载 */
    bufferData(target, sizeOrData, usage) {
        if (usage !== this._gameGl.STATIC_DRAW && usage !== this._gameGl.DYNAMIC_DRAW && usage !== this._gameGl.STREAM_DRAW) {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in bufferData ");
            return;
        }
        let isSize = false;
        if (!(sizeOrData instanceof Object)) {
            isSize = true;
            if (sizeOrData < 0) {
                renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_ENUM + " in bufferData ");
                return;
            }
        }
        if (target === this._gameGl.ARRAY_BUFFER) {
            if (this._useVboBufferData) {
                if (isSize) {
                    this._useVboBufferData.buffer = new Uint8Array(sizeOrData);
                }
                else {
                    /**如果直接使用arraybuffer的话不会复制 arraybuffer对象用来表示通用的、固定长度的原始二进制数据缓冲区。
                     * 只能通过类型数组对象和dataView操作 */
                    let uint8ArrayData;
                    if (ArrayBuffer.isView(sizeOrData)) {
                        uint8ArrayData = new Uint8Array(sizeOrData.buffer, sizeOrData.byteOffset, sizeOrData.byteLength);
                    }
                    else {
                        uint8ArrayData = new Uint8Array(sizeOrData);
                    }
                    this._useVboBufferData.buffer = new Uint8Array(uint8ArrayData);
                }
                this._useVboBufferData.status = usage;
            }
            else {
                renderError("this._gameGl.GL_INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in bufferData ");
                return;
            }
        }
        else if (target === this._gameGl.ELEMENT_ARRAY_BUFFER) {
            if (this._useEboBufferData) {
                if (isSize) {
                    this._useEboBufferData.buffer = new Uint8Array(sizeOrData);
                }
                else {
                    /**如果直接使用arraybuffer的话不会复制 arraybuffer对象用来表示通用的、固定长度的原始二进制数据缓冲区。
                     * 只能通过类型数组对象和dataView操作 */
                    let uint8ArrayData;
                    if (ArrayBuffer.isView(sizeOrData)) {
                        uint8ArrayData = new Uint8Array(sizeOrData.buffer, sizeOrData.byteOffset, sizeOrData.byteLength);
                    }
                    else {
                        uint8ArrayData = new Uint8Array(sizeOrData);
                    }
                    this._useEboBufferData.buffer = new Uint8Array(uint8ArrayData);
                }
                this._useEboBufferData.status = usage;
            }
            else {
                renderError("this._gameGl.GL_INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in bufferData ");
                return;
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM   " + this._gameGl.INVALID_ENUM + " in bufferData ");
        }
    }
    bufferSubData(target, offset, data) {
        var _a, _b, _c, _d;
        if (target === this._gameGl.ARRAY_BUFFER) {
            if (this._useVboBufferData) {
                if (offset + data.byteLength > ((_b = (_a = this._useVboBufferData) === null || _a === void 0 ? void 0 : _a.buffer) === null || _b === void 0 ? void 0 : _b.byteLength)) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in bufferSubData ");
                }
                else {
                    let uint8ArrayData;
                    // data有可能是typeArray
                    if (ArrayBuffer.isView(data)) {
                        uint8ArrayData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
                    }
                    else {
                        uint8ArrayData = new Uint8Array(data);
                    }
                    this._useVboBufferData.buffer.set(uint8ArrayData, offset);
                }
            }
            else {
                renderError("this._gameGl.GL_INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in bufferSubData ");
            }
        }
        else if (target === this._gameGl.ELEMENT_ARRAY_BUFFER) {
            if (this._useEboBufferData) {
                if (offset + data.byteLength > ((_d = (_c = this._useEboBufferData) === null || _c === void 0 ? void 0 : _c.buffer) === null || _d === void 0 ? void 0 : _d.byteLength)) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in bufferSubData ");
                }
                else {
                    let uint8ArrayData;
                    // data有可能是typeArray
                    if (ArrayBuffer.isView(data)) {
                        uint8ArrayData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
                    }
                    else {
                        uint8ArrayData = new Uint8Array(data);
                    }
                    this._useEboBufferData.buffer.set(uint8ArrayData, offset);
                }
            }
            else {
                renderError("this._gameGl.GL_INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in bufferSubData ");
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM   " + this._gameGl.INVALID_ENUM + " in bufferSubData ");
        }
    }
    deleteBuffer(buffer) {
        if (buffer) {
            let cachIndex = buffer.cachIndex;
            let vboBuffer = this._vboBufferDataMap.get(cachIndex);
            if (vboBuffer) {
                this._vboBufferDataMap.delete(cachIndex);
                if (this._useVboBufferData === vboBuffer) {
                    this._useVboBufferData = null;
                }
            }
            else {
                let eboBuffer = this._eboBufferDataMap.get(cachIndex);
                if (eboBuffer) {
                    this._eboBufferDataMap.delete(cachIndex);
                    if (this._useEboBufferData === eboBuffer) {
                        this._useEboBufferData = null;
                    }
                }
            }
        }
    }
    /**active 和 enable 应该不是一个概念 */
    getAttribLocation(programIndex, name) {
        let program = this.customGetProram(programIndex);
        let localtion = -1;
        if (program === undefined) {
            renderError("this._gameGl.GL_INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in getAttribLocation ");
        }
        else {
            if (program.linkStatus) {
                let local = program.getAttributeLocal(name);
                if (local !== undefined) {
                    localtion = local;
                }
            }
            else {
                renderError("this._gameGl.GL_INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in getAttribLocation ");
            }
        }
        return localtion;
    }
    /**
     * 获取了 attribute 的 location 之后,在 OpenGL ES 以及 GPU 真正使用这个 attribute 之前,
     * 还需要通过 glEnableVertexAttribArray 这个 API,对这个 attribute 进行 enable。
     * 如果不 enable 的话,这个 attribute 的值无法被访问,比如无法通过 OpenGL ES 给这个 Attribute 赋值。
     * 更严重的是,如果不 enable 的话,由于 attribute 的值无法访问,
     * GPU 甚至在通过 glDrawArray 或者 glDrawElement 这 2 个 API 进行绘制的时候都无法使用这个 attribute。 */
    enableVertexAttribArray(index) {
        let maxVertexAttribs = this._parameter.get(this._gameGl.MAX_VERTEX_ATTRIBS);
        if (index >= 0 && index < maxVertexAttribs) {
            this._attributeLocalEnable[index] = true;
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in enableVertexAttribArray ");
        }
    }
    disableVertexAttribArray(index) {
        let maxVertexAttribs = this._parameter.get(this._gameGl.MAX_VERTEX_ATTRIBS);
        if (index >= 0 && index < maxVertexAttribs) {
            this._attributeLocalEnable[index] = false;
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in disableVertexAttribArray ");
        }
    }
    vertexAttribPointer(index, size, type, normalized, stride, offset) {
        var _a;
        let maxVertexAttribs = this._parameter.get(this._gameGl.MAX_VERTEX_ATTRIBS);
        if (size !== 1 && size !== 2 && size !== 3 && size !== 4) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in vertexAttribPointer ");
            return;
        }
        if (type !== this._gameGl.BYTE &&
            type !== this._gameGl.SHORT &&
            type !== this._gameGl.UNSIGNED_BYTE &&
            type !== this._gameGl.UNSIGNED_SHORT &&
            type !== this._gameGl.FLOAT) {
            renderError("this._gameGl.INVALID_ENUM   " + this._gameGl.INVALID_VALUE + " in vertexAttribPointer ");
            return;
        }
        if (index >= 0 && index < maxVertexAttribs) {
            let readInfo = new RenderModel_1.AttributeReadInfo(this._gameGl, (_a = this._useVboBufferData) === null || _a === void 0 ? void 0 : _a.cachIndex.cachIndex, size, type, normalized, stride, offset);
            this._attributeReadInfo.set(index, readInfo);
            let name = this._useProgram.getNameByAttributeLocal(index);
            let typeName = this._useProgram.linkVertexShader.attributeData.dataKeys.get(name);
            // 暂时不支持ivec 类型
            if (typeName === this._gameGl.FLOAT || typeName === this._gameGl.INT) {
                readInfo.factSize = 1;
                if (typeName === this._gameGl.FLOAT) {
                    readInfo.isFloat = true;
                }
                else {
                    readInfo.isFloat = false;
                }
            }
            else if (typeName === this._gameGl.FLOAT_VEC2) {
                readInfo.factSize = 2;
            }
            else if (typeName === this._gameGl.FLOAT_VEC3) {
                readInfo.factSize = 3;
            }
            else if (typeName === this._gameGl.FLOAT_VEC4) {
                readInfo.factSize = 4;
            }
            else {
                debugger;
                console.error("暂未实现的attritube size");
            }
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in vertexAttribPointer ");
        }
    }
    getUniformLocation(programIndex, name) {
        let program = this.customGetProram(programIndex);
        let localtion = null;
        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE   " + this._gameGl.INVALID_VALUE + " in getUniformLocation ");
        }
        else {
            if (program.linkStatus) {
                let local = program.getUniformLocal(name);
                if (local !== undefined) {
                    localtion = local;
                }
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in getUniformLocation ");
            }
        }
        // console.log("***************getUniformLocation***************")
        // console.log("name: " + name)
        // console.log(localtion)
        // console.log("***************getUniformLocation***************")
        return localtion;
    }
    _cusetomUniformDataBefore(location) {
        let program;
        if (this._useProgram === null) {
            renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1f ");
        }
        else {
            if (this._useProgram.linkStatus) {
                program = this._useProgram;
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1f ");
            }
        }
        return program;
    }
    uniform1f(location, x) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.FloatData(x));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1f ");
            }
        }
    }
    /**可以用于给sample(图片)传引用地址 */
    uniform1i(location, x) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.IntData(x));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1i ");
            }
        }
    }
    uniform2f(location, x, y) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.Vec2Data(x, y));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform2f ");
            }
        }
    }
    uniform2i(location, x, y) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.IVec2Data(x, y));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform2i ");
            }
        }
    }
    uniform3f(location, x, y, z) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.Vec3Data(x, y, z));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform3f ");
            }
        }
    }
    uniform3i(location, x, y, z) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.IVec3Data(x, y, z));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform3i ");
            }
        }
    }
    uniform4f(location, x, y, z, w) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.Vec4Data(x, y, z, w));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4f ");
            }
        }
    }
    uniform4i(location, x, y, z, w) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let suc = program.setUniformData(location, new BuiltinData_1.IVec4Data(x, y, z, w));
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4i ");
            }
        }
    }
    uniform1fv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arr = new Array(triangleVec.length);
            let i = 0;
            triangleVec.forEach((v) => {
                arr[i] = new BuiltinData_1.FloatData(v);
            });
            let suc = program.setUniformData(location, arr);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1fv ");
            }
        }
    }
    /**可以用于给sample(图片)传引用地址数组 */
    uniform1iv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arr = new Array(triangleVec.length);
            let i = 0;
            triangleVec.forEach((v) => {
                arr[i] = new BuiltinData_1.IntData(v);
            });
            let suc = program.setUniformData(location, arr);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform1iv ");
            }
        }
    }
    uniform2fv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 2) {
                arrVec.push(new BuiltinData_1.Vec2Data(triangleVec[index], triangleVec[index + 1]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform2fv ");
            }
        }
    }
    uniform2iv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 2) {
                arrVec.push(new BuiltinData_1.IVec2Data(triangleVec[index], triangleVec[index + 1]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform2iv ");
            }
        }
    }
    uniform3fv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 3) {
                arrVec.push(new BuiltinData_1.Vec3Data(triangleVec[index], triangleVec[index + 1], triangleVec[index + 2]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform3fv ");
            }
        }
    }
    uniform3iv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 3) {
                arrVec.push(new BuiltinData_1.IVec3Data(triangleVec[index], triangleVec[index + 1], triangleVec[index + 2]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform3iv ");
            }
        }
    }
    uniform4fv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 4) {
                arrVec.push(new BuiltinData_1.Vec4Data(triangleVec[index], triangleVec[index + 1], triangleVec[index + 2], triangleVec[index + 3]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4fv ");
            }
        }
    }
    uniform4iv(location, triangleVec) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < triangleVec.length; index += 4) {
                arrVec.push(new BuiltinData_1.IVec4Data(triangleVec[index], triangleVec[index + 1], triangleVec[index + 2], triangleVec[index + 3]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4iv ");
            }
        }
    }
    /**creator没有2维矩阵 暂不实现 */
    // uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void {
    //     let program = this._cusetomUniformDataBefore(location)
    //     if (program) {
    //         let arrVec: Mat3[] = []
    //         for (let index = 0; index < triangleVec.length; index += 2) {
    //             arrVec.push(new Vec4Data(triangleVec[index], triangleVec[index + 1]))
    //         }
    //         let suc = program.setUniformData(<CPUWebGLUniformLocation>location, arrVec)
    //         if (!suc) {
    //             renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4i ")
    //         }
    //     }
    // }
    uniformMatrix3fv(location, transpose, value) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < value.length; index += 9) {
                arrVec.push(new BuiltinData_1.Mat3Data(value[index], value[index + 1], value[index + 2], value[index + 3], value[index + 4], value[index + 5], value[index + 6], value[index + 7], value[index + 8]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4i ");
            }
        }
    }
    uniformMatrix4fv(location, transpose, value) {
        let program = this._cusetomUniformDataBefore(location);
        if (program) {
            let arrVec = [];
            for (let index = 0; index < value.length; index += 16) {
                arrVec.push(new BuiltinData_1.Mat4Data(value[index], value[index + 1], value[index + 2], value[index + 3], value[index + 4], value[index + 5], value[index + 6], value[index + 7], value[index + 8], value[index + 9], value[index + 10], value[index + 11], value[index + 12], value[index + 13], value[index + 14], value[index + 15]));
            }
            let suc = program.setUniformData(location, arrVec);
            if (!suc) {
                renderError("this._gameGl.INVALID_OPERATION   " + this._gameGl.INVALID_OPERATION + " in uniform4i ");
            }
        }
    }
    viewport(x, y, width, height) {
        this._viewPort = new Rect_1.Rect(x, y, width, height);
        this._scissorRect = new Rect_1.Rect(x, y, width, height);
        let frameLength = width * height * 4;
        console.log("width:" + width + " height" + height + " frameLength " + frameLength);
    }
    clearColor(red, green, blue, alpha) {
        this._backgroundColor = new BuiltinData_1.Vec4Data(red * 255, green * 255, blue * 255, alpha * 255);
    }
    clear(mask) {
        if (mask & this._gameGl.COLOR_BUFFER_BIT) {
            this._clearColorBuffer();
        }
        if (mask & this._gameGl.DEPTH_BUFFER_BIT) {
            this._clearDeputhBuffer();
        }
        if (mask & this._gameGl.STENCIL_BUFFER_BIT) {
            // todo
            console.warn("clear STENCIL_BUFFER_BIT no imm");
        }
    }
    colorMask(red, green, blue, alpha) {
        this._colorRWriteEnable = red;
        this._colorGWriteEnable = green;
        this._colorBWriteEnable = blue;
        this._colorAWriteEnable = alpha;
    }
    drawArrays(mode, first, count) {
        if (!(this._useProgram && this._useProgram.linkStatus)) {
            renderError("没有链接使用的程序");
            return;
        }
        if (!this._useVboBufferData) {
            renderError("没有顶点数据");
            return;
        }
        if (this._cachWriteData) {
            console.error("has cachWriteData not can draw");
        }
        debugger;
        cpuCachData.clear();
        let cachVboAttributeDatas = new Map();
        let attributeCount = Number.MAX_SAFE_INTEGER;
        this._attributeReadInfo.forEach((value, index) => {
            if (this._attributeLocalEnable[index]) {
                let name = this._useProgram.getNameByAttributeLocal(index);
                if (name) {
                    let bytesPerElement = value.byteType.BYTES_PER_ELEMENT;
                    let size = value.size;
                    let factSize = value.factSize;
                    let stride = value.stride ? value.stride : bytesPerElement * value.size;
                    let bufferData = this._vboBufferDataMap.get(value.readBufferIndex);
                    let numCachData = value.isFloat ? cpuCachData.floatData : cpuCachData.intData;
                    if (bufferData) {
                        let buffer = bufferData.buffer;
                        let dataTypeArray = new value.byteType(buffer.buffer, buffer.byteOffset, buffer.byteLength / bytesPerElement);
                        let num = buffer.byteLength / stride;
                        let dataArr;
                        let dataIndex = 0;
                        if (factSize === 1) {
                            dataArr = new Array(num);
                            if (size === 1 || size === 2 || size === 3 || size === 4) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = numCachData.getData();
                                    data.v = dataTypeArray[byteIndex];
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawArrays 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 2) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec2Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2 || size === 3 || size === 4) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec2Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawArrays 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 3) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0, 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 3 || size === 4) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawArrays 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 4) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0, 0, 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], 0, 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 3) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2], 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 4) {
                                for (let i = value.offset; i < buffer.length; i += stride) {
                                    let byteIndex = i / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2], dataTypeArray[byteIndex + 3]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawArrays 暂时无法识别的数量");
                            }
                        }
                        else {
                            debugger;
                            console.error("drawArrays 暂时无法识别的数量");
                        }
                        attributeCount = Math.min(dataArr.length, attributeCount);
                        cachVboAttributeDatas.set(name, dataArr);
                    }
                    else {
                        renderError("this._gameGl.INVALID_OPERATION  " + this._gameGl.INVALID_VALUE + " in drawArrays ");
                    }
                }
            }
        });
        let beginIndex = first;
        let endIndex = Math.min(count, attributeCount);
        this._cachWriteData = new RenderModel_1.CachWriteData(mode, beginIndex, endIndex, cachVboAttributeDatas);
        this._customDraw(mode, beginIndex, endIndex, cachVboAttributeDatas);
    }
    /**offset是字节为单位的 */
    drawElements(mode, count, type, offset) {
        if (!(this._useProgram && this._useProgram.linkStatus)) {
            renderError("没有链接程序");
            return;
        }
        if (!this._useVboBufferData) {
            renderError("没有顶点数据");
            return;
        }
        if (!this._useEboBufferData) {
            renderError("没有索引数据");
            return;
        }
        if (this._cachWriteData) {
            // 当前有正在渲染的数据 无法执行
            console.error("has cachWriteData not can draw");
        }
        // 清空数据缓存
        cpuCachData.clear();
        let cachVboAttributeDatas = new Map();
        let attributeCount = Number.MAX_SAFE_INTEGER;
        let eboBufferData;
        let offsetCount = offset;
        if (type === this._gameGl.UNSIGNED_BYTE) {
            eboBufferData = this._useEboBufferData.buffer;
        }
        else if (type === this._gameGl.UNSIGNED_SHORT) {
            eboBufferData = new Uint16Array(this._useEboBufferData.buffer.buffer, this._useEboBufferData.buffer.byteOffset, this._useEboBufferData.buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT);
            // offset是字节为
            offsetCount = offsetCount / 2;
        }
        this._attributeReadInfo.forEach((value, index) => {
            // 只会对enable的属性进行处理
            if (this._attributeLocalEnable[index]) {
                let name = this._useProgram.getNameByAttributeLocal(index);
                if (name) {
                    let bytesPerElement = value.byteType.BYTES_PER_ELEMENT;
                    let size = value.size;
                    let factSize = value.factSize;
                    let stride = value.stride ? value.stride : bytesPerElement * value.size;
                    let bufferData = this._vboBufferDataMap.get(value.readBufferIndex);
                    let numCachData = value.isFloat ? cpuCachData.floatData : cpuCachData.intData;
                    if (bufferData) {
                        let buffer = bufferData.buffer;
                        let dataTypeArray = new value.byteType(buffer.buffer, buffer.byteOffset, buffer.byteLength / bytesPerElement);
                        let num = buffer.byteLength / stride;
                        let dataArr;
                        let dataIndex = 0;
                        if (factSize === 1) {
                            dataArr = new Array(num);
                            if (size === 1 || size === 2 || size === 3 || size === 4) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = numCachData.getData();
                                    data.v = dataTypeArray[byteIndex];
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawArrays 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 2) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec2Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2 || size === 3 || size === 4) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec2Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawElements 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 3) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0, 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], 0);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 3 || size === 4) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec3Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawElements 暂时无法识别的数量");
                            }
                        }
                        else if (factSize === 4) {
                            dataArr = new Array(num);
                            if (size === 1) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], 0, 0, 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 2) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], 0, 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 3) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2], 1);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else if (size === 4) {
                                for (let i = offsetCount; i < eboBufferData.length; i++) {
                                    let element = eboBufferData[i];
                                    let elementIndex = value.offset + element * stride;
                                    let byteIndex = elementIndex / bytesPerElement;
                                    let data = cpuCachData.vec4Data.getData();
                                    data.set_Vn(dataTypeArray[byteIndex], dataTypeArray[byteIndex + 1], dataTypeArray[byteIndex + 2], dataTypeArray[byteIndex + 3]);
                                    dataArr[dataIndex++] = data;
                                }
                            }
                            else {
                                debugger;
                                console.error("drawElements 暂时无法识别的数量");
                            }
                        }
                        else {
                            debugger;
                            console.error("drawElements 暂时无法识别的数量");
                        }
                        attributeCount = Math.min(dataArr.length, attributeCount);
                        cachVboAttributeDatas.set(name, dataArr);
                    }
                    else {
                        renderError("this._gameGl.INVALID_OPERATION  " + this._gameGl.INVALID_VALUE + " in drawElements ");
                    }
                }
            }
        });
        // 其实这里是不是并不需要读取那么多的节点 只需要读取count的节点数就可以了
        let endIndex = Math.min(count, attributeCount);
        this._cachWriteData = new RenderModel_1.CachWriteData(mode, 0, endIndex, cachVboAttributeDatas);
        this._customDraw(mode, 0, endIndex, cachVboAttributeDatas);
    }
    /**继续之前没渲染完的 */
    customContinueDraw() {
        if (this._cachWriteData) {
            this._customDraw(this._cachWriteData.mode, this._cachWriteData.beginIndex, this._cachWriteData.endIndex, this._cachWriteData.cachVboAttributeDatas);
        }
    }
    customIsDrawOver() {
        return !this._cachWriteData;
    }
    _customDraw(mode, beginIndex, endIndex, cachVboAttributeDatas) {
        let beginDrawTime = performance.now();
        let drawOver = false;
        switch (mode) {
            case this._gameGl.POINTS:
                console.error("POINTS 类型未实现");
                break;
            case this._gameGl.LINE_STRIP:
                console.error("LINE_STRIP 类型未实现");
                break;
            case this._gameGl.LINE_LOOP:
                console.error("LINE_LOOP 类型未实现");
                break;
            case this._gameGl.LINES:
                console.error("LINES 类型未实现");
                break;
            case this._gameGl.TRIANGLE_STRIP:
            case this._gameGl.TRIANGLE_FAN:
            case this._gameGl.TRIANGLES:
                let linkVertexShader = this._useProgram.linkVertexShader;
                let attributeData = linkVertexShader.attributeData;
                let cachGlPositions = new Array();
                let cachInterpolateDatas = new Array();
                let f1 = (this._zFar - this._zNear) / 2;
                let f2 = (this._zFar + this._zNear) / 2;
                let triangleVec = new Array(3);
                let interpolateData = new Array(3);
                for (let t = 0; t < 3; t++) {
                    interpolateData[t] = linkVertexShader.varyingData.factoryCreate();
                }
                let index = beginIndex;
                do {
                    renderVertxPipeCachData.clear();
                    BuiltinData_1.clearShaderCachData();
                    for (let t = 0; t < 3; t++) {
                        let nowTriIndex = index + t;
                        if (mode == this._gameGl.TRIANGLE_FAN && t === 0) {
                            nowTriIndex = 0;
                        }
                        let glPData = cachGlPositions[nowTriIndex];
                        if (glPData) {
                            triangleVec[t] = glPData;
                            interpolateData[t] = cachInterpolateDatas[nowTriIndex];
                        }
                        else {
                            cachVboAttributeDatas.forEach((data, name) => {
                                attributeData[name] = data[nowTriIndex];
                            });
                            BuiltinVar_1.gl_Position.set_Vn(0, 0, 0, 0);
                            linkVertexShader.main();
                            // w除法
                            let glPos = renderVertxPipeCachData.vec4Data.getData();
                            glPos.set_V4(BuiltinVar_1.gl_Position);
                            let wFactor = 1 / glPos.w;
                            glPos.x *= wFactor;
                            glPos.y *= wFactor;
                            glPos.z *= wFactor;
                            // glPos.w *= wFactor
                            //视口变化
                            glPos.x = 0.5 * this._viewPort.width * (glPos.x + 1) + this._viewPort.x;
                            glPos.y = 0.5 * this._viewPort.height * (glPos.y + 1) + this._viewPort.y;
                            // 计算公式为Zw = (f-n)*Zd/2+(n+f)/2。
                            glPos.z = glPos.z * f1 + f2;
                            triangleVec[t] = glPos;
                            linkVertexShader.varyingData.copy(interpolateData[t]);
                        }
                    }
                    let isCull = false;
                    //如果开启面裁剪的话
                    if (this._openCullFace) {
                        if (this._nowCullFaceType === this._gameGl.FRONT_AND_BACK) {
                            isCull = true;
                        }
                        else {
                            let v01 = renderVertxPipeCachData.vec3Data.getData();
                            let v12 = renderVertxPipeCachData.vec3Data.getData();
                            BuiltinData_1.Vec3Data.subtract(v01, triangleVec[1], triangleVec[0]);
                            BuiltinData_1.Vec3Data.subtract(v12, triangleVec[2], triangleVec[1]);
                            let crossData = renderVertxPipeCachData.vec3Data.getData();
                            BuiltinData_1.Vec3Data.cross(crossData, v01, v12);
                            // webgl是左手 z指向屏幕内 顺时针的话z是指向外面的 为负
                            if (this._nowCullFaceType === this._gameGl.FRONT) {
                                /**裁剪正面 */
                                if (this._nowFrontType == this._gameGl.CW) {
                                    if (crossData.z < 0) {
                                        isCull = true;
                                    }
                                }
                                else {
                                    if (crossData.z > 0) {
                                        isCull = true;
                                    }
                                }
                            }
                            else {
                                /**裁剪背面 */
                                if (this._nowFrontType == this._gameGl.CW) {
                                    if (crossData.z > 0) {
                                        isCull = true;
                                    }
                                }
                                else {
                                    if (crossData.z < 0) {
                                        isCull = true;
                                    }
                                }
                            }
                        }
                    }
                    if (!isCull) {
                        this._customRasterizeTriangle(triangleVec, interpolateData);
                    }
                    if (mode === this._gameGl.TRIANGLES) {
                        index += 3;
                        if (index >= endIndex) {
                            drawOver = true;
                            break;
                        }
                    }
                    else {
                        if (index + 3 >= endIndex) {
                            drawOver = true;
                            break;
                        }
                        index++;
                    }
                    if (this._customRenderTime > 0) {
                        if (performance.now() - beginDrawTime > this._customRenderTime) {
                            break;
                        }
                    }
                } while (true);
                if (drawOver) {
                    this._cachWriteData = null;
                }
                else {
                    this._cachWriteData.beginIndex = index;
                }
                break;
        }
        this.render();
    }
    render() {
        if (this._canvars2D) {
            let nowFrameBuffer = this.customGetNowFramebuffer();
            // 非系统framebuffer是离屏渲染
            if (nowFrameBuffer === this._systemFrameBuffer) {
                let systemWriteFramebuffer = this.customGetNowColorBuffer();
                let renderSize = this.customGetNowRenderSize();
                let height = renderSize.y;
                let width = renderSize.x;
                let imageBuffer = new Uint32Array(systemWriteFramebuffer);
                let index = Math.floor(height / 2);
                for (let x = 0; x < width; x++) {
                    for (let i = 0; i < index; i++) {
                        let swapIndex1 = x + (height - i - 1) * width;
                        let swapIndex2 = x + i * width;
                        let tmp = imageBuffer[swapIndex1];
                        imageBuffer[swapIndex1] = imageBuffer[swapIndex2];
                        imageBuffer[swapIndex2] = tmp;
                    }
                }
                let imageData = new ImageData(new Uint8ClampedArray(imageBuffer.buffer), renderSize.x, renderSize.y);
                this._canvars2D.putImageData(imageData, 0, 0);
            }
        }
    }
    /**采样 */
    customSampler2D(texIndex, uv) {
        // texIndex应该是对应的纹理单元
        let textureUnit = this._textureUnit.get(texIndex);
        let color = BuiltinData_1.builtinCachData.vec4Data.getData();
        color.set_Vn(0, 0, 0, 0);
        if (textureUnit) {
            let textureData = textureUnit.get(this._gameGl.TEXTURE_2D);
            if (textureData) {
                // 怎么判断纹理大还是还是小呢
                // 先不管图片大小 统一用LINEAR
                let texelMipmapData = textureData.texelsDatas[0].texelMipmapData;
                let texBufferData = texelMipmapData.get(0);
                let buffer = texBufferData.bufferData;
                let wrapS = textureData.parameter.get(this._gameGl.TEXTURE_WRAP_S);
                let wrapT = textureData.parameter.get(this._gameGl.TEXTURE_WRAP_T);
                let magFilter = textureData.parameter.get(this._gameGl.TEXTURE_MAG_FILTER);
                let minFilter = textureData.parameter.get(this._gameGl.TEXTURE_MIN_FILTER);
                let sampleX = uv.x;
                if (sampleX < 0 || sampleX >= 1) {
                    if (wrapS === this._gameGl.REPEAT) {
                        if (sampleX < 0) {
                            sampleX += Math.ceil(-sampleX);
                        }
                        else {
                            sampleX -= Math.floor(sampleX);
                        }
                    }
                    else if (wrapS === this._gameGl.CLAMP_TO_EDGE) {
                        sampleX = lodash_1.clamp(sampleX, 0, 1);
                    }
                    else if (wrapS === this._gameGl.MIRRORED_REPEAT) {
                        console.error("MIRRORED_REPEAT 暂未实现");
                    }
                }
                let sampleY = uv.y;
                if (sampleY < 0 || sampleY >= 1) {
                    if (wrapT === this._gameGl.REPEAT) {
                        if (sampleY < 0) {
                            sampleY += Math.ceil(-sampleY);
                        }
                        else {
                            sampleY -= Math.floor(sampleY);
                        }
                    }
                    else if (wrapT === this._gameGl.CLAMP_TO_EDGE) {
                        sampleY = lodash_1.clamp(sampleY, 0, 1);
                    }
                    else if (wrapT === this._gameGl.MIRRORED_REPEAT) {
                        console.error("MIRRORED_REPEAT 暂未实现");
                    }
                }
                // 有可能将动作数据存入纹理中 此时应该配合使用
                // 用nearst读取
                if (magFilter === this._gameGl.NEAREST && minFilter === this._gameGl.NEAREST) {
                    let texWidth = texBufferData.width;
                    let texHeight = texBufferData.height;
                    let uImg = Math.floor(sampleX * texWidth + 0.5);
                    let vImg = Math.floor(sampleY * texHeight + 0.5);
                    let index = (uImg + vImg * texWidth) * 4;
                    color.x = buffer[index] / 255;
                    color.y = buffer[index + 1] / 255;
                    color.z = buffer[index + 2] / 255;
                    color.w = buffer[index + 3] / 255;
                    return color;
                }
                else {
                    let texWidth = texBufferData.width;
                    let texHeight = texBufferData.height;
                    let factSampleX = sampleX * texWidth;
                    let factSampleY = sampleY * texHeight;
                    let uImg;
                    let vImg;
                    let searchX = Math.floor(factSampleX + 0.5);
                    let searchY = Math.floor(factSampleY + 0.5);
                    for (let x = 0; x < 2; x++) {
                        uImg = lodash_1.clamp(searchX - x, 0, texWidth - 1);
                        for (let y = 0; y < 2; y++) {
                            vImg = lodash_1.clamp(searchY - y, 0, texHeight - 1);
                            let index = (uImg + vImg * texWidth) * 4;
                            color.x += buffer[index] / 1020;
                            color.y += buffer[index + 1] / 1020;
                            color.z += buffer[index + 2] / 1020;
                            color.w += buffer[index + 3] / 1020;
                        }
                    }
                    return color;
                }
            }
        }
        color.set_Vn(1, 1, 1, 1);
        return color;
    }
    customGetNowFramebuffer() {
        let nowFrameBuffer = this._nowUseFramebufferObject;
        if (!nowFrameBuffer) {
            nowFrameBuffer = this._systemFrameBuffer;
        }
        return nowFrameBuffer;
    }
    customGetRenderTexBuf(attachPoint, target, typeArray) {
        let texelData = null;
        if (target === this._gameGl.TEXTURE_2D) {
            texelData = attachPoint.texelsDatas[0];
        }
        else {
            texelData = attachPoint.texelsDatas[this._cubeTexIndex.get(target)];
        }
        let texBufferData = texelData.texelMipmapData.get(0);
        return new typeArray(texBufferData.bufferData.buffer, texBufferData.bufferData.byteOffset, texBufferData.bufferData.byteLength / typeArray.BYTES_PER_ELEMENT);
    }
    customGetNowRenderSize() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.colorAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
            let colorAttachPoint = nowFrameBuffer.colorAttachPoint;
            let size = cpuCachData.vec2Data.getData();
            size.x = colorAttachPoint.width;
            size.y = colorAttachPoint.height;
            return size;
        }
        else {
            let attachPoint = nowFrameBuffer.colorAttachPoint;
            let target = nowFrameBuffer.colorTextureTarget;
            let texelData = null;
            if (target === this._gameGl.TEXTURE_2D) {
                texelData = attachPoint.texelsDatas[0];
            }
            else {
                texelData = attachPoint.texelsDatas[this._cubeTexIndex.get(target)];
            }
            let texBufferData = texelData.texelMipmapData.get(0);
            let size = cpuCachData.vec2Data.getData();
            size.x = texBufferData === null || texBufferData === void 0 ? void 0 : texBufferData.width;
            size.y = texBufferData === null || texBufferData === void 0 ? void 0 : texBufferData.height;
            return size;
        }
    }
    customGetNowColorBuffer() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.colorAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
            let colorAttachPoint = nowFrameBuffer.colorAttachPoint;
            return colorAttachPoint.bufferData;
        }
        else {
            return this.customGetRenderTexBuf(nowFrameBuffer.colorAttachPoint, nowFrameBuffer.colorTextureTarget, Uint32Array);
        }
    }
    customGetNowColorIsTex() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.colorAttachPoint) {
            if (nowFrameBuffer.colorAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    // 除了颜色 其它附加render都可能是空的
    customGetNowDepthBuffer() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.depthAttachPoint) {
            if (nowFrameBuffer.depthAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
                let depthAttachPoint = nowFrameBuffer.depthAttachPoint;
                return depthAttachPoint.bufferData;
            }
            else {
                return this.customGetRenderTexBuf(nowFrameBuffer.depthAttachPoint, nowFrameBuffer.depthTextureTarget, Float32Array);
            }
        }
        return null;
    }
    customGetNowDepthIsTex() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.depthAttachPoint) {
            if (nowFrameBuffer.depthAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    // 除了颜色 其它附加render都可能是空的
    customGetNowStencilBuffer() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.stencilAttachPoint) {
            if (nowFrameBuffer.stencilAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
                let stencilAttachPoint = nowFrameBuffer.stencilAttachPoint;
                return stencilAttachPoint.bufferData;
            }
            else {
                // 如果是图的话不知道对于rgba占1个字节会不会有问题
                debugger;
                return this.customGetRenderTexBuf(nowFrameBuffer.stencilAttachPoint, nowFrameBuffer.stencilTextureTarget, Uint8Array);
            }
        }
        else {
            return null;
        }
    }
    customGetNowStencilIsTex() {
        let nowFrameBuffer = this.customGetNowFramebuffer();
        if (nowFrameBuffer.stencilAttachPoint) {
            if (nowFrameBuffer.stencilAttachPoint instanceof PipelineData_1.WebGLRenderbufferObject) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    /**和gl的实现还是不一样 不清楚哪里出问题了 */
    /*立方体纹理采样*/
    customSamplerCube(texIndex, uv3D) {
        // texIndex应该是对应的纹理单元
        let textureUnit = this._textureUnit.get(texIndex);
        let color = BuiltinData_1.builtinCachData.vec4Data.getData();
        color.set_Vn(0, 0, 0, 0);
        if (textureUnit) {
            let textureData = textureUnit.get(this._gameGl.TEXTURE_CUBE_MAP);
            if (textureData) {
                // 怎么判断纹理大还是还是小呢
                // 先不管图片大小 统一用LINEAR
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X, 0)
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X, 1)
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y, 2)
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 3)
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z, 4)
                // this._cubeTexIndex.set(this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 5)
                let factx = uv3D.x;
                let facty = uv3D.y;
                let factz = uv3D.z;
                let absX = abs(factx);
                let absY = abs(facty);
                let absZ = abs(factz);
                let mag = max(max(absX, absY), absZ);
                // 相交的时间
                let exitT = 1 / mag;
                // 交点x,y,z坐标
                let enterX = factx * exitT;
                let enterY = facty * exitT;
                let enterZ = factz * exitT;
                let texelMipmapData = null;
                let uv = BuiltinData_1.builtinCachData.vec2Data.getData();
                if (mag === absX) {
                    if (factx > 0) {
                        // TEXTURE_CUBE_MAP_POSITIVE_X
                        texelMipmapData = textureData.texelsDatas[0].texelMipmapData;
                        uv.set_Vn(1 - (enterZ + 1) / 2, (enterY + 1) / 2);
                    }
                    else {
                        // TEXTURE_CUBE_MAP_NEGATIVE_X
                        texelMipmapData = textureData.texelsDatas[1].texelMipmapData;
                        uv.set_Vn((enterZ + 1) / 2, (enterY + 1) / 2);
                    }
                }
                else if (mag === absY) {
                    if (facty > 0) {
                        // TEXTURE_CUBE_MAP_POSITIVE_Y
                        texelMipmapData = textureData.texelsDatas[2].texelMipmapData;
                        uv.set_Vn((enterX + 1) / 2, 1 - (enterZ + 1) / 2);
                    }
                    else {
                        // TEXTURE_CUBE_MAP_NEGATIVE_Y
                        texelMipmapData = textureData.texelsDatas[3].texelMipmapData;
                        uv.set_Vn((enterX + 1) / 2, (enterZ + 1) / 2);
                    }
                }
                else {
                    if (factz > 0) {
                        // TEXTURE_CUBE_MAP_POSITIVE_Z
                        texelMipmapData = textureData.texelsDatas[4].texelMipmapData;
                        uv.set_Vn((enterX + 1) / 2, (enterY + 1) / 2);
                    }
                    else {
                        // TEXTURE_CUBE_MAP_NEGATIVE_Z
                        texelMipmapData = textureData.texelsDatas[5].texelMipmapData;
                        uv.set_Vn(1 - (enterX + 1) / 2, (enterY + 1) / 2);
                    }
                }
                // let texelMipmapData = textureData.texelsDatas![0].texelMipmapData
                let texBufferData = texelMipmapData.get(0);
                let buffer = texBufferData.bufferData;
                let wrapS = textureData.parameter.get(this._gameGl.TEXTURE_WRAP_S);
                let wrapT = textureData.parameter.get(this._gameGl.TEXTURE_WRAP_T);
                let sampleX = uv.x;
                if (sampleX < 0 || sampleX >= 1) {
                    if (wrapS === this._gameGl.REPEAT) {
                        if (sampleX < 0) {
                            sampleX += Math.ceil(-sampleX);
                        }
                        else {
                            sampleX -= Math.floor(sampleX);
                        }
                    }
                    else if (wrapS === this._gameGl.CLAMP_TO_EDGE) {
                        sampleX = lodash_1.clamp(sampleX, 0, 1);
                    }
                    else if (wrapS === this._gameGl.MIRRORED_REPEAT) {
                        console.error("MIRRORED_REPEAT 暂未实现");
                    }
                }
                let sampleY = uv.y;
                if (sampleY < 0 || sampleY >= 1) {
                    if (wrapT === this._gameGl.REPEAT) {
                        if (sampleY < 0) {
                            sampleY += Math.ceil(-sampleY);
                        }
                        else {
                            sampleY -= Math.floor(sampleY);
                        }
                    }
                    else if (wrapT === this._gameGl.CLAMP_TO_EDGE) {
                        sampleY = lodash_1.clamp(sampleY, 0, 1);
                    }
                    else if (wrapT === this._gameGl.MIRRORED_REPEAT) {
                        console.error("MIRRORED_REPEAT 暂未实现");
                    }
                }
                let texWidth = texBufferData.width;
                let texHeight = texBufferData.height;
                let factSampleX = sampleX * texWidth;
                let factSampleY = sampleY * texHeight;
                let uImg;
                let vImg;
                let searchX = Math.floor(factSampleX + 0.5);
                let searchY = Math.floor(factSampleY + 0.5);
                for (let x = 0; x < 2; x++) {
                    uImg = lodash_1.clamp(searchX - x, 0, texWidth - 1);
                    for (let y = 0; y < 2; y++) {
                        vImg = lodash_1.clamp(searchY - y, 0, texHeight - 1);
                        let index = (uImg + vImg * texWidth) * 4;
                        color.x += buffer[index] / 1020;
                        color.y += buffer[index + 1] / 1020;
                        color.z += buffer[index + 2] / 1020;
                        color.w += buffer[index + 3] / 1020;
                    }
                }
                return color;
                // let uImg = Math.floor(sampleX * texWidth + 0.5)
                // let vImg = Math.floor(sampleY * texHeight + 0.5)
                // let index = (uImg + vImg * texWidth) * 4
                // return new Vec3Data(buffer[index] / 255, buffer[index + 1] / 255, buffer[index + 2] / 255, buffer[index + 3] / 255)
            }
        }
        color.set_Vn(1, 1, 1, 1);
        return color;
    }
    _customRasterizeTriangle(triangleVec, interpolateData) {
        let fragShader = this._useProgram.linkFragmentShader;
        // 求出三角形的包围盒
        let minX = Number.MAX_VALUE;
        let minY = Number.MAX_VALUE;
        let maxX = Number.MIN_VALUE;
        let maxY = Number.MIN_VALUE;
        triangleVec.forEach((vec) => {
            maxX = Math.max(vec.x, maxX);
            maxY = Math.max(vec.y, maxY);
            minX = Math.min(vec.x, minX);
            minY = Math.min(vec.y, minY);
        });
        maxX = Math.ceil(maxX);
        maxY = Math.ceil(maxY);
        minX = Math.floor(minX);
        minY = Math.floor(minY);
        let writeColorFramebuffer = this.customGetNowColorBuffer();
        let colorSize = this.customGetNowRenderSize();
        let writeDepthBuffer = this.customGetNowDepthBuffer();
        let viewMaxWidth = Math.min(this._viewPort.x + this._viewPort.width - 1, colorSize.x - 1);
        let viewMinWidth = this._viewPort.x;
        let viewMaxHeight = Math.min(this._viewPort.y + this._viewPort.height - 1, colorSize.y - 1);
        let viewMinHeight = this._viewPort.y;
        minX = Math.max(viewMinWidth, minX);
        minY = Math.max(viewMinHeight, minY);
        maxX = Math.min(viewMaxWidth, maxX);
        maxY = Math.min(viewMaxHeight, maxY);
        let x0 = triangleVec[0].x;
        let y0 = triangleVec[0].y;
        let x1 = triangleVec[1].x;
        let y1 = triangleVec[1].y;
        let x2 = triangleVec[2].x;
        let y2 = triangleVec[2].y;
        let z0 = triangleVec[0].z;
        let z1 = triangleVec[1].z;
        let z2 = triangleVec[0].z;
        let w0 = triangleVec[0].w;
        let w1 = triangleVec[1].w;
        let w2 = triangleVec[0].w;
        // todo
        // 可用于优化的逻辑
        // 线段的表示 pBegin(xB,yB) pEnd(xE,yE) 线段上的任意一点 p(xB + t(xE - xB),yB + t(yE - yB)) t在0到1之间
        // 那么这时候对于任意xI,yI坐标 xI在minX到maxX之间 找到和线段的交点 那么 t应该为 (xI - xB)/(xE - xB)
        // 如果xE - xB 为0 那么当xI = xB的时候 交点为一条线为yB到yE
        // 如果xE - xB部位0 那么可以求出t的数值 进而求出yI的数值
        // 重复以上步骤对三角形的3条线段求交点 即可求出在xI上的上下限
        let preData = GeometricOperations_1.GeometricOperations.preComputeBarycentric2DFactor(x0, x1, x2, y0, y1, y2);
        let varyingData = fragShader.varyingData;
        let debugPos = null;
        let frameBuffer = new Uint8ClampedArray(writeColorFramebuffer.buffer, writeColorFramebuffer.byteOffset, writeColorFramebuffer.byteLength);
        for (let x = minX; x <= maxX; x++) {
            let triangleBeginY = -1;
            let triangleEndY = -1;
            for (let y = minY; y <= maxY; y++) {
                // let [alpha, beta, gamma] = GeometricOperations.computeBarycentric2D(x + 0.5, y + 0.5, x0, x1, x2, y0, y1, y2)
                let [alpha, beta, gamma] = GeometricOperations_1.GeometricOperations.computeBarycentric2DByPre(x + 0.5, y + 0.5, preData);
                if (Math.abs(alpha + beta + gamma) - 1 < 1e-6) {
                    if (alpha >= 0 && beta >= 0 && gamma >= 0) {
                        triangleBeginY = y;
                        break;
                    }
                }
            }
            if (triangleBeginY >= 0) {
                for (let y = maxY; y > triangleBeginY; y--) {
                    // let [alpha, beta, gamma] = GeometricOperations.computeBarycentric2D(x + 0.5, y + 0.5, x0, x1, x2, y0, y1, y2)
                    let [alpha, beta, gamma] = GeometricOperations_1.GeometricOperations.computeBarycentric2DByPre(x + 0.5, y + 0.5, preData);
                    if (Math.abs(alpha + beta + gamma) - 1 < 1e-6) {
                        if (alpha >= 0 && beta >= 0 && gamma >= 0) {
                            triangleEndY = y;
                            break;
                        }
                    }
                }
                if (triangleEndY < 0) {
                    triangleEndY = triangleBeginY;
                }
                for (let y = triangleBeginY; y <= triangleEndY; y++) {
                    renderFragPipeCachData.clear();
                    let v2 = renderFragPipeCachData.vec2Data.getData();
                    v2.set_Vn(x, y);
                    if (this._openScissorTest && !this._scissorRect.contains(v2)) {
                        continue;
                    }
                    // let [alpha, beta, gamma] = GeometricOperations.computeBarycentric2D(x + 0.5, y + 0.5, x0, x1, x2, y0, y1, y2)
                    let [alpha, beta, gamma] = GeometricOperations_1.GeometricOperations.computeBarycentric2DByPre(x + 0.5, y + 0.5, preData);
                    let canWrite = true;
                    x = Math.floor(x);
                    y = Math.floor(y);
                    // 不在反写
                    let index = colorSize.x * y + x;
                    if (writeDepthBuffer && this._openDepthTest) {
                        let w_reciprocal = 1.0 / (alpha / w0 + beta / w1 + gamma / w2);
                        let z_interpolated = (alpha * z0) / w0 + (beta * z1) / w1 + (gamma * z2) / w2;
                        z_interpolated *= w_reciprocal;
                        let depth = writeDepthBuffer[index];
                        let depthJudgeFunc = this._depthJudgeFunc;
                        if (depthJudgeFunc == this._gameGl.NEVER) {
                            canWrite = false;
                        }
                        else if (depthJudgeFunc == this._gameGl.LESS) {
                            canWrite = z_interpolated < depth;
                        }
                        else if (depthJudgeFunc == this._gameGl.EQUAL) {
                            canWrite = z_interpolated == depth;
                        }
                        else if (depthJudgeFunc == this._gameGl.LEQUAL) {
                            canWrite = z_interpolated <= depth;
                        }
                        else if (depthJudgeFunc == this._gameGl.GREATER) {
                            canWrite = z_interpolated > depth;
                        }
                        else if (depthJudgeFunc == this._gameGl.GEQUAL) {
                            canWrite = z_interpolated >= depth;
                        }
                        else if (depthJudgeFunc == this._gameGl.ALWAYS) {
                            canWrite = true;
                        }
                        else {
                            console.error("error depthJudgeFunc ");
                        }
                        if (canWrite && this._depthWriteEnable) {
                            writeDepthBuffer[index] = z_interpolated;
                        }
                    }
                    if (canWrite) {
                        // if (debugPos && debugPos.x == x && debugPos.y == y) {
                        //     debugger
                        // }
                        // if (x === 386 && y === 478) {
                        //     debugger
                        // }
                        index *= 4;
                        BuiltinData_1.clearShaderCachData();
                        this._customInterpolated(varyingData, interpolateData, alpha, beta, gamma);
                        BuiltinVar_1.custom_isDiscard.v = false;
                        BuiltinVar_1.gl_FragColor.set_Vn(NaN, NaN, NaN, NaN);
                        fragShader.main();
                        if (!BuiltinVar_1.custom_isDiscard.v) {
                            let color;
                            if (!isNaN(BuiltinVar_1.gl_FragColor.x)) {
                                color = BuiltinVar_1.gl_FragColor;
                            }
                            else {
                                // 关于gl_FragData 的理解还不足 不太清楚是写入那些通道里
                                color = BuiltinVar_1.gl_FragData[0];
                            }
                            color.x = lodash_1.clamp(color.x, 0, 1);
                            color.y = lodash_1.clamp(color.y, 0, 1);
                            color.z = lodash_1.clamp(color.z, 0, 1);
                            color.w = lodash_1.clamp(color.w, 0, 1);
                            if (this._openBlend) {
                                let destColor = renderFragPipeCachData.vec4Data.getData();
                                destColor.set_Vn(frameBuffer[index], frameBuffer[index + 1], frameBuffer[index + 2], frameBuffer[index + 3]);
                                BuiltinData_1.Vec4Data.multiplyScalar(destColor, destColor, 1 / 255);
                                let srcComputerColor = renderFragPipeCachData.vec4Data.getData();
                                let destComputerColor = renderFragPipeCachData.vec4Data.getData();
                                if (this._rgbSrcBlendFunc === this._gameGl.ZERO) {
                                    srcComputerColor.x = 0;
                                    srcComputerColor.y = 0;
                                    srcComputerColor.z = 0;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE) {
                                    srcComputerColor.x = color.x;
                                    srcComputerColor.y = color.y;
                                    srcComputerColor.z = color.z;
                                    // 不变
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.SRC_COLOR) {
                                    srcComputerColor.x = color.x * color.x;
                                    srcComputerColor.y = color.y * color.y;
                                    srcComputerColor.z = color.z * color.z;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_SRC_COLOR) {
                                    srcComputerColor.x = color.x * (1 - color.x);
                                    srcComputerColor.y = color.y * (1 - color.y);
                                    srcComputerColor.z = color.z * (1 - color.z);
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.DST_COLOR) {
                                    srcComputerColor.x = color.x * destColor.x;
                                    srcComputerColor.y = color.y * destColor.y;
                                    srcComputerColor.z = color.z * destColor.z;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_DST_COLOR) {
                                    srcComputerColor.x = color.x * (1 - destColor.x);
                                    srcComputerColor.y = color.y * (1 - destColor.y);
                                    srcComputerColor.z = color.z * (1 - destColor.z);
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.SRC_ALPHA) {
                                    let factor = color.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_SRC_ALPHA) {
                                    let factor = 1 - color.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.DST_ALPHA) {
                                    let factor = destColor.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_DST_ALPHA) {
                                    let factor = 1 - destColor.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.CONSTANT_COLOR) {
                                    srcComputerColor.x = color.x * this._blendFactorColor.x;
                                    srcComputerColor.y = color.y * this._blendFactorColor.y;
                                    srcComputerColor.z = color.z * this._blendFactorColor.z;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_COLOR) {
                                    srcComputerColor.x = color.x * (1 - this._blendFactorColor.x);
                                    srcComputerColor.y = color.y * (1 - this._blendFactorColor.y);
                                    srcComputerColor.z = color.z * (1 - this._blendFactorColor.z);
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.CONSTANT_ALPHA) {
                                    let factor = this._blendFactorColor.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
                                    let factor = 1 - this._blendFactorColor.w;
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                else if (this._rgbSrcBlendFunc === this._gameGl.SRC_ALPHA_SATURATE) {
                                    let factor = Math.min(color.w, 1 - destColor.w);
                                    srcComputerColor.x = color.x * factor;
                                    srcComputerColor.y = color.y * factor;
                                    srcComputerColor.z = color.z * factor;
                                }
                                if (this._alphaSrcBlendFunc === this._gameGl.ZERO) {
                                    srcComputerColor.w = 0;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE) {
                                    srcComputerColor.w = color.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.SRC_COLOR) {
                                    srcComputerColor.w = color.w * color.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_SRC_COLOR) {
                                    srcComputerColor.w = color.w * (1 - color.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.DST_COLOR) {
                                    srcComputerColor.w = color.w * destColor.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_DST_COLOR) {
                                    srcComputerColor.w = color.w * (1 - destColor.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.SRC_ALPHA) {
                                    srcComputerColor.w = color.w * color.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_SRC_ALPHA) {
                                    srcComputerColor.w = color.w * (1 - color.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.DST_ALPHA) {
                                    srcComputerColor.w = color.w * destColor.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_DST_ALPHA) {
                                    srcComputerColor.w = color.w * (1 - destColor.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.CONSTANT_COLOR) {
                                    srcComputerColor.w = color.w * this._blendFactorColor.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_COLOR) {
                                    srcComputerColor.w = color.w * (1 - this._blendFactorColor.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.CONSTANT_ALPHA) {
                                    srcComputerColor.w = color.w * this._blendFactorColor.w;
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
                                    srcComputerColor.w = color.w * (1 - this._blendFactorColor.w);
                                }
                                else if (this._alphaSrcBlendFunc === this._gameGl.SRC_ALPHA_SATURATE) {
                                    srcComputerColor.z = color.w;
                                }
                                if (this._rgbDestBlendFunc === this._gameGl.ZERO) {
                                    destComputerColor.x = 0;
                                    destComputerColor.y = 0;
                                    destComputerColor.z = 0;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE) {
                                    destComputerColor.x = destColor.x;
                                    destComputerColor.y = destColor.y;
                                    destComputerColor.z = destColor.z;
                                    // 不变
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.SRC_COLOR) {
                                    destComputerColor.x = color.x * destColor.x;
                                    destComputerColor.y = color.y * destColor.y;
                                    destComputerColor.z = color.z * destColor.z;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_SRC_COLOR) {
                                    destComputerColor.x = destColor.x * (1 - color.x);
                                    destComputerColor.y = destColor.y * (1 - color.y);
                                    destComputerColor.z = destColor.z * (1 - color.z);
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.DST_COLOR) {
                                    destComputerColor.x = destColor.x * destColor.x;
                                    destComputerColor.y = destColor.y * destColor.y;
                                    destComputerColor.z = destColor.z * destColor.z;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_DST_COLOR) {
                                    destComputerColor.x = destColor.x * (1 - destColor.x);
                                    destComputerColor.y = destColor.y * (1 - destColor.y);
                                    destComputerColor.z = destColor.z * (1 - destColor.z);
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.SRC_ALPHA) {
                                    let factor = color.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_SRC_ALPHA) {
                                    let factor = 1 - color.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.DST_ALPHA) {
                                    let factor = destColor.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_DST_ALPHA) {
                                    let factor = 1 - destColor.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.CONSTANT_COLOR) {
                                    destComputerColor.x = destColor.x * this._blendFactorColor.x;
                                    destComputerColor.y = destColor.y * this._blendFactorColor.y;
                                    destComputerColor.z = destColor.z * this._blendFactorColor.z;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_COLOR) {
                                    destComputerColor.x = destColor.x * (1 - this._blendFactorColor.x);
                                    destComputerColor.y = destColor.y * (1 - this._blendFactorColor.y);
                                    destComputerColor.z = destColor.z * (1 - this._blendFactorColor.z);
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.CONSTANT_ALPHA) {
                                    let factor = this._blendFactorColor.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
                                    let factor = 1 - this._blendFactorColor.w;
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                else if (this._rgbDestBlendFunc === this._gameGl.SRC_ALPHA_SATURATE) {
                                    let factor = Math.min(color.w, 1 - destColor.w);
                                    destComputerColor.x = destColor.x * factor;
                                    destComputerColor.y = destColor.y * factor;
                                    destComputerColor.z = destColor.z * factor;
                                }
                                if (this._alphaDestBlendFunc === this._gameGl.ZERO) {
                                    destComputerColor.w = 0;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE) {
                                    destComputerColor.w = destColor.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.SRC_COLOR) {
                                    destComputerColor.w = destColor.w * color.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_SRC_COLOR) {
                                    destComputerColor.w = destColor.w * (1 - color.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.DST_COLOR) {
                                    destComputerColor.w = destColor.w * destColor.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_DST_COLOR) {
                                    destComputerColor.w = destColor.w * (1 - destColor.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.SRC_ALPHA) {
                                    destComputerColor.w = destColor.w * color.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_SRC_ALPHA) {
                                    destComputerColor.w = destColor.w * (1 - color.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.DST_ALPHA) {
                                    destComputerColor.w = destColor.w * destColor.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_DST_ALPHA) {
                                    destComputerColor.w = destColor.w * (1 - destColor.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.CONSTANT_COLOR) {
                                    destComputerColor.w = destColor.w * this._blendFactorColor.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_COLOR) {
                                    destComputerColor.w = destColor.w * (1 - this._blendFactorColor.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.CONSTANT_ALPHA) {
                                    destComputerColor.w = destColor.w * this._blendFactorColor.w;
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
                                    destComputerColor.w = destColor.w * (1 - this._blendFactorColor.w);
                                }
                                else if (this._alphaDestBlendFunc === this._gameGl.SRC_ALPHA_SATURATE) {
                                    destComputerColor.z = destColor.w;
                                }
                                if (this._rgbComputerBlendFunc === this._gameGl.FUNC_ADD) {
                                    color.x = srcComputerColor.x + destComputerColor.x;
                                    color.y = srcComputerColor.y + destComputerColor.y;
                                    color.z = srcComputerColor.z + destComputerColor.z;
                                }
                                else if (this._rgbComputerBlendFunc === this._gameGl.FUNC_SUBTRACT) {
                                    color.x = srcComputerColor.x - destComputerColor.x;
                                    color.y = srcComputerColor.y - destComputerColor.y;
                                    color.z = srcComputerColor.z - destComputerColor.z;
                                }
                                else if (this._rgbComputerBlendFunc === this._gameGl.FUNC_REVERSE_SUBTRACT) {
                                    color.x = destComputerColor.x - srcComputerColor.x;
                                    color.y = destComputerColor.y - srcComputerColor.y;
                                    color.z = destComputerColor.z - srcComputerColor.z;
                                }
                                if (this._alphaComputerBlendFunc === this._gameGl.FUNC_ADD) {
                                    color.w = srcComputerColor.w + destComputerColor.w;
                                }
                                else if (this._alphaComputerBlendFunc === this._gameGl.FUNC_SUBTRACT) {
                                    color.w = srcComputerColor.w - destComputerColor.w;
                                }
                                else if (this._alphaComputerBlendFunc === this._gameGl.FUNC_REVERSE_SUBTRACT) {
                                    color.w = destComputerColor.w - srcComputerColor.w;
                                }
                            }
                            // if (
                            //     color.x > 0.5 && color.x < 0.7 &&
                            //     color.y > 0.5 && color.y < 0.7 &&
                            //     color.z > 0.5 && color.z < 0.7 &&
                            //     this._frameBuffer[index + 1] == 150 &&
                            //     this._frameBuffer[index + 2] == 170
                            // ) {
                            //     debugger
                            // }
                            if (this._colorRWriteEnable) {
                                frameBuffer[index] = color.x * 255;
                            }
                            if (this._colorGWriteEnable) {
                                frameBuffer[index + 1] = color.y * 255;
                            }
                            if (this._colorBWriteEnable) {
                                frameBuffer[index + 2] = color.z * 255;
                            }
                            if (this._colorAWriteEnable) {
                                frameBuffer[index + 3] = color.w * 255;
                            }
                        }
                    }
                }
            }
        }
    }
    _customInterpolated(outvaryingData, interpolateData, alpha, beta, gamma) {
        let interpolateData0 = interpolateData[0];
        let interpolateData1 = interpolateData[1];
        let interpolateData2 = interpolateData[2];
        for (const iterator of interpolateData0.dataKeys.entries()) {
            let dataName = iterator[0];
            let typeName = iterator[1];
            if (typeName === this._gameGl.FLOAT || typeName === this._gameGl.INT) {
                let vec0 = interpolateData0[dataName];
                let vec1 = interpolateData1[dataName];
                let vec2 = interpolateData2[dataName];
                let interpolated = outvaryingData[dataName];
                if (!interpolated) {
                    continue;
                }
                interpolated.v = vec0.v * alpha + vec1.v * beta + vec2.v * gamma;
            }
            else if (typeName === this._gameGl.FLOAT_VEC2) {
                let vec0 = interpolateData0[dataName];
                let vec1 = interpolateData1[dataName];
                let vec2 = interpolateData2[dataName];
                let interpolated = outvaryingData[dataName];
                if (!interpolated) {
                    continue;
                }
                interpolated.x = vec0.x * alpha + vec1.x * beta + vec2.x * gamma;
                interpolated.y = vec0.y * alpha + vec1.y * beta + vec2.y * gamma;
            }
            else if (typeName === this._gameGl.FLOAT_VEC3) {
                let vec0 = interpolateData0[dataName];
                let vec1 = interpolateData1[dataName];
                let vec2 = interpolateData2[dataName];
                let interpolated = outvaryingData[dataName];
                if (!interpolated) {
                    continue;
                }
                interpolated.x = vec0.x * alpha + vec1.x * beta + vec2.x * gamma;
                interpolated.y = vec0.y * alpha + vec1.y * beta + vec2.y * gamma;
                interpolated.z = vec0.z * alpha + vec1.z * beta + vec2.z * gamma;
            }
            else if (typeName === this._gameGl.FLOAT_VEC4) {
                let vec0 = interpolateData0[dataName];
                let vec1 = interpolateData1[dataName];
                let vec2 = interpolateData2[dataName];
                let interpolated = outvaryingData[dataName];
                if (!interpolated) {
                    continue;
                }
                interpolated.x = vec0.x * alpha + vec1.x * beta + vec2.x * gamma;
                interpolated.y = vec0.y * alpha + vec1.y * beta + vec2.y * gamma;
                interpolated.z = vec0.z * alpha + vec1.z * beta + vec2.z * gamma;
                interpolated.w = vec0.w * alpha + vec1.w * beta + vec2.w * gamma;
            }
            else {
                debugger;
                console.error("暂未实现的插值方法");
            }
        }
    }
    // webgl是左手坐标系 z朝向屏幕里 所以如果是顺时针的话叉乘出来的结果应该是负数
    // 指定顺时针是正面还是逆时针是背面
    frontFace(mode) {
        // 顺时针是正面
        if (mode === this._gameGl.CW) {
            this._nowFrontType = mode;
        }
        else if (mode === this._gameGl.CCW) {
            this._nowFrontType = mode;
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in frontFace ");
        }
    }
    // 指定裁剪正面还是背面
    cullFace(mode) {
        // 顺时针是正面
        if (mode === this._gameGl.FRONT) {
            this._nowCullFaceType = mode;
        }
        else if (mode === this._gameGl.BACK) {
            this._nowCullFaceType = mode;
        }
        else if (mode === this._gameGl.FRONT_AND_BACK) {
            this._nowCullFaceType = mode;
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in cullFace ");
        }
    }
    enable(cap) {
        if (cap === this._gameGl.BLEND) {
            this._openBlend = true;
        }
        else if (cap === this._gameGl.CULL_FACE) {
            this._openCullFace = true;
        }
        else if (cap === this._gameGl.DEPTH_TEST) {
            this._openDepthTest = true;
        }
        else if (cap === this._gameGl.DITHER) {
            console.error("DITHER 还未实现");
        }
        else if (cap === this._gameGl.POLYGON_OFFSET_FILL) {
            console.error("POLYGON_OFFSET_FILL 还未实现");
        }
        else if (cap === this._gameGl.SAMPLE_ALPHA_TO_COVERAGE) {
            console.error("SAMPLE_ALPHA_TO_COVERAGE 还未实现");
        }
        else if (cap === this._gameGl.SAMPLE_COVERAGE) {
            console.error("SAMPLE_COVERAGE 还未实现");
        }
        else if (cap === this._gameGl.SCISSOR_TEST) {
            this._openScissorTest = true;
        }
        else if (cap === this._gameGl.STENCIL_TEST) {
            console.error("STENCIL_TEST 还未实现");
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in enable ");
        }
    }
    disable(cap) {
        if (cap === this._gameGl.BLEND) {
            this._openBlend = false;
        }
        else if (cap === this._gameGl.CULL_FACE) {
            this._openCullFace = false;
        }
        else if (cap === this._gameGl.DEPTH_TEST) {
            this._openDepthTest = false;
        }
        else if (cap === this._gameGl.DITHER) {
            console.error("DITHER 还未实现");
        }
        else if (cap === this._gameGl.POLYGON_OFFSET_FILL) {
            console.error("POLYGON_OFFSET_FILL 还未实现");
        }
        else if (cap === this._gameGl.SAMPLE_ALPHA_TO_COVERAGE) {
            console.error("SAMPLE_ALPHA_TO_COVERAGE 还未实现");
        }
        else if (cap === this._gameGl.SAMPLE_COVERAGE) {
            console.error("SAMPLE_COVERAGE 还未实现");
        }
        else if (cap === this._gameGl.SCISSOR_TEST) {
            this._openScissorTest = false;
        }
        else if (cap === this._gameGl.STENCIL_TEST) {
            console.error("STENCIL_TEST 还未实现");
        }
        else {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in disable ");
        }
    }
    pixelStorei(pname, param) {
        if (pname === this._gameGl.PACK_ALIGNMENT) {
            if (param !== 1 && param !== 2 && param !== 4 && param !== 8) {
                renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in pixelStorei");
            }
            this._pixelPackNum = param;
        }
        else if (pname === this._gameGl.UNPACK_ALIGNMENT) {
            if (param !== 1 && param !== 2 && param !== 4 && param !== 8) {
                renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in pixelStorei");
            }
            this._pixelUnPackNum = param;
        }
        else if (pname === this._gameGl.UNPACK_FLIP_Y_WEBGL) {
            this._unpackFilpY = param;
        }
        else if (pname === this._gameGl.UNPACK_PREMULTIPLY_ALPHA_WEBGL) {
            console.error("UNPACK_PREMULTIPLY_ALPHA_WEBGL 还未实现");
        }
        else if (pname === this._gameGl.UNPACK_COLORSPACE_CONVERSION_WEBGL) {
            console.error("UNPACK_COLORSPACE_CONVERSION_WEBGL 还未实现");
        }
    }
    createTexture() {
        let buffer = new PipelineData_1.CPUWebGLTexture(globalTextureIndex++);
        return buffer;
    }
    bindTexture(target, texture) {
        if (target === this._gameGl.TEXTURE_2D || target === this._gameGl.TEXTURE_CUBE_MAP) {
            let textureData = this._textureDataMap.get(texture.cachIndex);
            if (!textureData) {
                textureData = new PipelineData_1.WebGLTextureData(texture, target, this._gameGl, texture.cachIndex);
                this._textureDataMap.set(texture.cachIndex, textureData);
            }
            // 纹理创建后target 不能被修改
            if (textureData.glTarget !== target) {
                renderError("this._gameGl.GL_INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in bindTexture");
            }
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            if (activeTextureData) {
                let oldTextureData = activeTextureData.get(target);
                if (oldTextureData) {
                    oldTextureData.unBindTexUnit(this._nowActiveTextureUnit);
                }
                textureData.bindTexUnit(this._nowActiveTextureUnit);
                activeTextureData.set(target, textureData);
            }
            else {
                debugger;
                renderError("bindTexture 无法找对应单元的数据");
            }
        }
        else {
            renderError("其它类型暂未实现 in bindTexture");
        }
    }
    activeTexture(texture) {
        let textureNum = texture - this._gameGl.TEXTURE0;
        if (textureNum >= 0 && textureNum < this._textureUnit.size) {
            this._nowActiveTextureUnit = textureNum;
            console.log("this._nowActiveTextureUnit:" + this._nowActiveTextureUnit);
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in activeTexture");
        }
    }
    // (target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texImage2D(target, level, internalformat, width, height, border, format, type, pixels) {
        if (arguments.length === 6) {
            format = width;
            type = height;
            height = border.height;
            width = border.width;
            if (border) {
                if (border instanceof ImageBitmap) {
                    debugger;
                    console.error("暂时不支持ImageBitmap类型数据");
                }
                else if (border instanceof ImageData) {
                    pixels = border.data;
                }
                else if (border instanceof HTMLImageElement) {
                    let canvas = document.getElementById("texCanvas");
                    canvas.width = border.width;
                    canvas.height = border.height;
                    let cxt = canvas.getContext("2d");
                    cxt === null || cxt === void 0 ? void 0 : cxt.drawImage(border, 0, 0);
                    let imageData = cxt === null || cxt === void 0 ? void 0 : cxt.getImageData(0, 0, border.width, border.height);
                    canvas.width = 0;
                    canvas.height = 0;
                    pixels = imageData.data;
                }
                else if (border instanceof HTMLCanvasElement) {
                    pixels = border.getContext("2d").getImageData(0, 0, width, height).data;
                }
                else if (border instanceof HTMLVideoElement) {
                    let canvas = document.getElementById("texCanvas");
                    canvas.width = border.width;
                    canvas.height = border.height;
                    let cxt = canvas.getContext("2d");
                    cxt === null || cxt === void 0 ? void 0 : cxt.drawImage(border, 0, 0);
                    let imageData = cxt === null || cxt === void 0 ? void 0 : cxt.getImageData(0, 0, border.width, border.height);
                    canvas.width = 0;
                    canvas.height = 0;
                    pixels = imageData.data;
                }
                else if (border instanceof OffscreenCanvas) {
                    pixels = border.getContext("2d").getImageData(0, 0, width, height).data;
                }
            }
            border = 0;
        }
        if (border != 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texImage2D");
            return;
        }
        if (width <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texImage2D");
            return;
        }
        if (height <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texImage2D");
            return;
        }
        if (target === this._gameGl.TEXTURE_2D ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            let textureData;
            if (target === this._gameGl.TEXTURE_2D) {
                textureData = activeTextureData.get(target);
            }
            else {
                textureData = activeTextureData.get(this._gameGl.TEXTURE_CUBE_MAP);
            }
            if (textureData) {
                // 好像不是立方体纹理的话不会报错(没有验证过)
                // 如果是npot 非2的幂次方的话还要mipmap的话会报错
                if (level > 0 && width % 2 !== 0 && height % 2 !== 0 && width !== 1 && height !== 1) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texImage2D");
                }
                else {
                    /** 用于指定纹理在GPU端的格式，只能是GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA*/
                    // GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA
                    // 流明/亮度类型的暂时还不是特别理解 所以没做
                    if ((internalformat == this._gameGl.ALPHA ||
                        internalformat == this._gameGl.RGB ||
                        internalformat == this._gameGl.RGBA) &&
                        (format == this._gameGl.ALPHA || format == this._gameGl.RGB || format == this._gameGl.RGBA)) {
                        if (type == this._gameGl.UNSIGNED_BYTE) {
                            let uint8ArrayData = new Uint8Array(width * height * 4);
                            if (pixels) {
                                uint8ArrayData.set(new Uint8Array(pixels.buffer, pixels.byteOffset, pixels.byteLength));
                            }
                            let texelsData;
                            if (target === this._gameGl.TEXTURE_2D) {
                                texelsData = textureData.texelsDatas[0];
                            }
                            else {
                                texelsData = textureData.texelsDatas[this._cubeTexIndex.get(target)];
                            }
                            if (!texelsData) {
                                texelsData = new PipelineData_1.TexelsData();
                            }
                            texelsData.setLevelData(level, width, height, uint8ArrayData);
                            if (target === this._gameGl.TEXTURE_2D) {
                                textureData.texelsDatas[0] = texelsData;
                            }
                            else {
                                textureData.texelsDatas[this._cubeTexIndex.get(target)] = texelsData;
                            }
                            /** 复制 */
                            // this._useEboBufferData.buffer = new Uint8Array(uint8ArrayData)
                        }
                        else {
                            debugger;
                            console.error("type类似暂时只支持UNSIGNED_BYTE");
                        }
                        /**type指的每个通道的位数以及按照什么方式保存，到时候读取数据的时候是以byte还是以short来进行读取。
                         * 只能是GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_4_4_4_4, and GL_UNSIGNED_SHORT_5_5_5_1。
                         * 当type为GL_UNSIGNED_BYTE的时候，每一个byte都保存的是一个颜色通道中的值，当type为GL_UNSIGNED_SHORT_5_6_5,
                         * GL_UNSIGNED_SHORT_4_4_4_4, and GL_UNSIGNED_SHORT_5_5_5_1的时候，每个short值中将包含了一个像素点的所有颜色信息，
                         * 也就是包含了所有的颜色通道的值。从CPU往GPU传输数据生成纹理的时候，会将这些格式的信息转成float值，
                         * 方法是比如byte，那么就把值除以255，比如GL_UNSIGNED_SHORT_5_6_5，就把red和blue值除以31，green值除以63，
                         *
                         * 然后再全部clamp到闭区间[0,1]，设计这种type使得绿色更加精确，是因为人类的视觉系统对绿色更敏感。
                         * 而type为GL_UNSIGNED_SHORT_5_5_5_1使得只有1位存储透明信息，使得每个像素要么透明要么不透明，
                         * 这种格式比较适合字体，这样可以使得颜色通道有更高的精度。如果format和type不是这些值，那么就会出现GL_INVALID_ENUM的错误。
    
                            同样的format在OpenGL ES2.0中，将对应相同的internalformat，
                            比如format GL_RGBA就对应着internalformat GL_RGBA，format GL_ALPHA就对应着internalformat GL_ALPHA，
                            这里一共有5种format，也对应着5种internalformat，分别是GL_RGBA，GL_RGB，GL_ALPHA，GL_LUMINANCE，GL_LUMINANCE_ALPHA。
                            internalformat和format需要一一对应，而且确定了internalformat和format之后，type的选择也受到了限制，
                            比如针对internalformat和format为GL_RGB的时候，type只能是GL_UNSIGNED_SHORT_5_6_5或者GL_UNSIGNED_BYTE。
                            而internalformat和format为GL_ALPHA的时候，type只能是GL_UNSIGNED_BYTE。internal format、format和type必须要对应着使用。 */
                    }
                    else {
                        debugger;
                        console.error("流明/亮度类型的 internalformat 暂未支持");
                    }
                }
            }
            else {
            }
        }
        else {
            debugger;
            renderError("其它类型暂未实现 in texImage2D");
        }
    }
    // texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;
    // texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
        if (arguments.length === 7) {
            let source = format;
            format = width;
            type = height;
            height = source.height;
            width = source.width;
            if (source) {
                if (source instanceof ImageBitmap) {
                    debugger;
                    console.error("暂时不支持ImageBitmap类型数据");
                }
                else if (source instanceof ImageData) {
                    pixels = source.data;
                }
                else if (source instanceof HTMLImageElement) {
                    let canvas = document.getElementById("texCanvas");
                    canvas.width = source.width;
                    canvas.height = source.height;
                    let cxt = canvas.getContext("2d");
                    cxt === null || cxt === void 0 ? void 0 : cxt.drawImage(source, 0, 0);
                    let imageData = cxt === null || cxt === void 0 ? void 0 : cxt.getImageData(0, 0, source.width, source.height);
                    canvas.width = 0;
                    canvas.height = 0;
                    pixels = imageData.data;
                }
                else if (source instanceof HTMLCanvasElement) {
                    pixels = source.getContext("2d").getImageData(0, 0, width, height).data;
                }
                else if (source instanceof HTMLVideoElement) {
                    let canvas = document.getElementById("texCanvas");
                    canvas.width = source.width;
                    canvas.height = source.height;
                    let cxt = canvas.getContext("2d");
                    cxt === null || cxt === void 0 ? void 0 : cxt.drawImage(source, 0, 0);
                    let imageData = cxt === null || cxt === void 0 ? void 0 : cxt.getImageData(0, 0, source.width, source.height);
                    canvas.width = 0;
                    canvas.height = 0;
                    pixels = imageData.data;
                }
                else if (source instanceof OffscreenCanvas) {
                    pixels = source.getContext("2d").getImageData(0, 0, width, height).data;
                }
            }
        }
        if (width <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texSubImage2D");
            return;
        }
        if (height <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texSubImage2D");
            return;
        }
        if (target === this._gameGl.TEXTURE_2D ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            let textureData;
            if (target === this._gameGl.TEXTURE_2D) {
                textureData = activeTextureData.get(target);
            }
            else {
                textureData = activeTextureData.get(this._gameGl.TEXTURE_CUBE_MAP);
            }
            if (textureData) {
                // 如果是npot 非2的幂次方的话还要mipmap的话会报错
                if (level > 0 && width % 2 !== 0 && height % 2 !== 0 && width !== 1 && height !== 1) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texSubImage2D");
                }
                else {
                    /** 用于指定纹理在GPU端的格式，只能是GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA*/
                    // GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA
                    // 流明/亮度类型的暂时还不是特别理解 所以没做
                    if (format == this._gameGl.ALPHA || format == this._gameGl.RGB || format == this._gameGl.RGBA) {
                        if (type == this._gameGl.UNSIGNED_BYTE) {
                            let texelsData;
                            if (target === this._gameGl.TEXTURE_2D) {
                                texelsData = textureData.texelsDatas[0];
                            }
                            else {
                                texelsData = textureData.texelsDatas[this._cubeTexIndex.get(target)];
                            }
                            if (!texelsData || !texelsData.texelMipmapData) {
                                debugger;
                            }
                            let texBufferData = texelsData.texelMipmapData.get(level);
                            if (texBufferData && pixels) {
                                /* 这个函数的第一个和第二个输入参数和glTexImage2D的一样，用于指定texture object的类型，
                                以及该给texture的第几层mipmap赋值。错误的情况也与glTexImage2D一样，target传入不支持的值，
                                则会出现GL_INVALID_ENUM的错误，level传入了错误的数字，则会出现GL_INVALID_VALUE的错误。
                                第三个、第四个、第五个和第六个输入参数的意思是：以texture object的开始为起点，宽度进行xoffset个位置的偏移，
                                高度进行yoffset个位置的偏移，从这个位置开始，宽度为width个单位高度为height的这么一块空间，
                                使用data指向的一块CPU中的内存数据，这块内存数据的format和type为第七和第八个参数，
                                将这块内存数据根据这块texture的internalformat进行转换，转换好了之后，对这块空间进行覆盖。
                                OpenGL ES所支持的format和type刚才已经列举过了，如果使用其它值则为GL_INVALID_ENUM。
                                如果xoffset、yoffset、width、height其中有一个为负，或者xoffset+width大于texture的宽，
                                或者yoffset+height大于texture的高，那么就会出现INVALID_VALUE的错误。*/
                                if (xoffset + width <= texBufferData.width && yoffset + height <= texBufferData.height) {
                                    let copyData = new Uint8Array(pixels.buffer, pixels.byteOffset, pixels.byteLength);
                                    let bufferData = texBufferData.bufferData;
                                    let copyIndex = 0;
                                    for (let y = 0; y < height; y++) {
                                        for (let x = 0; x < width; x++) {
                                            let texIndex = ((yoffset + y) * texBufferData.width + (xoffset + x)) * 4;
                                            bufferData[texIndex++] = copyData[copyIndex++];
                                            bufferData[texIndex++] = copyData[copyIndex++];
                                            bufferData[texIndex++] = copyData[copyIndex++];
                                            bufferData[texIndex++] = copyData[copyIndex++];
                                        }
                                    }
                                }
                                else {
                                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in texSubImage2D");
                                }
                            }
                            else {
                                renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in texSubImage2D");
                            }
                            /** 复制 */
                            // this._useEboBufferData.buffer = new Uint8Array(uint8ArrayData)
                        }
                        else {
                            debugger;
                            console.error("type类似暂时只支持UNSIGNED_BYTE");
                        }
                        /**type指的每个通道的位数以及按照什么方式保存，到时候读取数据的时候是以byte还是以short来进行读取。
                         * 只能是GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_4_4_4_4, and GL_UNSIGNED_SHORT_5_5_5_1。
                         * 当type为GL_UNSIGNED_BYTE的时候，每一个byte都保存的是一个颜色通道中的值，当type为GL_UNSIGNED_SHORT_5_6_5,
                         * GL_UNSIGNED_SHORT_4_4_4_4, and GL_UNSIGNED_SHORT_5_5_5_1的时候，每个short值中将包含了一个像素点的所有颜色信息，
                         * 也就是包含了所有的颜色通道的值。从CPU往GPU传输数据生成纹理的时候，会将这些格式的信息转成float值，
                         * 方法是比如byte，那么就把值除以255，比如GL_UNSIGNED_SHORT_5_6_5，就把red和blue值除以31，green值除以63，
                         *
                         * 然后再全部clamp到闭区间[0,1]，设计这种type使得绿色更加精确，是因为人类的视觉系统对绿色更敏感。
                         * 而type为GL_UNSIGNED_SHORT_5_5_5_1使得只有1位存储透明信息，使得每个像素要么透明要么不透明，
                         * 这种格式比较适合字体，这样可以使得颜色通道有更高的精度。如果format和type不是这些值，那么就会出现GL_INVALID_ENUM的错误。
    
                            同样的format在OpenGL ES2.0中，将对应相同的internalformat，
                            比如format GL_RGBA就对应着internalformat GL_RGBA，format GL_ALPHA就对应着internalformat GL_ALPHA，
                            这里一共有5种format，也对应着5种internalformat，分别是GL_RGBA，GL_RGB，GL_ALPHA，GL_LUMINANCE，GL_LUMINANCE_ALPHA。
                            internalformat和format需要一一对应，而且确定了internalformat和format之后，type的选择也受到了限制，
                            比如针对internalformat和format为GL_RGB的时候，type只能是GL_UNSIGNED_SHORT_5_6_5或者GL_UNSIGNED_BYTE。
                            而internalformat和format为GL_ALPHA的时候，type只能是GL_UNSIGNED_BYTE。internal format、format和type必须要对应着使用。 */
                    }
                    else {
                        debugger;
                        console.error("流明/亮度类型的 internalformat 暂未支持");
                    }
                }
            }
            else {
            }
        }
        else {
            renderError("其它类型暂未实现 in texSubImage2D");
        }
    }
    /**我们上节课说过，在OpenGL ES中执行绘制命令，可以在绘制buffer的颜色buffer等buffer生成数据。
     * 那么我们想象一下，其实绘制buffer的颜色buffer，也就是一块方形的内存，里面保存了一块方形图像的颜色信息，
     * 由于绘制buffer是有格式的，这个我们在创建surface的时候就已经确定了绘制buffer中颜色buffer的格式，比如是存放RGBA中的哪些通道，
     * 每个通道各占多少位。刚才已经说了glTexImage2D是从CPU客户端把数据读取出来，需要读取的是数据、format、type、width、height，传输到GPU，
     * 遵循CPU的格式和GPU端的格式进行转换，在GPU中生成一个texture。而在绘制buffer中，我们也能获取到用于生成纹理的这些信息，
     * 所以glCopyTexImage2D这个API，就是直接从绘制buffer中读取一块数据，根据绘制buffer的格式和目标纹理的格式进行转换，在GPU中生成一个texture。
     * 它的用处也非常广泛，比如我们游戏中需要的图像，很多是不能或者不需要从CPU读取，比如我们在游戏中进行了拍照，然后在游戏中看我们拍的照片，
     * 那么其实就是从前一帧的绘制buffer中读取一些信息，保存在texture中，在后面的一帧，将这个texture绘制出来。
        这个函数的前三个输入参数和glTexImage2D的一样，用于指定texture object的类型，该给texture的第几层mipmap赋值，以及将要生成纹理的格式internal format。
        错误的情况也与glTexImage2D一样，target传入不支持的值，则会出现GL_INVALID_ENUM的错误，level传入了错误的数字，则会出现GL_INVALID_VALUE的错误。
        internal format传入了不支持的值，则会出现GL_INVALID_ENUM的错误。 第四个、第五个、第六个和第七个输入参数的意思是：以绘制buffer左下角为起点，
        宽度进行x个位置的偏移，高度进行y个位置的偏移，从这个位置开始，宽度为width个单位，高度为height的这么一块空间，从这块空间中进行取值，
        取出来的值用于生成宽为width、高为height的一张纹理。width和height不能小于0，也不能当target为GL_TEXTURE_2D的时候，超过GL_MAX_TEXTURE_SIZE，
        或者当target为其他情况的时候，超过GL_MAX_CUBE_MAP_TEXTURE_SIZE否则，就会出现GL_INVALID_VALUE的错误。但是还有一种可能性，那就是这4个参数构成的方形，
        超过了绘制buffer的区域，那么在区域外读取到的值就是undefine。而如果width和height都为0，那么其实就是创建了一个NULL texture。最后一个参数border，
        代表着纹理是否有边线，在这里必须写成0，也就是没有边线，如果写成其他值，则会出现GL_INVALID_VALUE的错误。
        这个函数没有输出参数，但是有以下几种情况会出错，除了刚才说的那些参数输入错误之外，还有如果target是CubeMap texture的一个面，
        但是width和height不相同，则会出现GL_INVALID_VALUE的错误。如果绘制buffer的format与internal format不匹配，则会出现GL_INVALID_OPERATION的错误，
        比如绘制buffer只有RGB通道，那么internalformat就不能使用含A通道的格式，因为根本没有读取到alpha信息。而当匹配的时候，
        会先将从绘制buffer中读取出来的数据扩展成RGBA四个通道，然后进行归一化，将数据clamp到闭区间[0,1]，然后再转成internalformat的格式。
        我们之前在讲绘制命令的时候说过，绘制buffer可以是egl创建的，也可以是OpenGL ES自己创建的，其实用在这个地方，更多的是使用OpenGL ES自己创建的绘制buffer。
        那么问题就是，如果使用OpenGL ES自己创建的绘制buffer去读取数据生成texture，但是假如OpenGL ES创建的绘制buffer有误，
        那么就会出现GL_INVALID_FRAMEBUFFER_OPERATION的错误。
        所以总结一下，glCopyTexImage2D和glTexImage2D总的来看，其实就是信息来源不同，其它基本一样 */
    copyTexImage2D(target, level, internalformat, bufferXoffset, bufferYoffset, width, height, border) {
        if (border != 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexImage2D");
            return;
        }
        if (width <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexImage2D");
            return;
        }
        if (height <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexImage2D");
            return;
        }
        if (target === this._gameGl.TEXTURE_2D ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            let textureData;
            if (target === this._gameGl.TEXTURE_2D) {
                textureData = activeTextureData.get(target);
            }
            else {
                textureData = activeTextureData.get(this._gameGl.TEXTURE_CUBE_MAP);
            }
            if (textureData) {
                // 如果是npot 非2的幂次方的话还要mipmap的话会报错
                if (level > 0 && width % 2 !== 0 && height % 2 !== 0 && width !== 1 && height !== 1) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexImage2D");
                }
                else {
                    /** 用于指定纹理在GPU端的格式，只能是GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA*/
                    // GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA
                    // 流明/亮度类型的暂时还不是特别理解 所以没做
                    if (internalformat == this._gameGl.ALPHA || internalformat == this._gameGl.RGB || internalformat == this._gameGl.RGBA) {
                        let destData = new Uint8Array(width * height * 4);
                        let writeColorFramebuffer = this.customGetNowColorBuffer();
                        let renderSize = this.customGetNowRenderSize();
                        let frameBuffer = new Uint8ClampedArray(writeColorFramebuffer.buffer, writeColorFramebuffer.byteOffset, writeColorFramebuffer.byteLength);
                        let copyData = frameBuffer;
                        let frameWidth = renderSize.x;
                        let copyIndex = 0;
                        for (let y = 0; y < height; y++) {
                            for (let x = 0; x < width; x++) {
                                let factX = this._viewPort.x + bufferXoffset + x;
                                let factY = this._viewPort.y + bufferYoffset + y;
                                let bufferIndex = (factY * frameWidth + factX) * 4;
                                destData[copyIndex++] = copyData[bufferIndex++];
                                destData[copyIndex++] = copyData[bufferIndex++];
                                destData[copyIndex++] = copyData[bufferIndex++];
                                destData[copyIndex++] = copyData[bufferIndex++];
                            }
                        }
                        let texelsData = new PipelineData_1.TexelsData();
                        texelsData.setLevelData(level, width, height, destData);
                        if (target === this._gameGl.TEXTURE_2D) {
                            textureData.texelsDatas[0] = texelsData;
                        }
                        else {
                            textureData.texelsDatas[this._cubeTexIndex.get(target)] = texelsData;
                        }
                    }
                    else {
                        console.error("流明/亮度类型的 internalformat 暂未支持");
                    }
                }
            }
            else {
            }
        }
        else {
            renderError("其它类型暂未实现 in copyTexImage2D");
        }
    }
    /**这个API的功能和刚才的glCopyTexImage2D类似，顾名思义，刚才那个API是给texture object这个整体传入数据，
     * 这个glCopyTexSubImage2D是给texture object的一部分传入数据。这个API的目的类似glTexSubImage2D，
     * 不会改变texture object的internalformat、width、height、参数以及指定部分之外的内容。
     这个函数的第一个和第二个输入参数和glTexSubImage2D的一样，用于指定texture object的类型，以及该给texture的第几层mipmap赋值。
     错误的情况也与glCopyTexImage2D一样，target传入不支持的值，则会出现GL_INVALID_ENUM的错误，level传入了错误的数字，则会出现GL_INVALID_VALUE的错误。
     后面6个输入参数的意思是：以绘制buffer的左下角为起点，宽度进行x个位置的偏移，高度进行y个位置的偏移，从这个位置开始，
     宽度为width个单位高度为height的这么一块空间，使用这块空间的数据，去改变指定texture object的左下角为起点，宽度进行xoffset个位置的偏移，
     高度进行yoffset个位置的偏移，从这个位置开始，宽度为width个单位高度为height的这么一块区域的信息，它们公用了width和height这两个参数，
     原因也很简单，就是像素点是一一对应的，所以从绘制buffer中取多大区域的信息，就更改了对应texture多大区域的数据。
     如果width和height为0也没关系，只是这样的话这个命令就没有任何结果了。如果xoffset、yoffset、width、height其中有一个为负，
     或者xoffset+width大于texture的宽，或者yoffset+height大于texture的高，那么就会出现INVALID_VALUE的错误。
     这个函数没有输出参数。除了刚才那些因为参数问题导致的错误，还有，如果target指定的这个texture还没有被glTexImage2D或者glCopyTexImage2D分配好空间，
     或者如果绘制buffer的format与internal format不匹配，则会出现GL_INVALID_OPERATION的错误。如果使用OpenGL ES自己创建的绘制buffer去读取数据生成texture，
     但是假如OpenGL ES创建的绘制buffer有误，那么就会出现GL_INVALID_FRAMEBUFFER_OPERATION的错误。 */
    copyTexSubImage2D(target, level, xoffset, yoffset, bufferXoffset, bufferYoffset, width, height) {
        if (width <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexSubImage2D");
            return;
        }
        if (height <= 0) {
            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexSubImage2D");
            return;
        }
        if (target === this._gameGl.TEXTURE_2D ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
            target === this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z ||
            target === this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            let textureData;
            if (target === this._gameGl.TEXTURE_2D) {
                textureData = activeTextureData.get(target);
            }
            else {
                textureData = activeTextureData.get(this._gameGl.TEXTURE_CUBE_MAP);
            }
            if (textureData) {
                // 如果是npot 非2的幂次方的话还要mipmap的话会报错
                if (level > 0 && width % 2 !== 0 && height % 2 !== 0 && width !== 1 && height !== 1) {
                    renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in copyTexSubImage2D");
                }
                else {
                    let texelsData;
                    if (target === this._gameGl.TEXTURE_2D) {
                        texelsData = textureData.texelsDatas[0];
                    }
                    else {
                        texelsData = textureData.texelsDatas[this._cubeTexIndex.get(target)];
                    }
                    let texBufferData = texelsData.texelMipmapData.get(level);
                    if (texBufferData) {
                        let destData = texBufferData.bufferData;
                        let writeColorFramebuffer = this.customGetNowColorBuffer();
                        let renderSize = this.customGetNowRenderSize();
                        let frameBuffer = new Uint8ClampedArray(writeColorFramebuffer.buffer, writeColorFramebuffer.byteOffset, writeColorFramebuffer.byteLength);
                        let copyData = frameBuffer;
                        let frameWidth = renderSize.x;
                        let texWidth = texBufferData.width;
                        for (let y = 0; y < height; y++) {
                            for (let x = 0; x < width; x++) {
                                let texIndex = ((yoffset + y) * texWidth + (xoffset + x)) * 4;
                                let factX = this._viewPort.x + bufferXoffset + x;
                                let factY = this._viewPort.y + bufferYoffset + y;
                                let bufferIndex = (factY * frameWidth + factX) * 4;
                                destData[texIndex++] = copyData[bufferIndex++];
                                destData[texIndex++] = copyData[bufferIndex++];
                                destData[texIndex++] = copyData[bufferIndex++];
                                destData[texIndex++] = copyData[bufferIndex++];
                            }
                        }
                    }
                    else {
                        renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in copyTexSubImage2D");
                    }
                }
            }
            else {
            }
        }
        else {
            renderError("其它类型暂未实现 in copyTexSubImage2D");
        }
    }
    /**通过上面的API，我们已经生成了一张可以使用的纹理，并且，我们还知道了这张纹理的宽和高。
     * 下面我们要把这张纹理映射到绘制buffer上，那么映射的过程，需要用到一个新的概念，纹理坐标。
     * 顾名思义，纹理坐标，意思就是纹理的坐标，用于在纹理中限定一块区域，将这块区域，显示到绘制buffer的指定区域上。
     * 回忆一下OpenGL ES pipeline，通过之前的课程，我们创建了一套VS和PS，并传入了顶点信息，在VS中讲计算出各个顶点的位置，
     * 其实每个顶点还可以包含更多的值，比如顶点颜色、纹理坐标、法线信息、切线信息等，这里我们先说每个顶点对应着的纹理坐标，
     * 纹理坐标是用于指定该顶点对应纹理中的某个点。纹理坐标，我们又称之为UV坐标，以纹理的左下角为坐标原点，
     * 有两种度量形式：一个顶点在纹理中的纹理坐标通常用（u,v）表示，u和v的最大值分别是纹理的宽度和高度，通常由开发者来提供，
     * 通过attribute的形式将与顶点数量匹配的纹理坐标传入vertex shader，每个纹理坐标对应一个顶点，意思就是要将该顶点与纹理中的指定点对应，
     * 然后所有顶点确定好之后，在光栅化的时候，会对uv坐标进行归一化生成st坐标，取值为闭区间［0，1］。
     * 在光珊化的时候，生成像素点的顶点坐标，并使用插值smooth（或者非插值flat）的方法生成每个像素点的纹理坐标（颜色、深度等），
     * 使得屏幕上的点可以于纹理图片中对应。然后我们再将纹理以uniform sampler2D/samplerCube的形式传入PS，在PS中通过纹理坐标对纹理进行采样，
     * 得到的纹理中对应的颜色，映射到光珊化产生的像素点上，对像素点进行着色，作为一部分像素点的颜色信息，用这些颜色计算出当前像素点最终的颜色。
     * 当然也有的纹理是用于做为像素点的深度或者模板信息，但是最多情况，还是做为颜色信息。理解了纹理坐标以及其工作原理之后，
     * 我们来举个例子，比如，我们生成的这张纹理是一个头像，那么我们准备将这个头像显示在图片的左上角，作为主角的头像，点击这个头像，
     * 还可以看到放大版的头像。那么假如原本的纹理宽和高为64*64，而我们将头像放到左上角的时候，宽和高为32*32，然而点击放大的时候，
     * 头像的宽和高又变成了128*128。所以在这里这两种映射方式的纹理坐标是一样的，都是选定整张纹理去进行映射，
     * 但是对应的顶点位置以及由顶点位置确定的大小不一样。所以究竟是如何把一张64*64的纹理图片，映射成32*32和128*128的图片呢，
     * 这里就牵扯到了映射算法，而纹理映射有很多种算法，所以需要通过明确规定纹理属性的方法，确定映射算法。
     * 下面，我们将介绍纹理属性，同时，介绍纹理属性对应的映射算法。而glTexParameter*这个API，就是用于设置纹理属性的。
        这个函数的第一个输入参数用于指定texture object的类型，必须是GL_TEXTURE_2D或者GL_TEXTURE_CUBE_MAP。
        用于指定当前active的纹理单元中的一张texture，也就是用这个target来确定设置哪张纹理的属性。所以想要修改一张纹理的属性，
        先要通过glActiveTexture，enable一个纹理单元，然后通过glBindTexture，把这个texture绑定到这个纹理单元上。
        然后保持这个纹理单元处于active的状态，再调用这个API，来修改指定纹理的属性。
        第二个输入参数和第三个输入参数，用于指定修改纹理的什么属性，以及修改成什么值。其中，第二个参数有四种选择。
        可以是GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T。
        下面分别介绍这4种属性以及它们可以支持的数值：
        第一个属性，GL_TEXTURE_MIN_FILTER是用于纹理被使用的那块区域的尺寸小于纹理尺寸，需要将纹理缩小的情况，
        针对这种情况，有六种映射算法。其中两种算法是直接将原始纹理上的一个点或者四个点拿去计算，得出映射点的值，
        另外四种算法需要借用到mipmap。mipmap刚才我们已经介绍过了，我们说过一个纹理，可以有多层mipmap，每层mipmap宽高以2倍速率递减，
        直到宽高均为1。一张纹理的mipmap可以通过glGenerateMipmap利用算法，根据纹理base level的值生成，
        也可以通过glTexImage2D、glCopyTexImage2D、以及glCompressedTexImage2D，给指定texture的指定level层赋值。
        这些API除了glCompressedTexImage2D，我们都在上面说过了，而glCompressedTexImage2D我们将在下节课讲纹理优化的时候进行解释说明。
        那么下面详细介绍一下GL_TEXTURE_MIN_FILTER对应的六种算法。
        第一种是
            GL_NEAREST，就是直接取原始纹理限定区域中最接近的一个像素的信息，作为映射点的信息，举个例子，
            比如将一个5*5的纹理，整张映射到3*3的一张图片上，那么理论上，映射图片的中间点应该就是从纹理的中间点取值。
        第二种是
            GL_LINEAR，就是根据原始纹理限定区域中最接近的四个像素的信息，计算出来一个加权平均值，作为映射点的信息，
            举个例子，还是比如将一个5*5的纹理，整张映射到3*3的一张图片上，那么理论上，映射图片左下角的点的值，
            应该就是根据纹理左下角四个点的值计算而来。
        第三种是
            GL_NEAREST_MIPMAP_NEAREST，就是先选择一张与映射图片大小最接近的mipmap层，然后从这个mipmap层中，取最接近的一个像素的信息，
            作为映射点的信息，举个例子，比如将一个64*64的纹理，整张映射到4*4的一张图片上，我们知道64*64的纹理有很多mipmap层，
            第0层的宽高就是64，第1层的宽高为32，依此类推，第5层的宽高为4，正好与映射图片大小一致。那么理论上，就取这第5层的像素点的信息，
            直接对应到映射图片的各个点上即可。
        第四种是
            GL_LINEAR_MIPMAP_NEAREST，就是先选择一张与映射图片大小最接近的mipmap层，然后从这个mipmap层中，取最接近的四个像素的信息，
            计算出来一个加权平均值，作为映射点的信息，举个例子，还是比如将一个64*64的纹理，整张映射到4*4的一张图片上，我们还是会选择第5层mipmap，
            然后理论上，映射图片左下角的点的值，应该就是根据这第5层mipmap左下角四个点的值计算出来的加权平均值。
        第五种是
            GL_NEAREST_MIPMAP_LINEAR，就是先选择两张与映射图片大小最接近的mipmap层，然后从这两个mipmap层中，分别取最接近的一个像素的信息，
            计算出来一个加权平均值，作为映射点的信息，举个例子，比如将一个64*64的纹理，整张映射到5*5的一张图片上，我们就会取第4层和第5层mipmap，
            然后理论上，映射图片左下角的点的值，应该就是根据第4层mipmap左下角点的值和第5层mipmap左下角点的值计算出来的加权平均值。
        第六种是
            GL_LINEAR_MIPMAP_LINEAR，这种算法最复杂。就是先选择两张与映射图片大小最接近的mipmap层，然后从这两个mipmap层中，
            分别取四个最接近的像素的信息，分别计算加权平均值，然后根据这两个加权平均值，再计算出来一个加权平均值，作为映射点的信息，
            举个例子，还是比如将一个64*64的纹理，整张映射到5*5的一张图片上，我们还是会选择第4层和第5层mipmap，然后理论上，映射图片左下角的点的值，
            应该就是根据这第4层mipmap左下角四个点的值计算出来的加权平均值与第5层mipmap左下角四个点的值计算出来的加权平均值，算出来的加权平均值。
        需要注意的是，如果在shader中注明要使用mipmap，比如texture2D传入了第三个参数bias，那么GL_TEXTURE_MIN_FILTER一定要使用带mipmap的这后面四种映射算法。
        在纹理的缩小函数中，基本都是将多个纹理中读出的点计算出一个映射图片上的点，所以走样的几率会偏低，但是由于也会丢失一部分纹素，
        而丢失的纹素可能包含重要的颜色过渡信息，那样就会导致贴图失真，造成锯齿，在游戏中表现为远景部分，由于物体受到近大远小的影响，
        对物体纹理进行了缩小处理，则会出现模糊。然而也可以想象到，这6种算法，肯定是效率和效果不能兼得，其中前两种不同过mipmap的GL_NEAREST和GL_LINEAR最快，
        它们只需要通过一张纹理图片上的点进行采样即可，但是GL_NEAREST更容易导致比例严重的失真，
        高分辨率的图像在低分辨率的设备上就会出现一些像素点跳跃比较大的情况，而GL_LINEAR在纹理缩小的时候，像素点过渡比较平滑，虽然会损失一些性能，
        但是效果会稍微好一点。而默认情况下GL_TEXTURE_MIN_FILTER对应的算法是GL_NEAREST_MIPMAP_LINEAR。
        针对纹理的时候，纹素的丢失可能导致的图片锯齿问题，为了消除锯齿，有一门专门的图形学技术叫做反锯齿，英文叫做AA。
        在OpenGL ES中是通过多重采样技术实现的反锯齿。先说单重采样，比如我们根据纹理映射得到了一张映射图片，那么将映射图片传入绘制buffer的时候，
        单重采样会采用一一对应的方法，但是多重采样则会利用了多重采样缓冲区，
        由该点附近多个位置的颜色、depth、stencil的采样共同决定绘制buffer上一个像素点的信息，这样也就使得图片的边缘可以比较平滑的过渡，减小视觉上的瑕疵。
        生成每个像素使用邻近采样点的数量，数量越多，抗锯齿效果越明显，但相应的也会影响性能。这个最大数量受到硬件支持的限制，可以通过glGet函数，
        传入参数GL_MAX_SAMPLES来查询当前硬件支持的最大数量。多重采样只是针对多边形的边缘进行抗锯齿处理，所以对应用程序的性能影响比较小。
        在3D游戏的开发中，这个技术已经比较普遍了，但是在2D游戏中，由于大部分元素都是规则且垂直于摄像机的，所以锯齿现象不是特别明显，
        但是如果游戏中需要绘制一些不规则的线段或者多边形，则最好开启多重采样。
        第二个纹理属性，GL_TEXTURE_MAG_FILTER，与GL_TEXTURE_MIN_FILTER相反，它是用于纹理被使用的那块区域尺寸大于纹理尺寸，
        需要将纹理放大的情况，针对这种情况，只有两种映射算法。可想而知，需要将纹理放大，那么mipmap这种比原始纹理还小的纹理就没有意义了，
        所以可使用的映射算法就是GL_NEAREST和GL_LINEAR。这两种算法和刚才一样，就不介绍具体如何映射的了。但是有一点需要注意，
        由于将纹理放大，那么之前纹理上的一个点可能就要对应映射图片上的多个点，这样很有可能就会出现大块的纯色区域。
        特别是GL_NEAREST算法，虽然比GL_LINEAR快，但是由于GL_LINEAR还是会使用相邻的四个点计算出来加权平均值，这样的话，
        映射图片上相邻的点颜色就不会完全一样，会有一个平滑的过渡，但是GL_NEAREST则直接使用一个个像素点，去生成一个个像素块。
        所以GL_LINEAR效果会明显比GL_NEAREST要好一些。GL_TEXTURE_MAG_FILTER对应的默认算法就是GL_LINEAR。
        第三个和第四个纹理属性放在一起来说，GL_TEXTURE_WRAP_S和GL_TEXTURE_WRAP_T。这个属性与纹理坐标息息相关，
        默认我们理解纹理的uv坐标最大值就是宽高，st值就是[0,1]。但是，其实也有超过了[0,1]的情况，意思也就是想通过纹理坐标去纹理上取值，
        但是取到了纹理外面了，那么我们可以想象到，可以把纹理外面包一层，这一层的内容都是根据纹理的内容设置的，这个不是简单的把纹理拉大，
        而是把纹理外面套一层，套的这一层的内容就是根据这两个属性指定的算法计算出来的。这两个属性支持的算法都是只有三个，
        分别是GL_CLAMP_TO_EDGE, GL_REPEAT, 和 GL_MIRRORED_REPEAT。
        将GL_TEXTURE_WRAP_S设置为GL_CLAMP_TO_EDGE的意思就是，假如s坐标超过范围[0,1]，那么纹理外面套的那一层，横向部分，
        以纹理的边界值的颜色进行填充，假如纹理图片的边为黑色，内部为白色，那么会横向填充黑色。
        将GL_TEXTURE_WRAP_S设置为GL_REPEAT的意思就是，假如s坐标超过范围[0,1]，那么纹理外面套的那一层，横向部分，则对纹理图片进行复制，将横向完全填满。
        将GL_TEXTURE_WRAP_S设置为GL_MIRRORED_REPEAT的话，与设置为GL_REPEAT类似，假如s坐标超过范围[0,1]，
        那么纹理外面套的那一层，横向部分，则对纹理图片进行镜像复制，将横向完全填满。
        GL_TEXTURE_WRAP_S都是进行横向填充，GL_TEXTURE_WRAP_T则是进行纵向填充。GL_TEXTURE_WRAP_S和GL_TEXTURE_WRAP_T的默认算法都是GL_REPEAT。
        这个API的三个参数的值上面已经全部列举出来了，特别是第二个和第三个参数要搭配使用，如果用错，则会出现GL_INVALID_ENUM的错误。
        这个函数没有输出参数。如果GL_TEXTURE_MIN_FILTER设置的是需要使用mipmap的四个算法之一，但是纹理为NPOT的纹理，
        又或者纹理的mipmap不是通过glGenerateMipmap，而是通过glTexImage2D、glCopyTexImage2D、以及glCompressedTexImage2D，
        生成的，但是没有给需要的level赋值或者赋值的格式不对，那么就相当于本次绘制是用了一张RGBA为（0，0，0，1）的纹理。
        而如果纹理为NPOT的话，但是GL_TEXTURE_WRAP_T、GL_TEXTURE_WRAP_S没有使用GL_CLAMP_TO_EDGE，也就相当于用了一张RGBA为（0，0，0，1）的纹理。
        总结一下，刚才我们一共说了纹理的三个属性，第一个属性，缩放，也就是假如纹理坐标对应的纹理区域与映射区域大小不同，
        需要对纹理进行放大或者缩小的时候，设定相应的映射算法。设定好的算法，可以平衡好采样的效率和效果，所以开发者在设置的时候需要根据自己的需要进行设置。
        第二个属性，wrapmode，假如纹理坐标st使用到了超过［0，1］的坐标，那么针对横向和纵向，对纹理的外层进行填充，设定相应的填充算法。
        第三个属性，mipmap，也就是给纹理对象设置一系列的小纹理，用于当映射区域小于纹理坐标限定的纹理区域大小的时候，
        可以借助小纹理中进行采样。尽管纹理的filer属性可以用于处理适当的纹理缩放，但远远不能满足图形应用程序的需求。
        由于纹理可能会经过远大于2倍的缩放，那么就会很容易造成失真，而由于移动设备的分辨率差异很大，所以不同设备使用同一个分辨率的资源，
        就会很容易出现缩放超过2倍的情况发生。
        mipmap的功能分两层，第一层就是会在进行缩小的时候，提高采样效率，因为从一张小纹理进行采样肯定会比从一张大纹理中采样要速度快，
        效果说不定还会比大纹理采样的结果好，因为生成mipmap的时候，我们可以通过glHins选择GL_NICEST的方式，这样小纹理不会特别的失真，
        （下面我们会再介绍glHints这个API）。然而如果使用大纹理再进行GL_NEAREST的话会更容易失真。当然有人可能说那生成mipmap是需要耗费资源的，
        其实大部分mipmap都是在离线生成好，然后在游戏不忙的时候将资源传入，生成纹理的，再不济也是会选择在游戏不忙的时候使用glGeneratemipmap生成，
        虽然一定程度上影响了应用程序的性能，但是减少了对GPU内存和带宽占用，且只需要generate一次，尽量不会让生成mipmap成为游戏性能的瓶颈。
        第二层功能，就是有时候显示小图片的时候其实是使用不一样的内容，这样的话就需要mipmap是通过glTexImage2D等API传入的，
        而非glGeneratemipmap生成的，这样的话开发者就可以控制texture的第i层mipmap的内容，比如可以让mipmap第0层显示人物的全身照片，
        而第1层显示人物的大头照。这样，把纹理绘制到绘制buffer上的时候，根据纹理坐标大小，导致同一张纹理绘制出来的结果不同。
        所以mipmap是非常有用的，它只有一点不好，那就是如果离线生成mipmap内容的话，会导致包体要稍微大一些，每张纹理大概会比原来多占用1/3的空间。
        */
    texParameterf(target, pname, param) {
        if (target === this._gameGl.TEXTURE_2D || target === this._gameGl.TEXTURE_CUBE_MAP) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            if (activeTextureData) {
                let textureData = activeTextureData.get(target);
                if (textureData) {
                    if (pname == this._gameGl.TEXTURE_MIN_FILTER) {
                        console.log("TEXTURE_MIN_FILTER " + param);
                        if (param == this._gameGl.NEAREST) {
                            textureData.parameter.set(this._gameGl.TEXTURE_MIN_FILTER, param);
                        }
                        else if (param == this._gameGl.LINEAR) {
                            textureData.parameter.set(this._gameGl.TEXTURE_MIN_FILTER, param);
                        }
                        else {
                            console.error("mipmap类型的采样暂未实现");
                        }
                    }
                    else if (pname == this._gameGl.TEXTURE_MAG_FILTER) {
                        console.log("TEXTURE_MAG_FILTER " + param);
                        if (param == this._gameGl.NEAREST) {
                            textureData.parameter.set(this._gameGl.TEXTURE_MAG_FILTER, param);
                        }
                        else if (param == this._gameGl.LINEAR) {
                            textureData.parameter.set(this._gameGl.TEXTURE_MAG_FILTER, param);
                        }
                    }
                    else if (pname == this._gameGl.TEXTURE_WRAP_S) {
                        if (param == this._gameGl.REPEAT || param == this._gameGl.CLAMP_TO_EDGE || param == this._gameGl.MIRRORED_REPEAT) {
                            textureData.parameter.set(this._gameGl.TEXTURE_WRAP_S, param);
                        }
                    }
                    else if (pname == this._gameGl.TEXTURE_WRAP_T) {
                        if (param == this._gameGl.REPEAT || param == this._gameGl.CLAMP_TO_EDGE || param == this._gameGl.MIRRORED_REPEAT) {
                            textureData.parameter.set(this._gameGl.TEXTURE_WRAP_T, param);
                        }
                    }
                    else {
                        console.error("无法识别的 texParameterf");
                        debugger;
                    }
                }
                else {
                    renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in texParameterf");
                }
            }
        }
        else {
            renderError("其它类型暂未实现 in texParameterf");
        }
    }
    texParameteri(target, pname, param) {
        this.texParameterf(target, pname, param);
    }
    /**这个API已经被提起很多遍了，我们再总结一下。首先，先介绍一下mipmap。Mipmap又称多级纹理，每个纹理都可以有mipmap，
     * 也都可以没有mipmap。这个概念我们在上面有接触过，当时我们说了有mipmap的texture就好比一层一层塔一样，每一层都需要赋值。
     * 纹理texture object就是GPU中一块内存，这块内存中保存着一定宽高的颜色信息以及其他属性信息。
     * 而一个texture object中可以包含不止一块内存，mipmap的texture object就包含着多级内存的。
     * 比如，我们创建的texture object的宽和高为32*32，那么我们知道，当纹理被准备好的时候，
     * 会拥有一块可以存放32*32个像素点颜色信息的内存。如果我们通过命令使得texture object包含多级内存，
     * 第一级内存就是刚才那块保存了32*32个像素点颜色信息的内存，而第二级内存就是保存了16*16个像素点颜色信息的内存，
     * 依次类推，每降低以及，宽和高都将缩小一倍，一直到第六级内存就是保存了1*1个像素点颜色信息的内存。
     * 也就是说，宽高为32*32的纹理，如果生成多级纹理，就会多出5块内存，大小分别是16*16,8*8,4*4,2*2,1*1。
     * 当生成多级纹理之后，我们使用texture object name指定的texture object，就是这个包含了多级纹理的纹理。
     * 多级纹理的用处一会我们再说，我们先说多级纹理是如何生成的。我们在说glTexImage2D这个API的时候，
     * 说过纹理的内存是通过这个API生成的，当使用这个API的时候，第二个输入参数就是制定给纹理的第几层赋值，
     * 当时我们都是给第0层赋值，那么现在我们就知道了，第0层为纹理的base level，那么默认都是给第0层赋值，
     * 但是我们也可以通过这个API给纹理的第1层mipmap，第2层mipmap赋值，一直到第N层mipmap。
     * 而这个在给第i层mipmap赋值的时候顺便也就把需要的内存生成出来。我们也说过每个纹理的mipmap是有限制的，
     * 比如32*32的texture只能有6层mipmap，而64*64的texture有7层mipmap，依次类推。但是通过这个方式，一次只能给一层mipmap赋值，
     * 将多级纹理的所有层都赋上值，需要调用好多次命令。所以就有了glGenerateMipmap这个函数，
     * 这个函数就是将一个base level已经准备好的纹理，生成它的各级mipmap。这两种方式唯一的区别在于，通过glTexImage2D赋值的时候，
     * 对应texture object对应的内存存放的值是由开发者指定的，开发者可以往里面随意存入数值，
     * 而通过glGenerateMipmap这个函数生成的多级纹理中存储的值，第i层的值都是直接或者间接根据第0层的值计算出来的。生成算法一会再说。
        这个函数的输入参数用于指定texture object的类型，必须是GL_TEXTURE_2D或者GL_TEXTURE_CUBE_MAP，
        来指定当前active的纹理单元中的一张texture，也就是用这个target来确定生成哪张纹理的mipmap。
        所以想要对一张纹理生成mipmap，先要通过glActiveTexture，enable一个纹理单元，然后通过glBindTexture，
        把这个texture绑定到这个纹理单元上。然后保持这个纹理单元处于active的状态，再调用这个API，来生成指定纹理的mipmap。
        如果输入了错误的target，就会出现GL_INVALID_ENUM的错误。
        这个函数没有输出参数。除了刚才那些因为参数问题导致的错误，还有，如果target是CubeMap texture，
        但是它的6个面的width、height、format、type并非完全相同，则会出现GL_INVALID_OPERATION的错误。
        而这种6个面的width、height、format、type并非完全相同的CubeMap texture，我们则称它为cube non-complete。
        还有上个课时也说过，在OpenGL ES2.0中NPOT的texture是不支持mipmap的，所以如果对NPOT的texture调用这个API生成mipmap，
        就会出现GL_INVALID_OPERATION的错误。最后还有，如果指定的texture的第0层，是压缩格式的纹理内容，
        那么，就会出现GL_INVALID_OPERATION的错误。
        经过这个API，会根据第0层的数据产生一组mipmap数据，这组mipmap数据会替换掉texture之前的除了第0层之外的所有层的数据，
        第0层保持不变。所有层数据的internalformat都与第0层保持一致，每层的宽高都是上一层宽高除以2，一直到宽高均为1的一层。
        然后除了第0层之外，每一层的数据都是通过上一层计算出来的，算法也比较简单，一般都是根据四个像素点的值算出一个像素点的值即可，
        OpenGL ES并没有规定使用什么算法，不过OpenGL ES会通过glHint这个API，建议使用什么算法，glHint这个API一会我们再说。 */
    generateMipmap(target) {
        if (target === this._gameGl.TEXTURE_2D || target === this._gameGl.TEXTURE_CUBE_MAP) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            if (activeTextureData) {
                let textureData = activeTextureData.get(target);
                if (textureData) {
                    console.error("generateMipmap 方法暂未实现");
                }
                else {
                    renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in hint");
                }
            }
        }
        else {
            renderError("其它类型暂未实现 in hint");
        }
    }
    /**我们知道，OpenGL ES的Spec规定了OpenGL ES API的功能，但是具体如何实现的，
     * 则是GPU driver的开发人员根据自己的想法实现的，比如刚才我们说到的glGenerateMipmap的功能就是给指定texture生成mipmap数据，
     * 但是具体的生成算法，就是根据开发人员自己来定了。但是开发人员可以设计多种生成算法，
     * 然后再通过glHints来选择一种作为生成多级纹理的算法。
        这个函数的第一个输入参数用于指定一种GPU行为，在这里只能输入GL_GENERATE_MIPMAP_HINT，
        否则的话，则会出现GL_INVALID_ENUM的错误。也就是说在OpenGL ES2.0中，只有生成多级纹理的算法，
        可以通过这个API来选择。第二个输入参数也就是针对刚才指定的GPU的行为，使用哪种方式去实现。
        这里有三种选择，默认是GL_DONT_CARE，也就是随意选择一种算法。另外两种分别是GL_FASTEST，顾名思义，
        就是选择一种最有效率的算法。还有GL_NICEST，就是选择一种生成纹理最正确，质量最高的算法。如果输入了其他值，
        则会出现GL_INVALID_ENUM的错误。虽然这里做出了看似正确的选择，但是哪个算法是最有效率的，
        而哪个算法是最正确、质量最高的，这种还是需要在GPU中写算法的时候就指定出来，指定好哪个算法是最有效率的，
        哪个算法是最正确、质量最高的。当然，也可以不指定，然后在GPU driver中选择忽略这个API。
        这个函数没有输出参数。 */
    hint(target, mode) {
        if (target === this._gameGl.TEXTURE_2D || target === this._gameGl.TEXTURE_CUBE_MAP) {
            let activeTextureData = this._textureUnit.get(this._nowActiveTextureUnit);
            if (activeTextureData) {
                let textureData = activeTextureData.get(target);
                if (textureData) {
                    if (mode === this._gameGl.DONT_CARE || mode === this._gameGl.FASTEST || mode === this._gameGl.NICEST) {
                        textureData.mipmapCreateType = mode;
                    }
                    else {
                        renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in hint");
                    }
                }
                else {
                    renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in hint");
                }
            }
        }
        else {
            renderError("其它类型暂未实现 in hint");
        }
    }
    /**纹理一旦被传输至GPU，就会一直留在GPU管理的内存中。因此我们应该留意那些不再被使用的纹理，及时的从GL内存中删除它们，
     * 以减少应用程序内存的占用。所以当texture不再被需要的时候，则可以通过glDeleteTextures这个API把texture object name删除。
        这个函数的输入参数的意思是该API会删除n个texture object，当n小于0的时候，出现INVALID_VALUE的错误。
        textures保存的就是这些texture object的变量名。如果传入的变量名为0，或者对应的不是一个合法的texture object，那么API就会被忽略掉。
        这个函数没有输出参数。当texture object被删除之后，其中的内容也会被删掉，名字也会被释放，
        可以被glGenTextures重新使用。如果被删除的texture正在处于bind状态，那么就相当于先将该texture关联的纹理单元active，
        然后执行了一次glBindTexture把对应的binding变成binging 0，也就相当于什么都没有bind了。 */
    deleteTexture(texture) {
        let textureData = this._textureDataMap.get(texture.cachIndex);
        if (textureData && textureData.glTarget) {
            let set = textureData.bindTextureUnitSet;
            set.forEach((unit) => {
                let unitMap = this._textureUnit.get(unit);
                if (unitMap) {
                    unitMap.delete(textureData.glTarget);
                }
            });
            set.clear();
            this._textureDataMap.delete(texture.cachIndex);
            let frameBufferObj = this._nowUseFramebufferObject;
            if (frameBufferObj) {
                frameBufferObj.deAttachTexture(texture.cachIndex);
            }
        }
    }
    compressedTexImage2D(target, level, internalformat, width, height, border, data) {
        debugger;
        console.error("纹理优化这一章节暂时略过 没看 等完成webgl的实现再来看这一节");
    }
    compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data) {
        console.error("纹理优化这一章节暂时略过 没看 等完成webgl的实现再来看这一节");
    }
    /**window-system-provided framebuffer是由EGL创建的，无法被OpenGL ES所控制，
     * 而application-created framebuffer是由OpenGL ES创建、更改、销毁的。
     * 而 glGenFramebuffers 这 个 API,就是用于先创建 application-created framebuffer 的 name,然后再通过 API glBindFramebuffer 创建一个 FBO。
     * 先说 glGenFramebuffers,glBindFramebuffer 这个 API 一会再进行说明。
        window-system-provided framebuffer被创建的时候会关联一些color buffer、depth buffer（如果有）、stencil buffer（如果有）。
        而application-created framebuffer是不会自动创建及关联这些buffer的，所以又多了一个新的概念，叫做renderbuffer，
        renderbuffer对应了framebuffer中的color\depth\stencil等buffer，由于FBO是由OpenGL ES创建的，那么理所当然renderbuffer也是由OpenGL ES创建。
        而glGenRenderbuffers、glBindRenderbuffer和glRenderbufferStorage就是用于创建FBO对应的renderbuffer的，关于renderbuffer的API我们一会再说。
        这个函数的第一个输入参数的意思是该 API 会生成 n 个 framebuffer object name, 当 n 小于 0 的时候,出现 INVALID_VALUE 的错误。
        第二个输入参数用于保存被创建的 framebuffer object name。这些 framebuffer object name 其实也就是一些数字,
        而且假如一次性生成多个 framebuffer object name,那么它们没有必要必须是连续的数字。 framebuffer object name 是 uint 类型,
        而且 0 对应的就是window-system-provided framebuffer，已经被预留了，所以肯定是一个大于 0 的整数。
        这个函数没有输出参数。当创建成功的时候,会在第二个参数 framebuffer 中生成 n 个之前没有使用过的 framebuffer objects 的 name。
        然后这些 name 会被标记为已使用,而这个标记只对 glGenFramebuffers 这个 API 有效,也就是再通过这个 API 生成更多的 framebuffer object name 的时候,
        不会使用之前创建的这些 framebuffer objects name，除非这些framebuffer objects name由被glDeleteFramebuffers Delete掉。
         所以回忆一下,这一步其实只是创建了一些 framebuffer object name,而没有真正的创建 framebuffer object。
         而只有在这些 framebuffer object name 被 glBindFramebuffer 进行 bind 之后, 才会真正的创建对应的 framebuffer object。 */
    createFramebuffer() {
        return new PipelineData_1.CPUWebGLFramebuffer(globalFramebufferIndex++);
    }
    /**上一个 API glGenFramebuffers 只创建了一些 framebuffer object 的 name,glBindFramebuffer 这个 API 再创建一个 framebuffer object。
     *  这个函数的第一个输入参数的意思是指定 framebuffer object 的类型，framebuffer object目前只有一种类似，那就是GL_FRAMEBUFFER。
     * 那么在这里，第一个输入参数必须是 GL_FRAMEBUFFER 。如果传入其他的参数,就会报 INVALID_ENUM 的错误。
     * 第二个输入参数为刚才 glGenFramebuffers 得到的 framebuffer object name。
        这个函数没有输出参数,假如传入的 framebuffer 是刚被创建的 framebuffer object name,而且它还没有被创建和关联一个 framebuffer object,
        那么通过这个 API,就会生成一个 framebuffer object,且与这个 framebuffer object name 关联在一起,之后指定某个 framebuffer object name 的时候,
        也就相当于指定这个 framebuffer object。新创建的 framebuffer object 是一个空间为 0,且初始状态为默认值的 framebuffer object，
        一个FBO有一个color attachment挂载点、一个depth attachment挂载点、一个stencil attachment挂载点。然后创建和关联完毕之后,
        也就会把这个 framebuffer object 当作是当前 GPU 所使用的 framebuffer 了，也就是说OpenGL ES再次绘制的时候，
        将不再绘制到 window-system-provided framebuffer，而是绘制到这个FBO上了。
        而如果通过API glReadPixels、glCopyTexImage2D和glCopyTexSubImage2D进行读取的话，也将从这个FBO种进行读取。
        如果传入的 framebuffer 已经有关联的 framebuffer object 了,那么只是把该 framebuffer object 指定为当前 GPU 所使用的 framebuffer。
        然后 GPU 之前使用的 framebuffer 或者 FBO 就不再是处于被使用状态了。
        所以回忆一下,通过 glGenFramebuffers 创建一些 framebuffer object name,
        然后通过 glBindFramebuffer,给 framebuffer object name 创建和关联一个 framebuffer object,同时,通过这个 API,
        还将参数 framebuffer 对应的 framebuffer object 设置为目前 GPU 所使用的 framebuffer。虽然 GPU 中可以存放大量的 framebuffer object,
        但是同一时间一个 thread 的一 个 context 中只能有一个 framebuffer 是被使用着的。之后关于 framebuffer 的操作,
        比如查询 framebuffer 的状态等,就会直接操作 GL_FRAMEBUFFER ,而不会在使用 framebuffer object name 了。如果当前GL_FRAMEBUFFER 为0，
        那么查询或者修改GL_FRAMEBUFFER，则会出现GL_INVALID_OPERATION 的错误。所以,如果想使用某个 framebuffer object,
        必须先通过 glBindFramebuffer 这个 API,把这个 framebuffer 推出来,设置为 GPU 当前的 framebuffer。对FBO的操作，
        也就直接影响到FBO上挂载的attachment。
        初始的时候，相当于执行了glBindFramebuffer(GL_FRAMEBUFFER,0);上面也说了FBO 0对应着window-system-provided framebuffer，
        所以所有的操作的操作都是在window-system-provided framebuffer上进行操作。
        window-system-provided framebuffer 和application-created framebuffer的最主要的区别是：1. FBO的attachment可以修改。
        在OpenGL ES2.0中FBO只能有一个color attachment挂载点GL_COLOR_ATTACHMENT0、一个depth attachment挂载点GL_DEPTH_ATTACHMENT、
        一个stencil attachment挂载点GL_STENCIL_ATTACHMENT，而这三个挂载点初始都为GL_NONE，
        需要通过API glFramebufferRenderbuffer和glFramebufferTexture2D手动挂载。挂载到上面的RBO和texture也是由OpenGL ES来创建和控制。
        2. 无论读取还是写入，像素所有权测试总是通过(Patrick：什么是像素所有权测试？)。
        3. FBO的buffer无法像framebuffer那样可以被swap到屏幕上，所以OpenGL ES针对这种绘制叫做off-screen rendering。4.没有multisample buffer，
        所以针对FBO的 GL_SAMPLES 和GL_SAMPLE_BUFFERS 均为0。
        通过glBindFramebuffer active的FBO可以通过glBindFramebuffer bind另外一个FBO或者bind0的方式，或者是glDeleteFramebuffers的方式deactivate。
        framebuffer object name 和对应的 framebuffer object 和 shader 以及 program 一样,都属于一个 namespace,也就是可以被多个 share context 进行共享。 */
    bindFramebuffer(target, framebuffer) {
        if (target == this._gameGl.FRAMEBUFFER) {
            if (framebuffer) {
                let cachIndex = framebuffer.cachIndex;
                let framebufferObj = this._framebufferObjectMap.get(cachIndex);
                if (!framebufferObj) {
                    framebufferObj = new PipelineData_1.WebGLFramebufferObject(framebuffer);
                    this._framebufferObjectMap.set(cachIndex, framebufferObj);
                }
                this._nowUseFramebufferObject = framebufferObj;
            }
            else {
                // 重置为系统默认的fbo
                this._nowUseFramebufferObject = null;
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in bindFramebuffer");
        }
    }
    /**renderbuffer就是FBO上关联的一块buffer（texture也可以）。renderbuffer是由OpenGL ES创建和管理的，
     * 所以可以随意的将其与FBO进行attach和detach，甚至可以将其与多个FBO绑定，这样可以避免了数据copy以及减少了内存浪费。
     * 这一点window-system-provided framebuffer就做不到。
        renderbuffer被attach到FBO上后，当该FBO active后，这块renderbuffer就被作为OpenGL ES实际绘制和读取的目标。
        这个函数的第一个输入参数的意思是该 API 会生成 n 个 renderbuffer object name, 当 n 小于 0 的时候,
        出现 INVALID_VALUE 的错误。第二个输入参数用于保存被创建的 renderbuffer object name。
        这些 renderbuffer object name 其实也就是一些数字,而且假如一次性生成多个 renderbuffer object name,
        那么它们没有必要必须是连续的数字。 renderbuffer object name 是 uint 类型，而且 0 已经被预留了，
        虽然0并没有对应任何东西，所以肯定是一个大于 0 的整数。
        这个函数没有输出参数。当创建成功的时候,会在第二个参数 renderbuffer 中生成 n 个之前没有使用过的 renderbuffer objects 的 name。
        然后这些 name 会被标记为已使用,而这个标记只对 glGenRenderbuffers 这个 API 有效,
        也就是再通过这个 API 生成更多的 renderbuffer object name 的时候,不会使用之前创建的这些 renderbuffer objects name，
        除非这些renderbuffer objects name由被glDeleteRenderbuffers Delete掉。 所以回忆一下,
        这一步其实只是创建了一些 renderbuffer object name,而没有真正的创建 renderbuffer object。
        而只有在这些 renderbuffer object name 被 glBindRenderbuffer 进行 bind 之后, 才会真正的创建对应的 renderbuffer object。
        void glBindRenderbuffer(GLenum target, GLuint renderbuffer); */
    createRenderbuffer() {
        return new PipelineData_1.CPUWebGLRenderbuffer(globalRenderbufferIndex++);
    }
    /**上一个 API glGenRenderbuffers 只创建了一些 renderbuffer object 的 name,glBindRenderbuffer 这个 API 再创建一个 renderbuffer object。
     * 这个函数的第一个输入参数的意思是指定 renderbuffer object 的类型，renderbuffer object目前只有一种类似，那就是GL_RENDERBUFFER。
     * 那么在这里，第一个输入参数必须是 GL_RENDERBUFFER 。如果传入其他的参数,就会报 INVALID_ENUM 的错误。
     * 第二个输入参数为刚才 glGenRenderbuffers 得到的 renderbuffer object name。
        这个函数没有输出参数,假如传入的 renderbuffer 是刚被创建的 renderbuffer object name,而且它还没有被创建和关联一个 renderbuffer object,
        那么通过这个 API,就会生成一个 renderbuffer object,且与这个 renderbuffer object name 关联在一起,之后指定某个 renderbuffer object name 的时候,
        也就相当于指定这个 renderbuffer object。新创建的 renderbuffer object 是一个空间为 0,
        格式为GL_RGBA4，red, green, blue, alpha, depth, and stencil的像素位均为0，且初始状态为默认值的 renderbuffer object。
        然后创建和关联完毕之后,也就会把这个 renderbuffer object 当作是当前 GPU 所使用的 RBO 了。
        如果传入的 renderbuffer 已经有关联的 renderbuffer object 了,那么只是把该 renderbuffer object 指定为当前 GPU 所使用的 renderbuffer。
        然后 GPU 之前使用的 RBO 就不再是处于被使用状态了。
        所以回忆一下,通过 glGenRenderbuffers 创建一些 renderbuffer object name,然后通过 glBindRenderbuffer,
        给 renderbuffer object name 创建和关联一个 renderbuffer object,同时,通过这个 API,
        还将参数 renderbuffer 对应的 renderbuffer object 设置为目前 GPU 所使用的 renderbuffer。
        虽然 GPU 中可以存放大量的 renderbuffer object,但是同一时间一个 thread 的一 个 context 中只能有一个 renderbuffer 是被使用着的。
        之后关于 renderbuffer 的操作, 比如查询 renderbuffer 的状态等,就会直接操作 GL_RENDERBUFFER ,而不会在使用 renderbuffer object name 了。
        如果当前GL_RENDERBUFFER 为0，那么查询或者修改GL_RENDERBUFFER，则会出现 GL_INVALID_OPERATION 的错误。所以,如果想使用某个 renderbuffer object,
        必须先通过 glBindRenderbuffer 这个 API,把这个 renderbuffer 推出来,设置为 GPU 当前的 RBO。
        初始的时候，相当于执行了glBindRenderbuffer(GL_RENDERBUFFER,0);执行了这个，GL_RENDERBUFFER的binging就会恢复到初始状态。
        通过glBindRenderbuffer active的RBO可以通过glBindRenderbuffer bind另外一个RBO或者bind0的方式，或者是glDeleteRenderbuffers的方式deactivate。
        renderbuffer object name 和对应的 renderbuffer object 和 framebuffer object、shader 以及 program 一样,都属于一个 namespace,
        也就是可以被多个 share context 进行共享。 */
    bindRenderbuffer(target, renderbuffer) {
        if (target == this._gameGl.RENDERBUFFER) {
            if (renderbuffer) {
                let cachIndex = renderbuffer.cachIndex;
                let renderbufferObj = this._renderbufferObjectMap.get(cachIndex);
                if (!renderbufferObj) {
                    renderbufferObj = new PipelineData_1.WebGLRenderbufferObject(renderbuffer);
                    this._renderbufferObjectMap.set(cachIndex, renderbufferObj);
                }
                this._nowUseRenderbufferObject = renderbufferObj;
            }
            else {
                // 重置为系统默认的rbo
                this._nowUseRenderbufferObject = null;
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in bindRenderbuffer");
        }
    }
    /**通过上面2个API创建了一个size为0的RBO，虽然这个RBO可以attach到FBO上，但是依然无法被使用，
     * 因为绘制buffer尺寸怎么可以只为0呢，所以就通过glRenderbufferStorage这个API给RBO创建、初始化存储空间。
        这个函数的第一个输入参数的意思是指定 renderbuffer object 的类型，renderbuffer object目前只有一种类似，
        那就是GL_RENDERBUFFER。那么在这里，第一个输入参数必须是 GL_RENDERBUFFER 。如果传入其他的参数,就会报 INVALID_ENUM 的错误。
        由于RBO是将作为FBO的color/depth/stencil attachment，所以第二个输入参数internalformat必须为color/depth/stencil相关的格式。
        其中，如果该RBO将作为color attachment，那么internalformat必须为GL_RGBA4/GL_RGB5_A1/GL_RGB565，如果该RBO将作为depth attachment，
        那么internalformat必须为GL_DEPTH_COMPONENT16，如果该RBO将作为stencil attachment，那么internalformat必须为GL_STENCIL_INDEX8。
        否则，则会出现GL_INVALID_ENUM的错误。第三个和第四个参数width、height为RBO的尺寸，如果width或者height超过GL_MAX_RENDERBUFFER_SIZE，
        或者小于0，则会出现GL_INVALID_VALUE的错误。如果在执行这个API的时候，当前没有RBO active，
        也就是说当前处于glBindRenderbuffer(GL_RENDERBUFFER,0);的状态，则会出现GL_INVALID_OPERATION的错误。
        这个函数没有输出参数，如果OpenGL ES无法创建所需要尺寸的一块空间，则出现GL_OUT_OF_MEMORY的错误。
        如果该RBO之前就关联了一块空间，那么之前关联的空间将会被销毁。执行完这个命令后，新生成的这块buffer为undefined。
        虽然通过这个API创建的空间可以是各种各样的，但是一旦创建好之后，RBO的尺寸和格式将无法更改。 */
    renderbufferStorage(target, internalformat, width, height) {
        if (target == this._gameGl.RENDERBUFFER) {
            let renderbufferObj = this._nowUseRenderbufferObject;
            // 不能使用系统的
            if (renderbufferObj) {
                renderbufferObj.initBufferData(width, height, internalformat);
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in renderbufferStorage");
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in renderbufferStorage");
        }
    }
    /**通过上面5个api，创建了FBO和RBO，下面就要把RBO和FBO关联起来，所使用的函数，就是这个glFramebufferRenderbuffer。
     * 通过这个API可以将指定的RBO关联到GPU当前的FBO上。
        这个函数的第一个输入参数的意思是指定 framebuffer object 的类型，framebuffer object目前只有一种类似，那就是GL_FRAMEBUFFER。
        那么在这里，第一个输入参数必须是 GL_FRAMEBUFFER 。如果传入其他的参数,就会报 GL_INVALID_ENUM 的错误。
        如果当前GPU没有指定的FBO，也就是说当前GPU使用的是window-system-provided framebuffer的话，则会出现 GL_INVALID_OPERATION 的错误。
        第二个参数必须是FBO的3个挂载点之一，GL_COLOR_ATTACHMENT0, GL_DEPTH_ATTACHMENT or GL_STENCIL_ATTACHMENT，否则，则会出现GL_INVALID_ENUM 的错误。
        第三个参数renderbuffertarget和第四个参数renderbuffer相关，如果第四个参数为0，那么第三个参数就无所谓了，
        这样的话会把当前FBO的attachment point上attach的东西进行detach。但是如果第四个参数为一个非0的，
        那么第三个参数必须为GL_RENDERBUFFER ，否则则会出现 GL_INVALID_ENUM 的错误。而如果第四个参数不是0，
        也不是一个已有的RBO name，则会出现 GL_INVALID_OPERATION 的错误。
        这个函数没有输出参数，如果参数都无误，其中renderbuffer不为0，则该RBO就被attach到当前FBO的attachment point上了。
        GL的状态GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE就被设为GL_RENDERBUFFER，
        而GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME则会被设置为第四个参数renderbuffer了。
        （初始状态下，GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE ：GL_NONE；GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME ：0；
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL ：0 ；
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE ：GL_TEXTURE_CUBE_MAP_POSITIVE_X）其他attachment point的状态不变。
        当然，如果这个API执行出错，则所有状态都不变。
        需要注意的是，如果某个RBO被delete掉了，那么首先会把这个RBO从当前FBO的attachment point上detach掉（如果之前attach了的话）。
        但是如果该RBO还被attach到了其他FBO上，那么那些FBO上的该RBO不会自动detach，需要应用程序自己去完成这个工作。 */
    framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
        if (target == this._gameGl.FRAMEBUFFER) {
            let frameBufferObj = this._nowUseFramebufferObject;
            if (frameBufferObj) {
                if (!renderbuffer || renderbuffer.cachIndex === 0) {
                    if (attachment == this._gameGl.COLOR_ATTACHMENT0) {
                        frameBufferObj.clearColorAttach();
                    }
                    else if (attachment == this._gameGl.DEPTH_ATTACHMENT) {
                        frameBufferObj.clearDepthAttach();
                    }
                    else if (attachment == this._gameGl.STENCIL_ATTACHMENT) {
                        frameBufferObj.clearStencilAttach();
                    }
                    else {
                        renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in renderbufferStorage");
                    }
                }
                else {
                    if (renderbuffertarget == this._gameGl.RENDERBUFFER) {
                        let renderbufferObj = this._renderbufferObjectMap.get(renderbuffer.cachIndex);
                        if (renderbufferObj) {
                            if (attachment == this._gameGl.COLOR_ATTACHMENT0) {
                                frameBufferObj.setColorAttachByRender(renderbufferObj);
                            }
                            else if (attachment == this._gameGl.DEPTH_ATTACHMENT) {
                                frameBufferObj.setDepthAttachByRender(renderbufferObj);
                            }
                            else if (attachment == this._gameGl.STENCIL_ATTACHMENT) {
                                frameBufferObj.setStencilAttachByRender(renderbufferObj);
                            }
                            else {
                                renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in renderbufferStorage");
                            }
                        }
                        else {
                            renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in renderbufferStorage");
                        }
                    }
                }
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in framebufferRenderbuffer");
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferRenderbuffer");
        }
    }
    /**在本节的最开始就说了，FBO的buffer可以是RBO，还可以是texture，反正左右就是一块buffer。
     * texture的创建在OPENGL ES 2.0 知识串讲 (9) ——OPENGL ES 详解III(纹理)一节已经说的很清楚了，那么在这里就说，
     * 如何通过glFramebufferTexture2D这个API将texture attach到FBO上。
        OpenGL ES支持把framebuffer/FBO的内容通过APIglCopyTexImage2D copy到texture。那么在这里，其实OpenGL ES也支持直接往texture里面绘制内容，
        只要将该texture attach到FBO上即可。这个函数的第一个输入参数的意思是指定 framebuffer object 的类型，framebuffer object目前只有一种类似，
        那就是GL_FRAMEBUFFER。那么在这里，第一个输入参数必须是 GL_FRAMEBUFFER 。如果传入其他的参数,就会报 GL_INVALID_ENUM 的错误。
        如果当前GPU没有指定的FBO，也就是说当前GPU使用的是window-system-provided framebuffer的话，则会出现 GL_INVALID_OPERATION 的错误。
        第二个参数必须是FBO的3个挂载点之一，GL_COLOR_ATTACHMENT0, GL_DEPTH_ATTACHMENT or GL_STENCIL_ATTACHMENT，
        否则，则会出现GL_INVALID_ENUM 的错误。第三个参数textarget、第四个参数texture和第五个参数level相关，如果第四个参数为0，
        那么第三个参数和第五个参数就无所谓了，这样的话会把当前FBO的attachment point上attach的东西进行detach。但是如果第四个参数为一个非0的，
        而且指向一个2D的texture，那么第三个参数必须为GL_TEXTURE_2D ，否则则会出现 GL_INVALID_OPERATION 的错误。而如果第四个参数不是0，
        而且指向一个Cubemap的texture，那么第三个参数必须为GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z，
        否则则会出现GL_INVALID_OPERATION的错误。如果第四个参数不是0，也不是一个已有的texture name，则会出现 GL_INVALID_OPERATION 的错误。
        如果第四个参数不是0，且第三个参数不是GL_TEXTURE_2D，GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
        GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z，
        则会出现 GL_INVALID_ENUM 的错误。第五个参数level指的是该texture的mipmap，在这里必须为0，否则则会出现GL_INVALID_VALUE的错误。
        这个函数没有输出参数，如果参数都无误，其中texture不为0，则该texture就被attach到当前FBO的attachment point上了。
        GL的状态GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE就被设为GL_TEXTURE，而GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME则会被设置为第四个参数texture了，
        GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL也就会被设置为第五个参数level，也就还是0。如果传入的texture为cubemap的，
        则GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE也就被设置为第三个参数textarget了。其他attachment point的状态不变。
        当然，如果这个API执行出错，则所有状态都不变。
        需要注意的是，如果某个texture被delete掉了，那么首先会把这个texture从当前FBO的attachment point上detach掉（如果之前attach了的话）。
        但是如果该texture还被attach到了其他FBO上，那么那些FBO上的该texture不会自动detach，需要应用程序自己去完成这个工作。
        还有一点需要注意，被attach到当前FBO上的texture，不能作为shader的输入texture，否则就会出现从texture中读取信息，然后再写入该texture的问题。
        这种情况虽然看起来FBO是正常的，但是其实写入FBO的时候会出现undefined，读取texture也会出现undefined。除非第五个参数为0，
        而GL_TEXTURE_MIN_FILTER 不为 GL_NEAREST 和 GL_LINEAR，而是GL_NEAREST_MIPMAP_NEAREST, GL_NEAREST_MIPMAP_LINEAR, GL_LINEAR_MIPMAP_NEAREST,
         or GL_LINEAR_MIPMAP_LINEAR，而且真的没有采到纹理的第0层mipmap。(Patrick：这一点需要测试一下)
        类似的还有另外一种情况可能发生，就是一个texture作为当前FBO的color attachment，
        然后从这个FBO通过APIglCopyTexImage2D把color attachment内容读取到这个texture中，
        并且glCopyTexImage2D的第2个参数level等于attach到FBO的那个level，也就是0（否则应该不会有问题，(Patrick：这一点也需要测试一下)），
        那么又出现了从一个texture又读又写的情况，那么写入texture就会出现undefined的结果。 */
    framebufferTexture2D(target, attachment, textarget, texture, level) {
        if (target == this._gameGl.FRAMEBUFFER) {
            let frameBufferObj = this._nowUseFramebufferObject;
            if (frameBufferObj) {
                if (!texture) {
                    if (attachment == this._gameGl.COLOR_ATTACHMENT0) {
                        frameBufferObj.clearColorAttach();
                    }
                    else if (attachment == this._gameGl.DEPTH_ATTACHMENT) {
                        frameBufferObj.clearDepthAttach();
                    }
                    else if (attachment == this._gameGl.STENCIL_ATTACHMENT) {
                        frameBufferObj.clearStencilAttach();
                    }
                    else {
                        renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferTexture2D");
                    }
                }
                else {
                    let textureData = this._textureDataMap.get(texture.cachIndex);
                    if (textureData) {
                        if (textureData.glTarget == this._gameGl.TEXTURE_2D && textarget !== this._gameGl.TEXTURE_2D) {
                            renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in framebufferTexture2D");
                        }
                        else if (textureData.glTarget == this._gameGl.TEXTURE_CUBE_MAP &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_X &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_X &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Y &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Y &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_POSITIVE_Z &&
                            textarget !== this._gameGl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
                            renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in framebufferTexture2D");
                        }
                        else if (level !== 0) {
                            renderError("this._gameGl.INVALID_VALUE " + this._gameGl.INVALID_VALUE + " in framebufferTexture2D");
                        }
                        else {
                            if (attachment == this._gameGl.COLOR_ATTACHMENT0) {
                                frameBufferObj.setColorAttachByTex(textureData, textarget);
                            }
                            else if (attachment == this._gameGl.DEPTH_ATTACHMENT) {
                                frameBufferObj.setDepthAttachByTex(textureData, textarget);
                            }
                            else if (attachment == this._gameGl.STENCIL_ATTACHMENT) {
                                frameBufferObj.setStencilAttachByTex(textureData, textarget);
                            }
                            else {
                                renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferTexture2D");
                            }
                        }
                    }
                    else {
                        renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferTexture2D");
                    }
                }
            }
            else {
                renderError("this._gameGl.INVALID_OPERATION " + this._gameGl.INVALID_OPERATION + " in framebufferTexture2D");
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferTexture2D");
        }
    }
    /**当FBO准备好了之后，就可以被使用了，可以用glCheckFramebufferStatus这个API确认FBO是否准备好，然而FBO准备好，需要满足如下两个条件之一。
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 为 GL_NONE，也就是没有东西attach到FBO上。(Patrick：这一点需要测试一下)
        GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 不为 GL_NONE，并且attach的buffer宽高非0，
        且RBO/texture格式匹配（GL_COLOR_ATTACHMENT0 format为GL_RGBA4/GL_RGB5_A1/GL_RGB565，
        GL_DEPTH_ATTACHMENT format为GL_DEPTH_COMPONENT16，GL_STENCIL_ATTACHMENT format为GL_STENCIL_INDEX8）。
        也就是说，至少有一个RBO/texture attach到FBO上，否则就会出现GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT的错误。
        这个attach还必须是没问题的，否则就会出现GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT的错误
        （比如FBO上attach的某个RBO/texture被delete掉了，或者width\height为0，或者格式不匹配）。
        所有attach的RBO/texture的尺寸必须完全一致，否则就会出现GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS的错误。
        几个attachment的组合不违背平台的设计，否则就会出现GL_FRAMEBUFFER_UNSUPPORTED(Patrick：这一点从没关注过，也无所谓吧)
        当然，如果使用windows-system-provided framebuffer，肯定是framebuffer complete。
        如下操作会改变framebuffer complete的状态：
        通过glBindFramebuffer切换FBO
        通过glFramebufferRenderbuffer和glFramebufferTexture2D改变/detach FBO的attachment
        通过glTexImage2D, glCopyTexImage2D和glCompressedTexImage2D改变FBO上attach的texture的尺寸/格式
        通过glRenderbufferStorage改变FBO上attach的RBO的尺寸/格式
        通过glDeleteTextures或者glDeleteRenderbuffers删除当前FBO上attach的RBO/texture
        由于framebuffer是否complete很重要，所以建议在绘制之前调用一下这个API。
        这个函数的第一个输入参数必须是 GL_FRAMEBUFFER 。如果传入其他的参数,就会报 GL_INVALID_ENUM 的错误
        如果这个函数的执行出现错误，则返回0。如果framebuffer complete，则返回GL_FRAMEBUFFER_COMPLETE。如果framebuffer非complete，则返回相应的enum。
        如果framebuffer不complete，那么使用当前FBO去读操作（glReadPixels, glCopyTexImage2D, glCopyTexSubImage2D）
        和写操作（glClear, glDrawArrays, glDrawElements），就会出现GL_INVALID_FRAMEBUFFER_OPERATION 的错误。 */
    checkFramebufferStatus(target) {
        let status = this._gameGl.INVALID_ENUM;
        if (target == this._gameGl.FRAMEBUFFER) {
            if (this._nowUseFramebufferObject) {
                // 判断至少应该有颜色attach
                if (this._nowUseFramebufferObject.colorAttachPoint) {
                    // 自身不做尺寸 FRAMEBUFFER_UNSUPPORTED的校验了
                    status = this._gameGl.FRAMEBUFFER_COMPLETE;
                }
                else {
                    status = this._gameGl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
                }
            }
            else {
                // 系统的应该是默认成功
                status = this._gameGl.FRAMEBUFFER_COMPLETE;
            }
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in framebufferTexture2D");
        }
        return status;
    }
    /**当某个 FBO 不再被需要的时候,则可以通过 glDeleteFramebuffers 这个 API 把 framebuffer object name 删除。
        这个函数输入参数的意思是该 API 会删除 n 个 framebuffer object,当 n 小于 0 的 时候,出现 GL_INVALID_VALUE 的错误。
        framebuffer 保存的就是这些 framebuffer object 的变量名。如果传入的变量名为 0,或者对应的不是一个合法的 framebuffer object,那么 API 就会被忽略掉。
        这个函数没有输出参数。当 framebuffer object 被删除之后,其中attach的物件会被自动detach,
        名字也会被释放,可以被 glGenFramebuffers 重新使用。如果被删除的 framebuffer 正在处于 bind 状态,
        那么就相当于先执行了一次 glBindFramebuffer 把GPU当前的 framebuffer 变回使用window-system-provided framebuffer,然后再进行删除。 */
    deleteFramebuffer(framebuffer) {
        if (framebuffer) {
            let cachIndex = framebuffer.cachIndex;
            let frameBufferObj = this._framebufferObjectMap.get(cachIndex);
            if (cachIndex !== 0 && frameBufferObj) {
                this._framebufferObjectMap.delete(cachIndex);
                if (this._nowUseFramebufferObject === frameBufferObj) {
                    this._nowUseFramebufferObject = null;
                }
            }
        }
    }
    /**当某个 RBO 不再被需要的时候,则可以通过 glDeleteRenderbuffers 这个 API 把 renderbuffer object name 删除。
        这个函数输入参数的意思是该 API 会删除 n 个 renderbuffer object,当 n 小于 0 的 时候,出现 GL_INVALID_VALUE 的错误。
         renderbuffer 保存的就是这些 renderbuffer object 的变量名。如果传入的变量名为 0,
         或者对应的不是一个合法的 renderbuffer object,那么 API 就会被忽略掉。
        这个函数没有输出参数。当 renderbuffer object 被删除之后,其内容会被全部清空，
        所占用的空间也会被全部释放,名字也会被释放,可以被 glGenRenderbuffers 重新使用。
        如果被删除的 renderbuffer 正在处于 bind 状态,那么就相当于先执行了一次 glBindRenderbuffer 把GPU当前的 RBO 变成 binging 0,
        也就相当于什么都没有 bind 了,然后再进行删除。另外就是，当这个RBO被attach到当前FBO的时候，删除这个RBO会自动从当前FBO detach，
        导致当前FBO framebuffer incomplete，所以需要格外注意。 */
    deleteRenderbuffer(renderbuffer) {
        if (renderbuffer) {
            let cachIndex = renderbuffer.cachIndex;
            let renderbufferObj = this._renderbufferObjectMap.get(cachIndex);
            if (cachIndex !== 0 && renderbufferObj) {
                this._renderbufferObjectMap.delete(cachIndex);
                if (this._nowUseRenderbufferObject === renderbufferObj) {
                    this._nowUseRenderbufferObject = null;
                }
                if (this._nowUseFramebufferObject) {
                    this._nowUseFramebufferObject.deAttachRenderBufferPoint(cachIndex);
                }
            }
        }
    }
    /**
     * Scissor Test会判断当前fragment是否处于Scissor规定的矩形区域中，矩形区域是通过glScissor这个API传入的四个参数确定的。
        这个函数有4个输入参数，用于确定一个矩形区域。如果 x 小于 Xw 小于 x + width 且 y 小于 Yw 小于 y + height，
        则说明（Xw, Yw）确定的这个fragment在矩形区域内，则Scissor Test通过。
        反之，如果不通过，这个fragment则会被抛弃。Scissor Test是通过glEnable和glDisable这个API，
        传入参数GL_SCISSOR_TEST来进行开关。如果关闭的话，则Scissor Test一直pass。
        如果第三个参数width和第四个参数height小于0，则出现GL_INVALID_VALUE的错误。
        默认状态下第一个参数x和第二个参数y初始值为0，第三个参数width和第四个参数height为GL Window的尺寸。
        而Scissor Test默认为关闭状态。 */
    scissor(x, y, width, height) {
        this._scissorRect = new Rect_1.Rect(x, y, width, height);
    }
    /*
    由于OpenGL ES为3D API，那么绘制的物件当然也是3D的，但是framebuffer是2D的，
    而其实我们传入的顶点是3D的，也就是说其实有一张depth buffer
    （不管是window-system-provided framebuffer还是application-created framebuffer），
    物件的Z值是写在这张buffer中。当绘制开始的时候，会通过glClear这个API，传入GL_DEPTH_BUFFER_BIT，
    将depth buffer中的值统一为glClearDepthf设定的值。通过VS和光栅化计算好顶点3D坐标后，
    将Z值与depth buffer中的值进行Test，Test方法由glDepthFunc确定，如果失败，则丢弃该像素，
    如果通过，则算是通过了Depth Test，下一步再进行Stencil Test。Stencil Test与Depth Test类似而又稍有不同，
    具体情况下面通过API串讲来进行说明。
    */
    /**
     * 不管是window-system-provided framebuffer还是application-created framebuffer，
     * 其关联的buffer，不管是color buffer还是depth buffer还是stencil buffer，
     * 在刚被创建好的时候，并不会被初始化，那么根据平台不同，里面保存的东西可能不同，
     * 就好比我们虽然准备了一张画纸，但是这个画纸上面可能原本就有东西，这些东西是不确定的，
     * 所以我们先要把这张画图涂上底色，而我们可能希望这个画纸的底色是白色，也有可能希望是黑色的，
     * 或者其他颜色，而glClearDepthf这个API，就是设定一种Z值，作为统一 depth buffer所使用的Z值。
        这个函数只有1个输入参数，用于确定Z值，供统一 depth buffer使用的。这个输入参数初始值为1。
        在输入的时候这个值可以随意填写，但是会被闭区间[0,1]进行clamp。
        这个函数没有输出参数，通过这个API确定的Z值，会被用于glClear，用于统一 depth buffer使用。
     */
    clearDepth(depth) {
        this._defaultDepth = depth;
    }
    /**如果Depth Test失败，该pixel将被discard，depth buffer也不会更新。
     * Depth Test是由glEnable和glDisable这个API，传入参数GL_DEPTH_TEST来进行开关。
     * 如果disable了，Depth Test和Depth buffer的写入操作将会被跳过，直接进行下一个操作。
     * 而Stencil值是否会被在Stencil buffer中进行更新，则以下文为准（Depth Test当做通过Depth Test处理）。
     * 如果enable，Depth Test则正常进行。
        这个函数只有1个输入参数，用于确定Depth Test的对比函数。
        只接受GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, GL_ALWAYS。
        否则，则会出现GL_INVALID_ENUM的错误。默认为GL_LESS，也就是说如果这次Draw Call获得的Z值小于Depth buffer中对应位置存储的Z值，
        则Depth Test通过，Z值将写入Depth buffer。否则Depth Test失败，Z值将不被写入Depth Test，但是有一点，无论Depth Test成功失败，
        Stencil 都会根据设定判断是否需要写入Stencil Buffer。
        这个函数没有输出参数。默认情况下Depth Test是处于关闭状态。如果没有depth buffer
        （比如通过API egl CreateWindowSurface创建的surface config不包含depth bit或者使用FBO的时候压根没有attach depth attachment），
        则认定Depth Test Always Pass。 */
    depthFunc(func) {
        if (func === this._gameGl.NEVER ||
            func === this._gameGl.LESS ||
            func === this._gameGl.EQUAL ||
            func === this._gameGl.LEQUAL ||
            func === this._gameGl.GREATER ||
            func === this._gameGl.GEQUAL ||
            func === this._gameGl.ALWAYS)
            this._depthJudgeFunc = func;
    }
    /**
     * glDepthMask 是用于控制 depth buffer 的写入权限。
        这个函数只有1个输入参数，用于确定depth buffer是否有写入权限，
        如果传入的为GL_TRUE，则说明depth buffer有写入权限。
        初始状态下，depth buffer是可写的。当传入GL_FALSE的时候，depth buffer不可写。
     */
    depthMask(flag) {
        this._depthWriteEnable = flag;
    }
    /**
     * 将Depth值从NDC（normalized device coordinate）转到window坐标系下，
     * 然后再写入depth buffer中。计算公式为Zw = (f-n)*Zd/2+(n+f)/2。
     这个函数有2个输入参数。第一个参数nearVal用于确定近裁剪面在window坐标系下的坐标。
     初始值为0。第二个参数farVal用于确定远裁剪面在window坐标系下的坐标。
     初始值为1。Depth在NDC空间是经过了除以W的操作，所以depth值为-1到1，考虑到远近裁剪面，
     glDepthRangef将Depth线性的从NDC转到了window坐标系下。不考虑depth buffer的实际构造，window坐标系下depth值被认为是0到1。
     所以两个输入参数都会被闭区间[0,1]进行clamp，这样得到的depth值也将会是0到1。nearVal不一定比farVal小，比如nearVal=1，farVal=0也可以。
      */
    depthRange(zNear, zFar) {
        this._zNear = lodash_1.clamp(zNear, 0, 1);
        this._zFar = lodash_1.clamp(zFar, 0, 1);
    }
    /**
     * 经过glDepthRangef算出来的window坐标系下的Z值，经过光栅化后，可以通过glPolygonOffset做整体偏移。
     * 这个操作将在光栅化之后，以及depth test以及写入depth buffer之前。
     * 这个API主要是用于绘制hidden-line图片（比如墙后面的人，用线框表示），或者表面上的贴花，或者描边。
        这个函数有2个输入参数。第一个参数factor和第二个参数units将会用于一个公式，
        算出一个offset，然后加到depth值上。offset = factor × DZ + r × units。
        DZ 与屏幕空间中整个polygon的depth值的变化范围有关。范围为[0, 1]。
        units是个平台相关的一个常数，代表着depth偏移量的最小单位。第一个参数factor和第二个参数units的初始值都为0，两个值正负都可以。
        这个函数没有输出参数。而这个函数的执行受到 GL_POLYGON_OFFSET_FILL 的限制，如果通过API glEnable打开GL_POLYGON_OFFSET_FILL，
        那么光栅化生成的polygon上的每个depth值都要加上这个offset。但是无论如何offset，depth值无论如何都在[0, 1]。
     */
    polygonOffset(factor, units) {
        console.error("polygonOffset 不是很懂 暂时不做");
    }
    stencilFunc(func, ref, mask) {
        console.error("stencilFunc 不是很懂 暂时不做");
    }
    stencilFuncSeparate(face, func, ref, mask) {
        console.error("stencilFuncSeparate 不是很懂 暂时不做");
    }
    stencilMask(mask) {
        console.error("stencilMask 不是很懂 暂时不做");
    }
    stencilMaskSeparate(face, mask) {
        console.error("stencilMaskSeparate 不是很懂 暂时不做");
    }
    stencilOp(fail, zfail, zpass) {
        console.error("stencilOp 不是很懂 暂时不做");
    }
    stencilOpSeparate(face, fail, zfail, zpass) {
        console.error("stencilOpSeparate 不是很懂 暂时不做");
    }
    blendColor(red, green, blue, alpha) {
        this._blendFactorColor = new BuiltinData_1.Vec4Data(lodash_1.clamp(red, 0, 1), lodash_1.clamp(green, 0, 1), lodash_1.clamp(blue, 0, 1), lodash_1.clamp(alpha, 0, 1));
    }
    blendEquation(mode) {
        if (mode === this._gameGl.FUNC_ADD || mode === this._gameGl.FUNC_SUBTRACT || mode === this._gameGl.FUNC_REVERSE_SUBTRACT) {
            this._rgbComputerBlendFunc = mode;
            this._alphaComputerBlendFunc = mode;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendEquation");
        }
    }
    blendEquationSeparate(modeRGB, modeAlpha) {
        if (modeRGB === this._gameGl.FUNC_ADD || modeRGB === this._gameGl.FUNC_SUBTRACT || modeRGB === this._gameGl.FUNC_REVERSE_SUBTRACT) {
            this._rgbComputerBlendFunc = modeRGB;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendEquationSeparate");
        }
        if (modeAlpha === this._gameGl.FUNC_ADD ||
            modeAlpha === this._gameGl.FUNC_SUBTRACT ||
            modeAlpha === this._gameGl.FUNC_REVERSE_SUBTRACT) {
            this._alphaComputerBlendFunc = modeAlpha;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendEquationSeparate");
        }
    }
    // src是片元产生的 dest是屏幕上的
    blendFunc(sfactor, dfactor) {
        if (sfactor === this._gameGl.ZERO ||
            sfactor === this._gameGl.ONE ||
            sfactor === this._gameGl.SRC_COLOR ||
            sfactor === this._gameGl.ONE_MINUS_SRC_COLOR ||
            sfactor === this._gameGl.DST_COLOR ||
            sfactor === this._gameGl.ONE_MINUS_DST_COLOR ||
            sfactor === this._gameGl.SRC_ALPHA ||
            sfactor === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            sfactor === this._gameGl.DST_ALPHA ||
            sfactor === this._gameGl.ONE_MINUS_DST_ALPHA ||
            sfactor === this._gameGl.CONSTANT_COLOR ||
            sfactor === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            sfactor === this._gameGl.CONSTANT_ALPHA ||
            sfactor === this._gameGl.ONE_MINUS_CONSTANT_ALPHA ||
            sfactor === this._gameGl.SRC_ALPHA_SATURATE) {
            this._rgbSrcBlendFunc = sfactor;
            this._alphaSrcBlendFunc = sfactor;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
        if (dfactor === this._gameGl.ZERO ||
            dfactor === this._gameGl.ONE ||
            dfactor === this._gameGl.SRC_COLOR ||
            dfactor === this._gameGl.ONE_MINUS_SRC_COLOR ||
            dfactor === this._gameGl.DST_COLOR ||
            dfactor === this._gameGl.ONE_MINUS_DST_COLOR ||
            dfactor === this._gameGl.SRC_ALPHA ||
            dfactor === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            dfactor === this._gameGl.DST_ALPHA ||
            dfactor === this._gameGl.ONE_MINUS_DST_ALPHA ||
            dfactor === this._gameGl.CONSTANT_COLOR ||
            dfactor === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            dfactor === this._gameGl.CONSTANT_ALPHA ||
            dfactor === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
            this._rgbDestBlendFunc = dfactor;
            this._alphaDestBlendFunc = dfactor;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
    }
    blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {
        if (srcRGB === this._gameGl.ZERO ||
            srcRGB === this._gameGl.ONE ||
            srcRGB === this._gameGl.SRC_COLOR ||
            srcRGB === this._gameGl.ONE_MINUS_SRC_COLOR ||
            srcRGB === this._gameGl.DST_COLOR ||
            srcRGB === this._gameGl.ONE_MINUS_DST_COLOR ||
            srcRGB === this._gameGl.SRC_ALPHA ||
            srcRGB === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            srcRGB === this._gameGl.DST_ALPHA ||
            srcRGB === this._gameGl.ONE_MINUS_DST_ALPHA ||
            srcRGB === this._gameGl.CONSTANT_COLOR ||
            srcRGB === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            srcRGB === this._gameGl.CONSTANT_ALPHA ||
            srcRGB === this._gameGl.ONE_MINUS_CONSTANT_ALPHA ||
            srcRGB === this._gameGl.SRC_ALPHA_SATURATE) {
            this._rgbSrcBlendFunc = srcRGB;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
        if (srcAlpha === this._gameGl.ZERO ||
            srcAlpha === this._gameGl.ONE ||
            srcAlpha === this._gameGl.SRC_COLOR ||
            srcAlpha === this._gameGl.ONE_MINUS_SRC_COLOR ||
            srcAlpha === this._gameGl.DST_COLOR ||
            srcAlpha === this._gameGl.ONE_MINUS_DST_COLOR ||
            srcAlpha === this._gameGl.SRC_ALPHA ||
            srcAlpha === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            srcAlpha === this._gameGl.DST_ALPHA ||
            srcAlpha === this._gameGl.ONE_MINUS_DST_ALPHA ||
            srcAlpha === this._gameGl.CONSTANT_COLOR ||
            srcAlpha === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            srcAlpha === this._gameGl.CONSTANT_ALPHA ||
            srcAlpha === this._gameGl.ONE_MINUS_CONSTANT_ALPHA ||
            srcAlpha === this._gameGl.SRC_ALPHA_SATURATE) {
            this._alphaSrcBlendFunc = srcAlpha;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
        if (dstRGB === this._gameGl.ZERO ||
            dstRGB === this._gameGl.ONE ||
            dstRGB === this._gameGl.SRC_COLOR ||
            dstRGB === this._gameGl.ONE_MINUS_SRC_COLOR ||
            dstRGB === this._gameGl.DST_COLOR ||
            dstRGB === this._gameGl.ONE_MINUS_DST_COLOR ||
            dstRGB === this._gameGl.SRC_ALPHA ||
            dstRGB === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            dstRGB === this._gameGl.DST_ALPHA ||
            dstRGB === this._gameGl.ONE_MINUS_DST_ALPHA ||
            dstRGB === this._gameGl.CONSTANT_COLOR ||
            dstRGB === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            dstRGB === this._gameGl.CONSTANT_ALPHA ||
            dstRGB === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
            this._rgbDestBlendFunc = dstRGB;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
        if (dstAlpha === this._gameGl.ZERO ||
            dstAlpha === this._gameGl.ONE ||
            dstAlpha === this._gameGl.SRC_COLOR ||
            dstAlpha === this._gameGl.ONE_MINUS_SRC_COLOR ||
            dstAlpha === this._gameGl.DST_COLOR ||
            dstAlpha === this._gameGl.ONE_MINUS_DST_COLOR ||
            dstAlpha === this._gameGl.SRC_ALPHA ||
            dstAlpha === this._gameGl.ONE_MINUS_SRC_ALPHA ||
            dstAlpha === this._gameGl.DST_ALPHA ||
            dstAlpha === this._gameGl.ONE_MINUS_DST_ALPHA ||
            dstAlpha === this._gameGl.CONSTANT_COLOR ||
            dstAlpha === this._gameGl.ONE_MINUS_CONSTANT_COLOR ||
            dstAlpha === this._gameGl.CONSTANT_ALPHA ||
            dstAlpha === this._gameGl.ONE_MINUS_CONSTANT_ALPHA) {
            this._alphaDestBlendFunc = dstAlpha;
        }
        else {
            renderError("this._gameGl.INVALID_ENUM " + this._gameGl.INVALID_ENUM + " in blendFunc");
        }
    }
    clearStencil(s) {
        // debugger
        console.warn("clearStencil 还未实现");
    }
}
exports.CpuRenderingContext = CpuRenderingContext;
exports.cpuRenderingContext = new CpuRenderingContext();
/**感觉是个无用api合集
 *
 * 直接使用系统指定的不就可以了。。。暂时不实现
这种 bind 属于 GL 的当前状态,也就是说它并不仅仅是一个 program 的行为。
比如我们对一个 program A 的 attribute A 绑定为 location 1,假如我们突然通过 glUseProgram 开始使用 program B 了,不再使用 program A 了,
那么假如 program B 中也有 Attribute A,那么这个 Attribute A 的 location 也为 1,这个需要特别注意的。

    bindAttribLocation(programIndex: WebGLProgram, index: GLuint, name: string): void {
        let program = this._webGLProgramMap.get((<CPUWebGLProgram>programIndex).cachIndex)!

        if (program === undefined) {
            renderError("this._gameGl.INVALID_VALUE  " + this._gameGl.INVALID_VALUE + " in bindAttribLocation ")
        } else {
        }
        renderError("bindAttribLocation not imm")
    }

    感觉这个api也没啥用
    直接指定顶点对应属性数据
    vertexAttrib1f(index: GLuint, x: GLfloat): void {}
    vertexAttrib1fv(index: GLuint, values: Float32List): void {}
    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void {}
    vertexAttrib2fv(index: GLuint, values: Float32List): void {}
    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {}
    vertexAttrib3fv(index: GLuint, values: Float32List): void {}
    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {}
    vertexAttrib4fv(index: GLuint, values: Float32List): void {}

    // 对画线应该没什么需求
    lineWidth(width: GLfloat): void{}
 */
// finish(): void;
// flush(): void;
// sampleCoverage(value: GLclampf, invert: GLboolean): void;
// readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;
// isTexture(texture: WebGLTexture | null): GLboolean;
// isBuffer(buffer: WebGLBuffer | null): GLboolean;
// isContextLost(): boolean;
// isEnabled(cap: GLenum): GLboolean;
// isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;
// isProgram(program: WebGLProgram | null): GLboolean;
// isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;
// isShader(shader: WebGLShader | null): GLboolean;
// getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;
// getBufferParameter(target: GLenum, pname: GLenum): any;
// getContextAttributes(): WebGLContextAttributes | null;
// getError(): GLenum;
// getExtension(extensionName: string): any;
// getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;
// getRenderbufferParameter(target: GLenum, pname: GLenum): any;
// getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;
// getShaderSource(shader: WebGLShader): string | null;
// getSupportedExtensions(): string[] | null;
// getTexParameter(target: GLenum, pname: GLenum): any;
// getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;
// getVertexAttrib(index: GLuint, pname: GLenum): any;
// getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;
// getExtension(extensionName: "EXT_blend_minmax"): EXT_blend_minmax | null;
// getExtension(extensionName: "EXT_texture_filter_anisotropic"): EXT_texture_filter_anisotropic | null;
// getExtension(extensionName: "EXT_frag_depth"): EXT_frag_depth | null;
// getExtension(extensionName: "EXT_shader_texture_lod"): EXT_shader_texture_lod | null;
// getExtension(extensionName: "EXT_sRGB"): EXT_sRGB | null;
// getExtension(extensionName: "OES_vertex_array_object"): OES_vertex_array_object | null;
// getExtension(extensionName: "WEBGL_color_buffer_float"): WEBGL_color_buffer_float | null;
// getExtension(extensionName: "WEBGL_compressed_texture_astc"): WEBGL_compressed_texture_astc | null;
// getExtension(extensionName: "WEBGL_compressed_texture_s3tc_srgb"): WEBGL_compressed_texture_s3tc_srgb | null;
// getExtension(extensionName: "WEBGL_debug_shaders"): WEBGL_debug_shaders | null;
// getExtension(extensionName: "WEBGL_draw_buffers"): WEBGL_draw_buffers | null;
// getExtension(extensionName: "WEBGL_lose_context"): WEBGL_lose_context | null;
// getExtension(extensionName: "WEBGL_depth_texture"): WEBGL_depth_texture | null;
// getExtension(extensionName: "WEBGL_debug_renderer_info"): WEBGL_debug_renderer_info | null;
// getExtension(extensionName: "WEBGL_compressed_texture_s3tc"): WEBGL_compressed_texture_s3tc | null;
// getExtension(extensionName: "OES_texture_half_float_linear"): OES_texture_half_float_linear | null;
// getExtension(extensionName: "OES_texture_half_float"): OES_texture_half_float | null;
// getExtension(extensionName: "OES_texture_float_linear"): OES_texture_float_linear | null;
// getExtension(extensionName: "OES_texture_float"): OES_texture_float | null;
// getExtension(extensionName: "OES_standard_derivatives"): OES_standard_derivatives | null;
// getExtension(extensionName: "OES_element_index_uint"): OES_element_index_uint | null;
// getExtension(extensionName: "ANGLE_instanced_arrays"): ANGLE_instanced_arrays | null;


/***/ }),

/***/ "./ts/src/webglImpl/GlHack.ts":
/*!************************************!*\
  !*** ./ts/src/webglImpl/GlHack.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const FileSaver_1 = __webpack_require__(/*! ../FileSaver */ "./ts/src/FileSaver.ts");
const GLSLInterpreter_1 = __webpack_require__(/*! ../glslCompiler/GLSLInterpreter */ "./ts/src/glslCompiler/GLSLInterpreter.ts");
const CpuRenderingContext_1 = __webpack_require__(/*! ./CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const GlslShaderHackScript_1 = __webpack_require__(/*! ./GlslShaderHackScript */ "./ts/src/webglImpl/GlslShaderHackScript.ts");
let SparkMD5 = __webpack_require__(/*! Spark-md5 */ "./node_modules/Spark-md5/spark-md5.js");
var GlDebugMode;
(function (GlDebugMode) {
    GlDebugMode[GlDebugMode["none"] = 0] = "none";
    GlDebugMode[GlDebugMode["debugCpuRender"] = 1] = "debugCpuRender";
    GlDebugMode[GlDebugMode["createTsImplGlslFile"] = 2] = "createTsImplGlslFile";
    GlDebugMode[GlDebugMode["replaceShaderSource"] = 3] = "replaceShaderSource";
})(GlDebugMode || (GlDebugMode = {}));
let win = window;
let showGlDebugLog = win.showGlDebugLog || false;
let debugCpuRender = win.glDebugMode == GlDebugMode.debugCpuRender;
let createTsImplGlslFile = win.glDebugMode == GlDebugMode.createTsImplGlslFile;
let replaceShaderSource = win.glDebugMode == GlDebugMode.replaceShaderSource;
let compilerTsFiles = new Map();
let testShaderSourceNum = 0;
// let testShaderBegin: number = 62
let testShaderBegin = 0;
let testShaderEnd = 1000;
function testTmpFunc() {
    // if (testShaderSourceNum == 1) {
    //     shaderSource = `#define CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS 37
    // #define CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS 53
    // #define CC_RECEIVE_SHADOW 0
    // #define CC_USE_IBL 0
    // #define USE_LIGHTMAP 0
    // #define USE_BATCHING 0
    // #define CC_FORWARD_ADD 0
    // #define CC_USE_HDR 0
    // #define CC_PIPELINE_TYPE 0
    // #define CC_USE_FOG 0
    // precision highp float;
    // struct StandardVertInput {
    // float asd;
    // highp vec4 position;
    // vec3 normal;
    // vec4 tangent;
    // vec4 testasdf[4][4];
    // vec4 mat45[4][4];
    // };
    // attribute vec3 a_position;
    // attribute vec3 a_normal;
    // attribute vec2 a_texCoord;
    // attribute vec4 a_tangent;
    // uniform highp vec4 cc_cameraPos;
    // varying vec2 v_uv;
    // void test1Func(float asvdsx, inout float asv, in float qwes, out float qwescxs){
    // }
    // void test2Func(in float asv){
    // }
    // void test3Func(out float asv){
    // }
    // void test4Func(float asv){
    // }
    // void main () {
    // vec4 forFragTest[4];
    // forFragTest[0].xyz = vec3(2);
    // forFragTest[0] = vec4(1);
    // mat4 testMat4asd;
    // testMat4asd[0][0] = 1.;
    // StandardVertInput sasd;
    // mat4 eqwsd[4];
    // eqwsd[0][0][0] = 1.;
    // vec4 color;
    // color.xyz = vec3();
    // test1Func((color.x + color.y + color.z + color).z , color.y, color.z, color.w);
    // float lumaB;
    // color.x = color.y = color.z = lumaB;
    // float lumaMin;
    // float lumaMax;
    // // if ((lumaB < lumaMin) || (lumaB > lumaMax)){
    // //     color = vec4(2);
    // // }else{
    // //     color = vec4(2);
    // // }
    // if ((lumaB < lumaMin) || (lumaB > lumaMax))
    //     color = vec4(2);
    // else if (lumaB < lumaMin)
    //     color = vec4(2);
    // else if (lumaB > lumaMax)
    //     color = vec4(2);
    // else
    //     color = vec4(2);
    // bool tqweqwe = false;
    // if (tqweqwe){}
    // float a;
    // if (a > 0.9){
    // }else if(a > 0.8){
    // }else if(a > 0.7){
    // }else{
    // }
    // tqweqwe = a > 0.;
    // for (int i = 1; (i < 3); i++) {
    //     int tes = 3;
    // }
    // mat3 matrix3 = mat3(1.,1.,1.,1.,1.,1.,0.1,0.2,0.3);
    // mat4 matrix4 = mat4(matrix3);
    // matrix4[0][0] = 0.;
    // vec4 matrix4Test = matrix4[0];
    // // matrix4Test.x = 0.;
    // // matrix4Test.y = 0.;
    // // matrix4Test.z = 0.;
    // // matrix4Test.w = 1.;
    // matrix4[0] = matrix4Test;
    // matrix4[0][1] = 0.;
    // matrix4[0][2] = 0.;
    // vec3 I = vec3(1,0,0);
    // I[2] = 3.;
    // I[2] *= 3.;
    // I.x *= 3;
    // a++;
    // a--;
    // ++a;
    // --a;
    // float gg =3., bb, tt = 1;
    // float b;
    // float c;
    // float wwww, www = a, zzz = b = c = 1. + gg + I.x;
    // float fDeltaD, fDeltaY, fDensityIntegral, fDensity;
    // fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;
    // I = -I;
    // StandardVertInput s;
    // v_uv.x = 2. * vec2(s.tangent.xy + 1.).x;
    // I += 3.;
    // I += I.zyx;
    // I -= I.zyx;
    // I -= 3.;
    // I *= 1.;
    // I /= 1.;
    // a = a + b * c;
    // a = (a + b) * c;
    // vec3 N = vec3(0.5,0.5,0.5);
    // // vec2 yx = vec2(I.xy + (c + (a + b * c * (a + b) * c) * b + I.x + dot(I, N)));
    // // v_uv.x = 2. + vec2(I.xy + (c + (a + b * c * (a + b) * c) * b + I.x + dot(I, N))).x;
    // s.tangent.xy = vec2();
    // a = (s.tangent.x + b) * s.tangent.z;
    // if ((v_uv.x != a * b) ){
    //   vec2 v_uv;
    //   v_uv = vec2(1,1);
    // }else{
    //   vec2 v_uv;
    //   v_uv = vec2(0,0);
    // }
    // vec2 stepTest = step(v_uv, v_uv);
    // vec4 position;
    // position = vec4(a_position, 1.0);
    // position.xy = cc_cameraPos.w == 0.0 ? vec2(position.xy.x, -position.xy.y) : position.xy;
    // gl_Position = vec4(position.x, position.y, 1.0, 1.0);
    // v_uv = a_texCoord;
    // if (v_uv.x < 0.5){
    //   vec2 v_uv;
    //   v_uv = vec2(1,1);
    // }else{
    //   vec2 v_uv;
    //   v_uv = vec2(0,0);
    // }
    // v_uv.x = 1.;
    // }`
    // }
}
function GlDebugLog(funcKey, info) {
    if (showGlDebugLog) {
        // 测试走自己的内部实现gl接口
        // if (funcKey == "bindBuffer") {
        //     console.log(count + " bindBuffer => ")
        //     console.log(info)
        //     count++
        // }
        // if (funcKey == "bufferData") {
        //     console.log(count + " bufferData =>")
        //     console.log(info)
        //     count++
        // }
        // if (funcKey == "bufferSubData") {
        //     console.log(count + " bufferSubData =>")
        //     console.log(info)
        //     count++
        // }
        // if (funcKey == "drawElements") {
        //     console.log(count + " drawElements =>")
        //     console.log(info)
        //     count++
        // }
        // if (funcKey == "clearColor") {
        //     console.log(count + " clearColor =>")
        //     console.log(info)
        //     count++
        // }
        // if (funcKey == "clear") {
        //     console.log(count + " clear =>")
        //     console.log(info)
        //     count++
        // }
        // if (count === 0 && funcKey == "drawElements") {
        //     count++
        // }
        // if (count > 0) {
        //     console.log(count + " " + funcKey + " =>")
        //     console.log(info)
        //     count++
        // }
    }
}
let glCallCount = 0;
let count = 0;
function replaceWebglFunc(gl) {
    if (win.glDebugMode == GlDebugMode.none && !win.showGlDebugLog) {
        return;
    }
    let noFuncs = new Set();
    for (let key in gl) {
        let funcKey = key;
        if (typeof gl[funcKey] == "function") {
            let func = gl[funcKey];
            gl[funcKey] = (...info) => {
                let applyReturn;
                if (glCallCount === 0) {
                    CpuRenderingContext_1.cpuRenderingContext.customGlInitBeforeCall();
                }
                glCallCount++;
                GlDebugLog(funcKey, info);
                // 对于getextension的方法没有实现 所以同一返回空
                if (funcKey == "getExtension") {
                    return null;
                }
                else if (funcKey == "getSupportedExtensions") {
                    return [];
                }
                // if (funcKey == "clear") {
                //     console.log(gl.getParameter(gl.COLOR_CLEAR_VALUE))
                // }
                if (debugCpuRender) {
                    if (funcKey == "getParameter") {
                        return func.apply(gl, info);
                    }
                    let cpuFunc = CpuRenderingContext_1.cpuRenderingContext[funcKey];
                    if (!cpuFunc && !noFuncs.has(funcKey)) {
                        noFuncs.add(funcKey);
                        console.error("no funcKey " + funcKey);
                        debugger;
                    }
                    applyReturn = cpuFunc.apply(CpuRenderingContext_1.cpuRenderingContext, info);
                }
                else {
                    if (createTsImplGlslFile) {
                        if (funcKey == "shaderSource") {
                            testShaderSourceNum++;
                            if (testShaderSourceNum >= testShaderBegin && testShaderSourceNum <= testShaderEnd) {
                                // console.log("shaderSource:" + info)
                                let shaderSource = info[1];
                                console.log(testShaderSourceNum);
                                let interpreterData = GLSLInterpreter_1.GLSLInterpreter.interpreter(shaderSource);
                                compilerTsFiles.set(interpreterData[0], interpreterData[1]);
                            }
                        }
                        else if ((funcKey === "drawElements" || funcKey === "drawArrays") && compilerTsFiles.size > 0) {
                            // 直接判断输出drawElements之前的转译脚本
                            var zip = new win.JSZip();
                            let readonlyStr = "";
                            let importStr = "";
                            compilerTsFiles.forEach((value, key) => {
                                zip.file(`Impl_${key}.ts`, value);
                                readonlyStr += `    static readonly Impl_${key} = Impl_${key}\n`;
                                importStr += `import { Impl_${key} } from "./Impl_${key}"\n`;
                            });
                            let ShaderManagerStr = importStr + `export class ShaderManager {\n` + readonlyStr;
                            ShaderManagerStr += `    static getConstruct(source: string) {\n`;
                            ShaderManagerStr += `        return (<any>this)[source]\n`;
                            ShaderManagerStr += `    }\n`;
                            ShaderManagerStr += "}\n";
                            zip.file(`ShaderManager.ts`, ShaderManagerStr);
                            zip.generateAsync({ type: "blob" }).then((content) => {
                                FileSaver_1.fileSaveAs(content, `tsScript.zip`);
                            });
                            compilerTsFiles.clear();
                        }
                    }
                    else if (replaceShaderSource) {
                        if (funcKey == "shaderSource") {
                            let shaderSource = info[1];
                            let hash = SparkMD5.hash(shaderSource);
                            let replaceScript = GlslShaderHackScript_1.glslShaderHackScript.get(hash);
                            if (replaceScript && replaceScript !== "") {
                                console.log("old shaderSource:");
                                console.log(shaderSource);
                                // 使用替换的glsl代码
                                info[1] = shaderSource;
                            }
                        }
                    }
                    applyReturn = func.apply(gl, info);
                }
                return applyReturn;
            };
        }
    }
}
exports.replaceWebglFunc = replaceWebglFunc;


/***/ }),

/***/ "./ts/src/webglImpl/GlslShaderHackScript.ts":
/*!**************************************************!*\
  !*** ./ts/src/webglImpl/GlslShaderHackScript.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// 对应要替换的glsl代码 用于调试
exports.glslShaderHackScript = new Map([[``, ``]]);


/***/ }),

/***/ "./ts/src/webglImpl/PipelineData.ts":
/*!******************************************!*\
  !*** ./ts/src/webglImpl/PipelineData.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CpuRenderingContext_1 = __webpack_require__(/*! ./CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const ShaderManager_1 = __webpack_require__(/*! ./shader/tsScript/ShaderManager */ "./ts/src/webglImpl/shader/tsScript/ShaderManager.ts");
let SparkMD5 = __webpack_require__(/*! Spark-md5 */ "./node_modules/Spark-md5/spark-md5.js");
/**着色器相关 */
class CPUWebGLShader {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLShader = CPUWebGLShader;
class CPUWebGLProgram {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLProgram = CPUWebGLProgram;
class CPUWebGLUniformLocation {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLUniformLocation = CPUWebGLUniformLocation;
class CPUShader {
    constructor(shaderIndex) {
        /**
         * 绑定的源码
         * 暂时还是没想清楚咋搞比较好
         * glsl转ts?(动态转换/静态转换(根据source找到对应的ts脚本)?)
         * glsl转webassembly?还能调试么?
         * */
        this.source = null;
        this._compileStatus = false;
        /**将被删除 */
        this._delete = false;
        /**
         * 警告或错误信息
         */
        this.info = null;
        /**
         * 是否被附加到program 一个shader 可以被附加到多个program上
         */
        this._attachProgramIndex = new Set();
        this.shaderIndex = shaderIndex;
    }
    /**
     * 但是每个 shader object 都有一个布尔值 Compile_status,这个值会根据编译的结果进行修改,
     * 比如 shader 编译成功没有问题且可以使用,那么这个状态将会被设为 TRUE,否则则为 FALSE。
     * 这个 status 值可以通过 GetShaderiv 这个 API 查询。根据学过的 GLSL 语法,编译失败的原因有很多,在这里就不详细进行一一说明了。
     * 如果编译失败,则之前编译的所有信息都将丢失。也就是说编译失败之后,该 shader 的状态不会回滚到编译之前的旧的状态。
     * 通过 glshadersource 改变 shader object 的内容,并不会改变其编译状态或编译出来的 shader code。
     * 只有当再执行一次 glCompileShader,且编译成功, 才会改变该 shader 的编译状态。
     * 编译脚本
     */
    complile() {
        this._compileStatus = false;
        /**
         * do some complice thing
         */
        let hash = SparkMD5.hash(this.source);
        // 需要提前准备好ts脚本
        let construct = ShaderManager_1.ShaderManager.getConstruct("Impl_" + hash);
        if (construct) {
            this.construct = construct;
            this._compileStatus = true;
        }
        else {
            this.info = "无法查找到对应的glsl转换的ts脚本 请再次确认使用调用脚本自动生成";
        }
    }
    get compileStatus() {
        return this._compileStatus;
    }
    /**
     * 当被标记删除且不没有附加到任何program的时候就是一个失效的program,应该被删除
     * 反之就还是一个有效的program
     */
    isValid() {
        let hasAttach = this._attachProgramIndex.size > 0;
        return hasAttach || !this._delete;
    }
    destory() {
        this._attachProgramIndex.clear();
    }
    set delete(value) {
        this._delete = value;
    }
    setAttachProgram(value) {
        this._attachProgramIndex.add(value);
    }
    deleteAttachProgram(value) {
        this._attachProgramIndex.delete(value);
    }
}
exports.CPUShader = CPUShader;
class CPUVertexShader extends CPUShader {
    constructor() {
        super(...arguments);
        this.shaderHandle = null;
    }
}
exports.CPUVertexShader = CPUVertexShader;
class CPUFragmentShader extends CPUShader {
    constructor() {
        super(...arguments);
        this.shaderHandle = null;
    }
}
exports.CPUFragmentShader = CPUFragmentShader;
class CPUShaderProgram {
    constructor() {
        this.attachFragmentShader = null;
        this.attachVertexShader = null;
        this._linkFragmentShader = null;
        this._linkVertexShader = null;
        /**link后生效的顶点位置,可以被外部指定*/
        this._attributeLocationInfo = new Map();
        /**link后生效的全局变量位置*/
        this._uniformLocationInfo = new Map();
        /**是否数组 */
        this._uniformIsArray = new Map();
        this.info = "";
        this._linkStatus = false;
        /**将被删除 */
        this._delete = false;
        /**正在使用 */
        this._isUsing = false;
    }
    get linkFragmentShader() {
        return this._linkFragmentShader;
    }
    get linkVertexShader() {
        return this._linkVertexShader;
    }
    /**
     * 但是每个 program object 都有一个布尔值 Link_status,这个值会根据 link 的结果进行修改,
     * 比如 program 链接成功,且一个有效的可执行文件被创建,那么这个状态将会被设为 TRUE,否则则为 FALSE。
     * 这个 status 值可以通过 glGetProgramiv 这个 API 查询。根据我们学过的 GLSL 语法, 链接失败的原因有很多,
     * 比如 program 中的 shader object 没有被成功编译,比如 program 中没有 vertex shader 或者 fragment shader,
     * 比如 shader 中使用了超出限制的 uniform 或 sample 变量,比如 shader object 是通过预编译的 shader binary 读取生成的等等,
     * 在这里就不详细进行一一说明了。如果 link 失败,则之前 link 的所有信息都将丢失。也就是说链接失败之后,
     * 该 program 的状态不会回滚到链接之前的旧的状态。而有一些信息还是能被找回来的,
     * 这些信息是 attribute 和 uniform 相关的信息,这个下个课时我们再详细说明。
     *
     * link 成功之后,所有 shader 中开发者自定义的 active 的 uniform 都会被初始化为 0,
     * 然后会被分配一个地址,该地址可以通过 glGetUniformLocation 这个 API 来获取。
     * 同样的,shader 中所有开发者自定义的 active 的 attribute,如果没有被于一个指定的 index 绑定,在这个时候就会给它分配一个 index。
     * 这个 index 可以 通过 glGetAttribLocation 这个 API 来获取,该两个 API 我们会在下个课时进行详细说明。
     *
     * PS:(所以link后其实是生成一个新的shader?)
     * 当 program 被 link 之后,该 program 对应的 shader 可以被修改、重新编译、 detach、attach 其他 shader 等操作,
     * 而这些操作不会影响 link 的 log 以及 program 的可执行文件。
     */
    link() {
        var _a, _b;
        this._linkStatus = false;
        if (this.attachFragmentShader &&
            this.attachFragmentShader.compileStatus &&
            this.attachVertexShader &&
            this.attachVertexShader.compileStatus) {
            let linkSuccess = true;
            if (this.attachFragmentShader && this.attachVertexShader) {
                this._linkFragmentShader = new this.attachFragmentShader.construct();
                this._linkVertexShader = new this.attachVertexShader.construct();
                this._attributeLocationInfo.clear();
                let attributeData = this._linkVertexShader.attributeData;
                let i = 0;
                for (const key in attributeData) {
                    if (key === "dataKeys" || key === "dataSize") {
                        continue;
                    }
                    if (Object.prototype.hasOwnProperty.call(attributeData, key)) {
                        this._attributeLocationInfo.set(key, i++);
                    }
                }
                i = 0;
                let vertUniform = (_a = this._linkVertexShader) === null || _a === void 0 ? void 0 : _a.uniformData;
                let fragUniform = (_b = this._linkFragmentShader) === null || _b === void 0 ? void 0 : _b.uniformData;
                for (const key in vertUniform) {
                    if (key === "dataKeys" || key === "dataSize") {
                        continue;
                    }
                    if (Object.prototype.hasOwnProperty.call(vertUniform, key)) {
                        if (!this._uniformLocationInfo.get(key)) {
                            let testVertUniform = vertUniform;
                            this._uniformLocationInfo.set(key, new CPUWebGLUniformLocation(i++));
                            if (testVertUniform[key] instanceof Array) {
                                this._uniformIsArray.set(key, true);
                            }
                            else {
                                this._uniformIsArray.set(key, false);
                            }
                        }
                    }
                }
                // 当uniform属性在vert和frag类型不一样的时候 应该会导致链接失败
                for (const key in fragUniform) {
                    if (key === "dataKeys" || key === "dataSize") {
                        continue;
                    }
                    if (Object.prototype.hasOwnProperty.call(fragUniform, key)) {
                        let uniformLoc = this._uniformLocationInfo.get(key);
                        let testFragUniform = fragUniform;
                        if (uniformLoc === undefined) {
                            this._uniformLocationInfo.set(key, new CPUWebGLUniformLocation(i++));
                            if (testFragUniform[key] instanceof Array) {
                                this._uniformIsArray.set(key, true);
                            }
                            else {
                                this._uniformIsArray.set(key, false);
                            }
                        }
                        else {
                            let testVertUniform = vertUniform;
                            if (typeof testVertUniform[key] !== typeof testFragUniform[key]) {
                                linkSuccess = false;
                                break;
                            }
                        }
                    }
                }
                this._linkStatus = linkSuccess;
            }
            else {
                this.info = "没有顶点着色器或者片元着色器";
            }
        }
    }
    setUniformData(location, data) {
        let setSuc = false;
        let name = this._getUniformLocalName(location);
        // console.log("&&&&&&&&&&&&&&&&&setUniformData&&&&&&&&&&&&&&&&&&")
        // console.log(location)
        // console.log(name)
        // console.log("&&&&&&&&&&&&&&&&&setUniformData&&&&&&&&&&&&&&&&&&")
        if (name) {
            if (data instanceof Array) {
                if (!this._getUniformLocalIsArray(name)) {
                    setSuc = this._setUniformData(name, data[0]);
                }
                else {
                    setSuc = this._setUniformData(name, data);
                }
            }
            else {
                setSuc = this._setUniformData(name, data);
            }
        }
        return setSuc;
    }
    // 没有做类型不匹配的判断 还没想好怎么做
    _setUniformData(name, data) {
        var _a, _b;
        let setSuc = false;
        let vertUniform = (_a = this._linkVertexShader) === null || _a === void 0 ? void 0 : _a.uniformData;
        let fragUniform = (_b = this._linkFragmentShader) === null || _b === void 0 ? void 0 : _b.uniformData;
        if (vertUniform[name] !== undefined) {
            vertUniform[name] = data;
            setSuc = true;
        }
        if (fragUniform[name] !== undefined) {
            fragUniform[name] = data;
            setSuc = true;
        }
        return setSuc;
    }
    _getUniformLocalName(location) {
        let name = null;
        for (let entries of this._uniformLocationInfo.entries()) {
            let key = entries[0];
            let loc = entries[1];
            if (loc.cachIndex == location.cachIndex) {
                name = key;
                break;
            }
        }
        return name;
    }
    _getUniformLocalIsArray(name) {
        let isArray = this._uniformIsArray.get(name);
        return isArray;
    }
    getUniformLocal(name) {
        return this._uniformLocationInfo.get(name);
    }
    getAttributeLocal(name) {
        return this._attributeLocationInfo.get(name);
    }
    getAttributeSize() {
        return this._attributeLocationInfo.size;
    }
    getUniformSize() {
        return this._uniformLocationInfo.size;
    }
    getNameByAttributeLocal(index) {
        for (const iterator of this._attributeLocationInfo.entries()) {
            if (index == iterator[1]) {
                return iterator[0];
            }
        }
    }
    getNameByAttributeIndex(index) {
        for (const iterator of this._attributeLocationInfo.entries()) {
            if (index === 0) {
                return iterator[0];
            }
            index--;
        }
    }
    getNameByUniformIndex(index) {
        for (const iterator of this._uniformLocationInfo.entries()) {
            if (index === 0) {
                return iterator[0];
            }
            index--;
        }
    }
    use() {
        this._isUsing = true;
    }
    unUse() {
        this._isUsing = false;
    }
    /**
     * 当被标记删除且不被使用的时候就是一个失效的program,应该被删除
     * 反之就还是一个有效的program
     */
    isValid() {
        return this._isUsing || !this._delete;
    }
    get linkStatus() {
        return this._linkStatus;
    }
    set isUsing(value) {
        this._isUsing = value;
    }
    /**执行真正的销毁 */
    destory(programIndex) {
        if (this.attachFragmentShader) {
            this.attachFragmentShader.deleteAttachProgram(programIndex);
        }
        if (this.attachVertexShader) {
            this.attachVertexShader.deleteAttachProgram(programIndex);
        }
    }
    set delete(value) {
        this._delete = value;
    }
}
exports.CPUShaderProgram = CPUShaderProgram;
/**着色器相关 */
/**绘制数据相关 */
class CPUWebGLBuffer {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLBuffer = CPUWebGLBuffer;
/**buffer数据 */
class CPUBufferData {
    constructor(initStatus, cachIndex) {
        /**buffer数据 */
        this.buffer = new Uint8Array(0);
        this._cachIndex = null;
        this._status = 0;
        this._status = initStatus;
        this._cachIndex = cachIndex;
    }
    get cachIndex() {
        return this._cachIndex;
    }
    set status(value) {
        this._status = value;
    }
}
exports.CPUBufferData = CPUBufferData;
class VBOBufferData extends CPUBufferData {
}
exports.VBOBufferData = VBOBufferData;
class EBOBufferData extends CPUBufferData {
}
exports.EBOBufferData = EBOBufferData;
/**绘制数据相关 */
/**纹理相关 */
class CPUWebGLTexture {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLTexture = CPUWebGLTexture;
class TexBufferData {
    constructor(width, height) {
        this.width = 0;
        this.height = 0;
        this.bufferData = null;
        this.width = width;
        this.height = height;
    }
}
exports.TexBufferData = TexBufferData;
class TexelsData {
    constructor() {
        this.texelMipmapData = new Map();
    }
    setLevelData(level, width, height, texelData) {
        let texBufferData = new TexBufferData(width, height);
        texBufferData.bufferData = texelData;
        this.texelMipmapData.set(level, texBufferData);
    }
}
exports.TexelsData = TexelsData;
class WebGLTextureData {
    constructor(glTexture, glTarget, gl, cachIndex) {
        this._cachIndex = null;
        /**纹理数据 对应cube类型的话 纹理数据是6张 */
        this.texelsDatas = null;
        this.glTarget = null;
        this.glTexture = null;
        /**生成mipmap的算法 */
        this.mipmapCreateType = null;
        /**纹理读取的参数 */
        this.parameter = new Map();
        // 绑定的纹理单元 可能同时绑定到多个纹理单元中
        this._bindTextureUnitSet = new Set();
        this.glTexture = glTexture;
        this.glTarget = glTarget;
        let texelsNum = glTarget === gl.TEXTURE_2D ? 1 : 6;
        this.texelsDatas = new Array(texelsNum);
        this.mipmapCreateType = gl.DONT_CARE;
        this.parameter.set(gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
        this.parameter.set(gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        this.parameter.set(gl.TEXTURE_WRAP_S, gl.REPEAT);
        this.parameter.set(gl.TEXTURE_WRAP_T, gl.REPEAT);
        this._cachIndex = cachIndex;
    }
    get cachIndex() {
        return this._cachIndex;
    }
    bindTexUnit(unit) {
        this._bindTextureUnitSet.add(unit);
    }
    unBindTexUnit(unit) {
        this._bindTextureUnitSet.delete(unit);
    }
    get bindTextureUnitSet() {
        return this._bindTextureUnitSet;
    }
}
exports.WebGLTextureData = WebGLTextureData;
/**纹理相关 */
/**frameBuffer相关 */
class CPUWebGLFramebuffer {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLFramebuffer = CPUWebGLFramebuffer;
class WebGLFramebufferObject {
    constructor(bufferIndex) {
        this.bufferIndex = null;
        // 如果attach的是图片的话对应的target
        this.colorTextureTarget = 0;
        this.depthTextureTarget = 0;
        this.stencilTextureTarget = 0;
        this.colorAttachPoint = null;
        this.depthAttachPoint = null;
        this.stencilAttachPoint = null;
        this.bufferIndex = bufferIndex;
    }
    clearColorAttach() {
        this.colorTextureTarget = 0;
        this.colorAttachPoint = null;
    }
    setColorAttachByTex(tex, target) {
        this.colorTextureTarget = target;
        this.colorAttachPoint = tex;
    }
    setColorAttachByRender(render) {
        this.colorAttachPoint = render;
    }
    clearDepthAttach() {
        this.depthTextureTarget = 0;
        this.depthAttachPoint = null;
    }
    setDepthAttachByTex(tex, target) {
        this.depthTextureTarget = target;
        this.depthAttachPoint = tex;
    }
    setDepthAttachByRender(render) {
        this.depthAttachPoint = render;
    }
    clearStencilAttach() {
        this.stencilTextureTarget = 0;
        this.stencilAttachPoint = null;
    }
    setStencilAttachByTex(tex, target) {
        this.stencilTextureTarget = target;
        this.stencilAttachPoint = tex;
    }
    setStencilAttachByRender(render) {
        this.stencilAttachPoint = render;
    }
    deAttachRenderBufferPoint(cachIndex) {
        if (this.colorAttachPoint &&
            this.colorAttachPoint instanceof WebGLRenderbufferObject &&
            this.colorAttachPoint.bufferIndex.cachIndex === cachIndex) {
            this.clearColorAttach();
        }
        if (this.depthAttachPoint &&
            this.depthAttachPoint instanceof WebGLRenderbufferObject &&
            this.depthAttachPoint.bufferIndex.cachIndex === cachIndex) {
            this.clearDepthAttach();
        }
        if (this.stencilAttachPoint &&
            this.stencilAttachPoint instanceof WebGLRenderbufferObject &&
            this.stencilAttachPoint.bufferIndex.cachIndex === cachIndex) {
            this.clearStencilAttach();
        }
    }
    deAttachTexture(cachIndex) {
        if (this.colorAttachPoint &&
            this.colorAttachPoint instanceof WebGLTextureData &&
            this.colorAttachPoint.cachIndex === cachIndex) {
            this.clearColorAttach();
        }
        if (this.depthAttachPoint &&
            this.depthAttachPoint instanceof WebGLTextureData &&
            this.depthAttachPoint.cachIndex === cachIndex) {
            this.clearDepthAttach();
        }
        if (this.stencilAttachPoint &&
            this.stencilAttachPoint instanceof WebGLTextureData &&
            this.stencilAttachPoint.cachIndex === cachIndex) {
            this.clearStencilAttach();
        }
    }
}
exports.WebGLFramebufferObject = WebGLFramebufferObject;
class CPUWebGLRenderbuffer {
    constructor(index) {
        this._cachIndex = 0;
        this._cachIndex = index;
    }
    get cachIndex() {
        return this._cachIndex;
    }
}
exports.CPUWebGLRenderbuffer = CPUWebGLRenderbuffer;
class WebGLRenderbufferObject {
    constructor(bufferIndex) {
        this.bufferIndex = null;
        this.bufferData = null;
        this.internalformat = null;
        this.width = null;
        this.height = null;
        this.bufferIndex = bufferIndex;
    }
    // 由于RBO是将作为FBO的color/depth/stencil attachment，所以第二个输入参数internalformat必须为color/depth/stencil相关的格式。
    // 其中，如果该RBO将作为color attachment，那么internalformat必须为GL_RGBA4/GL_RGB5_A1/GL_RGB565，如果该RBO将作为depth attachment，
    // 那么internalformat必须为GL_DEPTH_COMPONENT16，如果该RBO将作为stencil attachment，那么internalformat必须为GL_STENCIL_INDEX8。
    // 否则，则会出现GL_INVALID_ENUM的错误。第三个和第四个参数width、height为RBO的尺寸，如果width或者height超过GL_MAX_RENDERBUFFER_S
    initBufferData(width, height, internalformat) {
        this.width = width;
        this.height = height;
        this.internalformat = internalformat;
        // 不管是啥 都是用rgba 每个通道占一字节表示
        // 内存不是考虑的瓶颈
        if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.RGBA4) {
            this.bufferData = new Uint32Array(width * height);
        }
        else if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.RGB565) {
            this.bufferData = new Uint32Array(width * height);
        }
        else if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.RGB5_A1) {
            this.bufferData = new Uint32Array(width * height);
        }
        else if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.DEPTH_COMPONENT16) {
            // 没有16位的浮点数 就用32位的表示吧
            this.bufferData = new Float32Array(width * height);
        }
        else if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.STENCIL_INDEX8) {
            this.bufferData = new Uint8Array(width * height);
        }
        else if (internalformat === CpuRenderingContext_1.cpuRenderingContext.cachGameGl.DEPTH_STENCIL) {
            console.error("不识别DEPTH_STENCIL");
            debugger;
        }
        else {
            console.error("无法识别的 internalformat");
            debugger;
        }
    }
}
exports.WebGLRenderbufferObject = WebGLRenderbufferObject;
/**frameBuffer相关 */


/***/ }),

/***/ "./ts/src/webglImpl/RenderModel.ts":
/*!*****************************************!*\
  !*** ./ts/src/webglImpl/RenderModel.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class AttributeReadInfo {
    constructor(gl, readBufferIndex, size, type, normalized, stride, offset) {
        // 实际在glsl中的size. size可以小于实际的size 然后如果是vec4的话 w会被填充为1
        this.factSize = 0;
        this.size = 0;
        this.type = 0;
        this.normalized = false;
        this.stride = 0;
        this.offset = 0;
        this.isFloat = true;
        /**从哪个buffer上读取 */
        this.readBufferIndex = 0;
        this.size = size;
        this.type = type;
        this.normalized = normalized;
        this.stride = stride;
        this.offset = offset;
        this.byteType = Float32Array;
        this.readBufferIndex = readBufferIndex;
        // this.byteLength = Float32Array.BYTES_PER_ELEMENT
        switch (type) {
            case gl.BYTE:
                this.byteType = Int8Array;
            case gl.SHORT:
                this.byteType = Int16Array;
            case gl.UNSIGNED_BYTE:
                this.byteType = Uint8Array;
            case gl.UNSIGNED_SHORT:
                this.byteType = Uint16Array;
            case gl.FLOAT:
                this.byteType = Float32Array;
        }
    }
}
exports.AttributeReadInfo = AttributeReadInfo;
class CachWriteData {
    constructor(mode, beginIndex, endIndex, cachVboAttributeDatas) {
        this.mode = null;
        this.beginIndex = null;
        this.endIndex = null;
        this.cachVboAttributeDatas = null;
        this.mode = mode;
        this.beginIndex = beginIndex;
        this.endIndex = endIndex;
        this.cachVboAttributeDatas = cachVboAttributeDatas;
    }
}
exports.CachWriteData = CachWriteData;


/***/ }),

/***/ "./ts/src/webglImpl/ShaderDefine.ts":
/*!******************************************!*\
  !*** ./ts/src/webglImpl/ShaderDefine.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinVar_1 = __webpack_require__(/*! ./shader/builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
/**定义的varying数据 */
class VaryingData {
    constructor() {
        this.dataKeys = new Map();
    }
    factoryCreate() {
        return new VaryingData();
    }
    copy(varying) {
        console.error("必须自己实现copy");
    }
}
exports.VaryingData = VaryingData;
class BaseShaderHandle {
    constructor() {
        this.uniformData = null;
        this.varyingData = null;
    }
}
exports.BaseShaderHandle = BaseShaderHandle;
class VertShaderHandle extends BaseShaderHandle {
    constructor() {
        super(...arguments);
        /**顶点属性只存在顶点着色器中 */
        this.attributeData = null;
    }
    main() {
        BuiltinVar_1.gl_Position.set_Vn(0, 0, 0, 0);
    }
}
exports.VertShaderHandle = VertShaderHandle;
class FragShaderHandle extends BaseShaderHandle {
    /**dFdx, dFdy — return the partial derivative of an argument with respect to x or y */
    dFdx(p) {
        console.error("dFdx 还未实现");
    }
    dFdy(p) {
        console.error("dFdx 还未实现");
    }
    fwidth(p) {
        console.error("dFdx 还未实现");
    }
    /**遍历片元处理 */
    main() {
        BuiltinVar_1.gl_FragColor.set_Vn(0, 0, 0, 0);
    }
}
exports.FragShaderHandle = FragShaderHandle;


/***/ }),

/***/ "./ts/src/webglImpl/geometricOperations/GeometricOperations.ts":
/*!*********************************************************************!*\
  !*** ./ts/src/webglImpl/geometricOperations/GeometricOperations.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinData_1 = __webpack_require__(/*! ../shader/builtin/BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
class BarycentricPreData {
    constructor() {
        this.c1XFactor = null;
        this.c1YFactor = null;
        this.c1AddFactor = null;
        this.c1DivFactor = null;
        this.c2XFactor = null;
        this.c2YFactor = null;
        this.c2AddFactor = null;
        this.c2DivFactor = null;
        this.c3XFactor = null;
        this.c3YFactor = null;
        this.c3AddFactor = null;
        this.c3DivFactor = null;
    }
}
exports.BarycentricPreData = BarycentricPreData;
class GeometricOperations {
    static preComputeBarycentric2DFactor(v0X, v1X, v2X, v0Y, v1Y, v2Y) {
        let preData = new BarycentricPreData();
        preData.c1XFactor = v1Y - v2Y;
        preData.c1YFactor = v2X - v1X;
        preData.c1AddFactor = v1X * v2Y - v2X * v1Y;
        preData.c1DivFactor = v0X * (v1Y - v2Y) + (v2X - v1X) * v0Y + v1X * v2Y - v2X * v1Y;
        preData.c2XFactor = v2Y - v0Y;
        preData.c2YFactor = v0X - v2X;
        preData.c2AddFactor = v2X * v0Y - v0X * v2Y;
        preData.c2DivFactor = v1X * (v2Y - v0Y) + (v0X - v2X) * v1Y + v2X * v0Y - v0X * v2Y;
        preData.c3XFactor = v0Y - v1Y;
        preData.c3YFactor = v1X - v0X;
        preData.c3AddFactor = v0X * v1Y - v1X * v0Y;
        preData.c3DivFactor = v2X * (v0Y - v1Y) + (v1X - v0X) * v2Y + v0X * v1Y - v1X * v0Y;
        return preData;
    }
    static computeBarycentric2DByPre(x, y, preData) {
        let c1 = (x * preData.c1XFactor + preData.c1YFactor * y + preData.c1AddFactor) / preData.c1DivFactor;
        let c2 = (x * preData.c2XFactor + preData.c2YFactor * y + preData.c2AddFactor) / preData.c2DivFactor;
        let c3 = (x * preData.c3XFactor + preData.c3YFactor * y + preData.c3AddFactor) / preData.c3DivFactor;
        return [c1, c2, c3];
    }
    /**
     * 重心坐标
     */
    static computeBarycentric2D(x, y, v0X, v1X, v2X, v0Y, v1Y, v2Y) {
        let c1 = (x * (v1Y - v2Y) + (v2X - v1X) * y + v1X * v2Y - v2X * v1Y) / (v0X * (v1Y - v2Y) + (v2X - v1X) * v0Y + v1X * v2Y - v2X * v1Y);
        let c2 = (x * (v2Y - v0Y) + (v0X - v2X) * y + v2X * v0Y - v0X * v2Y) / (v1X * (v2Y - v0Y) + (v0X - v2X) * v1Y + v2X * v0Y - v0X * v2Y);
        let c3 = (x * (v0Y - v1Y) + (v1X - v0X) * y + v0X * v1Y - v1X * v0Y) / (v2X * (v0Y - v1Y) + (v1X - v0X) * v2Y + v0X * v1Y - v1X * v0Y);
        return [c1, c2, c3];
    }
    /**
     * 判断是否在三角形内部
     */
    static insideTriangle(x, y, x0, x1, x2, y0, y1, y2, v3f0, v3f1, v3f2) {
        let judgeZ;
        // 通过叉乘判断是否同方向
        let vecTest = new BuiltinData_1.Vec3Data(x - x0, y - y0, 0);
        let crossValue = vecTest.cross(v3f0);
        judgeZ = crossValue.z;
        vecTest = new BuiltinData_1.Vec3Data(x - x1, y - y1, 0);
        crossValue = vecTest.cross(v3f1);
        if (crossValue.z * judgeZ < 0) {
            return false;
        }
        vecTest = new BuiltinData_1.Vec3Data(x - x2, y - y2, 0);
        crossValue = vecTest.cross(v3f2);
        if (crossValue.z * judgeZ < 0) {
            return false;
        }
        return true;
    }
}
exports.GeometricOperations = GeometricOperations;


/***/ }),

/***/ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts":
/*!********************************************************!*\
  !*** ./ts/src/webglImpl/shader/builtin/BuiltinData.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @en The base class of all value types.
 * @zh 所有值类型的基类。
 */
Object.defineProperty(exports, "__esModule", { value: true });
let valueCtorCount = 0;
class ValueType {
    constructor() {
        valueCtorCount++;
        if (valueCtorCount > 1000000) {
            debugger;
        }
    }
    clone() {
        console.error("必须自己实现clone方法");
        return this;
    }
    equals(other) {
        console.error("必须自己实现equals方法");
        return false;
    }
    set(other) {
        console.error("必须自己实现set方法");
    }
    toString() {
        console.error("必须自己实现toString方法");
    }
    getInit() {
        console.error("必须自己实现getInit方法");
    }
}
exports.ValueType = ValueType;
function getNum(num) {
    if (num instanceof NumData) {
        return num.v;
    }
    else {
        return num;
    }
}
exports.getNum = getNum;
class CachPool {
    constructor(ctor) {
        this._ctor = null;
        this._cachIndex = 0;
        this._dataCach = [];
        this._ctor = ctor;
    }
    getData(...setData) {
        if (this._cachIndex >= this._dataCach.length) {
            this.expansion();
        }
        let data = this._dataCach[this._cachIndex++];
        return data;
    }
    getDataByLength(num) {
        let endIndex = this._cachIndex + num;
        if (endIndex >= this._dataCach.length) {
            let expansionNum = Math.max(100, endIndex - this._dataCach.length + 1);
            this.expansion(expansionNum);
        }
        let data = this._dataCach.slice(this._cachIndex, endIndex);
        this._cachIndex = endIndex;
        return data;
    }
    expansion(expansionNum = 100) {
        for (let index = 0; index < expansionNum; index++) {
            this._dataCach.push(this._ctor());
        }
        if (this._dataCach.length > 100000) {
            debugger;
        }
    }
    clear() {
        this._cachIndex = 0;
    }
}
exports.CachPool = CachPool;
class BuiltinDataCach {
    constructor() {
        this.intData = new CachPool(() => new IntData());
        this.floatData = new CachPool(() => new FloatData());
        this.vec2Data = new CachPool(() => new Vec2Data());
        this.vec3Data = new CachPool(() => new Vec3Data());
        this.vec4Data = new CachPool(() => new Vec4Data());
        this.mat3Data = new CachPool(() => new Mat3Data());
        this.mat4Data = new CachPool(() => new Mat4Data());
        this.boolData = new CachPool(() => new BoolData());
    }
    clear() {
        this.intData.clear();
        this.floatData.clear();
        this.vec2Data.clear();
        this.vec3Data.clear();
        this.vec4Data.clear();
        this.mat3Data.clear();
        this.mat4Data.clear();
        this.boolData.clear();
    }
}
exports.BuiltinDataCach = BuiltinDataCach;
function clearShaderCachData() {
    exports.builtinCachData.clear();
    outParasmCachData.clear();
}
exports.clearShaderCachData = clearShaderCachData;
exports.builtinCachData = new BuiltinDataCach();
let vec2Data = exports.builtinCachData.vec2Data;
let vec3Data = exports.builtinCachData.vec3Data;
let vec4Data = exports.builtinCachData.vec4Data;
let floatData = exports.builtinCachData.floatData;
let intData = exports.builtinCachData.intData;
let outParasmCachData = new BuiltinDataCach();
let outVec2Data = outParasmCachData.vec2Data;
let outVec3Data = outParasmCachData.vec3Data;
let outVec4Data = outParasmCachData.vec4Data;
exports.EPSILON = 0.000001;
let floor = Math.floor;
class Vec2Data extends ValueType {
    constructor(x, y) {
        super();
        this.out_x = new FloatData();
        this.out_y = new FloatData();
        this.out_x.v = x || 0;
        this.out_y.v = y || 0;
    }
    static distance(a, b) {
        const x = b.x - a.x;
        const y = b.y - a.y;
        return Math.sqrt(x * x + y * y);
    }
    static dot(a, b) {
        return a.x * b.x + a.y * b.y;
    }
    static equals(a, b, epsilon = exports.EPSILON) {
        return (Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) &&
            Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)));
    }
    static multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        return out;
    }
    static subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        return out;
    }
    cross(other) {
        return this.x * other.y - this.y * other.x;
    }
    get x() {
        return this.out_x.v;
    }
    set x(v) {
        this.out_x.v = v;
    }
    get y() {
        return this.out_y.v;
    }
    set y(v) {
        this.out_y.v = v;
    }
    set(v) {
        this.x = v.x;
        this.y = v.y;
    }
    set_V2(v) {
        this.x = v.x;
        this.y = v.y;
    }
    set_N_N(x, y) {
        this.x = x.v;
        this.y = y.v;
    }
    set_Vn(x, y) {
        this.x = x;
        this.y = y;
    }
    outSet_N_N(x, y) {
        this.out_x = x;
        this.out_y = y;
    }
    get xx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_x);
        return v;
    }
    get out_xx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_x);
        return v;
    }
    get yx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_x);
        return v;
    }
    get out_yx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_x);
        return v;
    }
    set yx(other) {
        this.y = other.x;
        this.x = other.y;
    }
    get xy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_y);
        return v;
    }
    get out_xy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_y);
        return v;
    }
    set xy(other) {
        this.x = other.x;
        this.y = other.y;
    }
    get yy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_y);
        return v;
    }
    get out_yy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_y);
        return v;
    }
}
exports.Vec2Data = Vec2Data;
class IVec2Data extends Vec2Data {
    constructor() {
        super(...arguments);
        this.out_x = new IntData();
        this.out_y = new IntData();
    }
}
exports.IVec2Data = IVec2Data;
class Vec3Data extends ValueType {
    constructor(x, y, z) {
        super();
        this.out_x = new FloatData();
        this.out_y = new FloatData();
        this.out_z = new FloatData();
        this.out_x.v = x || 0;
        this.out_y.v = y || 0;
        this.out_z.v = z || 0;
    }
    static distance(a, b) {
        const x = b.x - a.x;
        const y = b.y - a.y;
        const z = b.z - a.z;
        return Math.sqrt(x * x + y * y + z * z);
    }
    static dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z;
    }
    static equals(a, b, epsilon = exports.EPSILON) {
        const { x: a0, y: a1, z: a2 } = a;
        const { x: b0, y: b1, z: b2 } = b;
        return (Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2)));
    }
    static cross(out, a, b) {
        const { x: ax, y: ay, z: az } = a;
        const { x: bx, y: by, z: bz } = b;
        out.x = ay * bz - az * by;
        out.y = az * bx - ax * bz;
        out.z = ax * by - ay * bx;
        return out;
    }
    static multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        return out;
    }
    static subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        out.z = a.z - b.z;
        return out;
    }
    static transformMat3(out, a, m) {
        const x = a.x;
        const y = a.y;
        const z = a.z;
        out.x = x * m.m00 + y * m.m03 + z * m.m06;
        out.y = x * m.m01 + y * m.m04 + z * m.m07;
        out.z = x * m.m02 + y * m.m05 + z * m.m08;
        return out;
    }
    cross(other) {
        const { x: ax, y: ay, z: az } = this;
        const { x: bx, y: by, z: bz } = other;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    get x() {
        return this.out_x.v;
    }
    set x(v) {
        this.out_x.v = v;
    }
    get y() {
        return this.out_y.v;
    }
    set y(v) {
        this.out_y.v = v;
    }
    get z() {
        return this.out_z.v;
    }
    set z(v) {
        this.out_z.v = v;
    }
    set(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
    }
    set_V3(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
    }
    set_N_N_N(x, y, z) {
        this.x = x.v;
        this.y = y.v;
        this.z = z.v;
    }
    set_Vn(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    // 专门针对inout 类型使用
    outSet_N_N_N(x, y, z) {
        this.out_x = x;
        this.out_y = y;
        this.out_z = z;
    }
    get xx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_x);
        return v;
    }
    get out_xx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_x);
        return v;
    }
    get yx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_x);
        return v;
    }
    get out_yx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_x);
        return v;
    }
    set yx(other) {
        this.y = other.x;
        this.x = other.y;
    }
    get zx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_x);
        return v;
    }
    get out_zx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_x);
        return v;
    }
    set zx(other) {
        this.z = other.x;
        this.x = other.y;
    }
    get xy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_y);
        return v;
    }
    get out_xy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_y);
        return v;
    }
    set xy(other) {
        this.x = other.x;
        this.y = other.y;
    }
    get yy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_y);
        return v;
    }
    get out_yy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_y);
        return v;
    }
    get zy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_y);
        return v;
    }
    get out_zy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_y);
        return v;
    }
    set zy(other) {
        this.z = other.x;
        this.y = other.y;
    }
    get xz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_z);
        return v;
    }
    get out_xz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_z);
        return v;
    }
    set xz(other) {
        this.x = other.x;
        this.z = other.y;
    }
    get yz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_z);
        return v;
    }
    get out_yz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_z);
        return v;
    }
    set yz(other) {
        this.y = other.x;
        this.z = other.y;
    }
    get zz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_z);
        return v;
    }
    get out_zz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_z);
        return v;
    }
    get xxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_xxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_x);
        return v;
    }
    get yxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_yxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_x);
        return v;
    }
    get zxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_zxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_x);
        return v;
    }
    get xyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_xyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_x);
        return v;
    }
    get yyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_yyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_x);
        return v;
    }
    get zyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_zyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_x);
        return v;
    }
    set zyx(other) {
        this.z = other.x;
        this.y = other.y;
        this.x = other.z;
    }
    get xzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_xzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_x);
        return v;
    }
    get yzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_yzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_x);
        return v;
    }
    set yzx(other) {
        this.y = other.x;
        this.z = other.y;
        this.x = other.z;
    }
    get zzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_zzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_x);
        return v;
    }
    get xxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_xxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_y);
        return v;
    }
    get yxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_yxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_y);
        return v;
    }
    get zxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_zxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_y);
        return v;
    }
    set zxy(other) {
        this.z = other.x;
        this.x = other.y;
        this.y = other.z;
    }
    get xyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_xyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_y);
        return v;
    }
    get yyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_yyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_y);
        return v;
    }
    get zyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_zyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_y);
        return v;
    }
    get xzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_xzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_y);
        return v;
    }
    set xzy(other) {
        this.x = other.x;
        this.z = other.y;
        this.y = other.z;
    }
    get yzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_yzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_y);
        return v;
    }
    get zzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_zzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_y);
        return v;
    }
    get xxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_xxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_z);
        return v;
    }
    get yxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_yxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_z);
        return v;
    }
    set yxz(other) {
        this.y = other.x;
        this.x = other.y;
        this.z = other.z;
    }
    get zxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_zxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_z);
        return v;
    }
    get xyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_xyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_z);
        return v;
    }
    set xyz(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
    }
    get yyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_yyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_z);
        return v;
    }
    get zyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_zyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_z);
        return v;
    }
    get xzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_xzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_z);
        return v;
    }
    get yzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_yzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_z);
        return v;
    }
    get zzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_zzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_z);
        return v;
    }
}
exports.Vec3Data = Vec3Data;
// export class BVec3Data extends Vec3Data {}
class IVec3Data extends Vec3Data {
    constructor() {
        super(...arguments);
        this.out_x = new IntData();
        this.out_y = new IntData();
        this.out_z = new IntData();
    }
}
exports.IVec3Data = IVec3Data;
class Vec4Data extends ValueType {
    constructor(x, y, z, w) {
        super();
        this.out_x = new FloatData();
        this.out_y = new FloatData();
        this.out_z = new FloatData();
        this.out_w = new FloatData();
        this.out_x.v = x || 0;
        this.out_y.v = y || 0;
        this.out_z.v = z || 0;
        this.out_w.v = w || 0;
    }
    static distance(a, b) {
        const x = b.x - a.x;
        const y = b.y - a.y;
        const z = b.z - a.z;
        const w = b.w - a.w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    static dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
    }
    static equals(a, b, epsilon = exports.EPSILON) {
        return (Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) &&
            Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) &&
            Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) &&
            Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w)));
    }
    static multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        out.w = a.w * b;
        return out;
    }
    static subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        out.z = a.z - b.z;
        out.w = a.w - b.w;
        return out;
    }
    static transformMat4(out, a, m) {
        const x = a.x;
        const y = a.y;
        const z = a.z;
        const w = a.w;
        out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
        out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
        out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
        out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
        return out;
    }
    cross(vector) {
        const { x: ax, y: ay, z: az } = this;
        const { x: bx, y: by, z: bz } = vector;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    get x() {
        return this.out_x.v;
    }
    set x(v) {
        this.out_x.v = v;
    }
    get y() {
        return this.out_y.v;
    }
    set y(v) {
        this.out_y.v = v;
    }
    get z() {
        return this.out_z.v;
    }
    set z(v) {
        this.out_z.v = v;
    }
    get w() {
        return this.out_w.v;
    }
    set w(v) {
        this.out_w.v = v;
    }
    set(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w;
    }
    set_V4(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w;
    }
    set_N_N_N_N(x, y, z, w) {
        this.x = x.v;
        this.y = y.v;
        this.z = z.v;
        this.w = w.v;
    }
    set_Vn(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    outSet_N_N_N_N(x, y, z, w) {
        this.out_x = x;
        this.out_y = y;
        this.out_z = z;
        this.out_w = w;
    }
    get xx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_x);
        return v;
    }
    get out_xx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_x);
        return v;
    }
    get yx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_x);
        return v;
    }
    get out_yx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_x);
        return v;
    }
    set yx(other) {
        this.y = other.x;
        this.x = other.y;
    }
    get zx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_x);
        return v;
    }
    get out_zx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_x);
        return v;
    }
    set zx(other) {
        this.z = other.x;
        this.x = other.y;
    }
    get wx() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_w, this.out_x);
        return v;
    }
    get out_wx() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_w, this.out_x);
        return v;
    }
    set wx(other) {
        this.w = other.x;
        this.x = other.y;
    }
    get xy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_y);
        return v;
    }
    get out_xy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_y);
        return v;
    }
    set xy(other) {
        this.x = other.x;
        this.y = other.y;
    }
    get yy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_y);
        return v;
    }
    get out_yy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_y);
        return v;
    }
    get zy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_y);
        return v;
    }
    get out_zy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_y);
        return v;
    }
    set zy(other) {
        this.z = other.x;
        this.y = other.y;
    }
    get wy() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_w, this.out_y);
        return v;
    }
    get out_wy() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_w, this.out_y);
        return v;
    }
    set wy(other) {
        this.w = other.x;
        this.y = other.y;
    }
    get xz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_z);
        return v;
    }
    get out_xz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_z);
        return v;
    }
    set xz(other) {
        this.x = other.x;
        this.z = other.y;
    }
    get yz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_z);
        return v;
    }
    get out_yz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_z);
        return v;
    }
    set yz(other) {
        this.y = other.x;
        this.z = other.y;
    }
    get zz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_z);
        return v;
    }
    get out_zz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_z);
        return v;
    }
    get wz() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_w, this.out_z);
        return v;
    }
    get out_wz() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_w, this.out_z);
        return v;
    }
    set wz(other) {
        this.w = other.x;
        this.z = other.y;
    }
    get xw() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_x, this.out_w);
        return v;
    }
    get out_xw() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_x, this.out_w);
        return v;
    }
    set xw(other) {
        this.x = other.x;
        this.w = other.y;
    }
    get yw() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_y, this.out_w);
        return v;
    }
    get out_yw() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_y, this.out_w);
        return v;
    }
    set yw(other) {
        this.y = other.x;
        this.w = other.y;
    }
    get zw() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_z, this.out_w);
        return v;
    }
    get out_zw() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_z, this.out_w);
        return v;
    }
    set zw(other) {
        this.z = other.x;
        this.w = other.y;
    }
    get ww() {
        let v = vec2Data.getData();
        v.set_N_N(this.out_w, this.out_w);
        return v;
    }
    get out_ww() {
        let v = outVec2Data.getData();
        v.outSet_N_N(this.out_w, this.out_w);
        return v;
    }
    get xxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_xxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_x);
        return v;
    }
    get yxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_yxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_x);
        return v;
    }
    get zxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_zxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_x);
        return v;
    }
    get wxx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_x, this.out_x);
        return v;
    }
    get out_wxx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_x, this.out_x);
        return v;
    }
    get xyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_xyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_x);
        return v;
    }
    get yyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_yyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_x);
        return v;
    }
    get zyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_zyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_x);
        return v;
    }
    set zyx(other) {
        this.z = other.x;
        this.y = other.y;
        this.x = other.z;
    }
    get wyx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_y, this.out_x);
        return v;
    }
    get out_wyx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_y, this.out_x);
        return v;
    }
    set wyx(other) {
        this.w = other.x;
        this.y = other.y;
        this.x = other.z;
    }
    get xzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_xzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_x);
        return v;
    }
    get yzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_yzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_x);
        return v;
    }
    set yzx(other) {
        this.y = other.x;
        this.z = other.y;
        this.x = other.z;
    }
    get zzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_zzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_x);
        return v;
    }
    get wzx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_z, this.out_x);
        return v;
    }
    get out_wzx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_z, this.out_x);
        return v;
    }
    set wzx(other) {
        this.w = other.x;
        this.z = other.y;
        this.x = other.z;
    }
    get xwx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_w, this.out_x);
        return v;
    }
    get out_xwx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_w, this.out_x);
        return v;
    }
    get ywx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_w, this.out_x);
        return v;
    }
    get out_ywx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_w, this.out_x);
        return v;
    }
    set ywx(other) {
        this.y = other.x;
        this.w = other.y;
        this.x = other.z;
    }
    get zwx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_w, this.out_x);
        return v;
    }
    get out_zwx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_w, this.out_x);
        return v;
    }
    set zwx(other) {
        this.z = other.x;
        this.w = other.y;
        this.x = other.z;
    }
    get wwx() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_w, this.out_x);
        return v;
    }
    get out_wwx() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_w, this.out_x);
        return v;
    }
    get xxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_xxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_y);
        return v;
    }
    get yxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_yxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_y);
        return v;
    }
    get zxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_zxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_y);
        return v;
    }
    set zxy(other) {
        this.z = other.x;
        this.x = other.y;
        this.y = other.z;
    }
    get wxy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_x, this.out_y);
        return v;
    }
    get out_wxy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_x, this.out_y);
        return v;
    }
    set wxy(other) {
        this.w = other.x;
        this.x = other.y;
        this.y = other.z;
    }
    get xyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_xyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_y);
        return v;
    }
    get yyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_yyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_y);
        return v;
    }
    get zyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_zyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_y);
        return v;
    }
    get wyy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_y, this.out_y);
        return v;
    }
    get out_wyy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_y, this.out_y);
        return v;
    }
    get xzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_xzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_y);
        return v;
    }
    set xzy(other) {
        this.x = other.x;
        this.z = other.y;
        this.y = other.z;
    }
    get yzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_yzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_y);
        return v;
    }
    get zzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_zzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_y);
        return v;
    }
    get wzy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_z, this.out_y);
        return v;
    }
    get out_wzy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_z, this.out_y);
        return v;
    }
    set wzy(other) {
        this.w = other.x;
        this.z = other.y;
        this.y = other.z;
    }
    get xwy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_w, this.out_y);
        return v;
    }
    get out_xwy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_w, this.out_y);
        return v;
    }
    set xwy(other) {
        this.x = other.x;
        this.w = other.y;
        this.y = other.z;
    }
    get ywy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_w, this.out_y);
        return v;
    }
    get out_ywy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_w, this.out_y);
        return v;
    }
    get zwy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_w, this.out_y);
        return v;
    }
    get out_zwy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_w, this.out_y);
        return v;
    }
    set zwy(other) {
        this.z = other.x;
        this.w = other.y;
        this.y = other.z;
    }
    get wwy() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_w, this.out_y);
        return v;
    }
    get out_wwy() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_w, this.out_y);
        return v;
    }
    get xxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_xxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_z);
        return v;
    }
    get yxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_yxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_z);
        return v;
    }
    set yxz(other) {
        this.y = other.x;
        this.x = other.y;
        this.z = other.z;
    }
    get zxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_zxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_z);
        return v;
    }
    get wxz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_x, this.out_z);
        return v;
    }
    get out_wxz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_x, this.out_z);
        return v;
    }
    set wxz(other) {
        this.w = other.x;
        this.x = other.y;
        this.z = other.z;
    }
    get xyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_xyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_z);
        return v;
    }
    set xyz(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
    }
    get yyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_yyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_z);
        return v;
    }
    get zyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_zyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_z);
        return v;
    }
    get wyz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_y, this.out_z);
        return v;
    }
    get out_wyz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_y, this.out_z);
        return v;
    }
    set wyz(other) {
        this.w = other.x;
        this.y = other.y;
        this.z = other.z;
    }
    get xzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_xzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_z);
        return v;
    }
    get yzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_yzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_z);
        return v;
    }
    get zzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_zzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_z);
        return v;
    }
    get wzz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_z, this.out_z);
        return v;
    }
    get out_wzz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_z, this.out_z);
        return v;
    }
    get xwz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_w, this.out_z);
        return v;
    }
    get out_xwz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_w, this.out_z);
        return v;
    }
    set xwz(other) {
        this.x = other.x;
        this.w = other.y;
        this.z = other.z;
    }
    get ywz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_w, this.out_z);
        return v;
    }
    get out_ywz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_w, this.out_z);
        return v;
    }
    set ywz(other) {
        this.y = other.x;
        this.w = other.y;
        this.z = other.z;
    }
    get zwz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_w, this.out_z);
        return v;
    }
    get out_zwz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_w, this.out_z);
        return v;
    }
    get wwz() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_w, this.out_z);
        return v;
    }
    get out_wwz() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_w, this.out_z);
        return v;
    }
    get xxw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_x, this.out_w);
        return v;
    }
    get out_xxw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_x, this.out_w);
        return v;
    }
    get yxw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_x, this.out_w);
        return v;
    }
    get out_yxw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_x, this.out_w);
        return v;
    }
    set yxw(other) {
        this.y = other.x;
        this.x = other.y;
        this.w = other.z;
    }
    get zxw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_x, this.out_w);
        return v;
    }
    get out_zxw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_x, this.out_w);
        return v;
    }
    set zxw(other) {
        this.z = other.x;
        this.x = other.y;
        this.w = other.z;
    }
    get wxw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_x, this.out_w);
        return v;
    }
    get out_wxw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_x, this.out_w);
        return v;
    }
    get xyw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_y, this.out_w);
        return v;
    }
    get out_xyw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_y, this.out_w);
        return v;
    }
    set xyw(other) {
        this.x = other.x;
        this.y = other.y;
        this.w = other.z;
    }
    get yyw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_y, this.out_w);
        return v;
    }
    get out_yyw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_y, this.out_w);
        return v;
    }
    get zyw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_y, this.out_w);
        return v;
    }
    get out_zyw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_y, this.out_w);
        return v;
    }
    set zyw(other) {
        this.z = other.x;
        this.y = other.y;
        this.w = other.z;
    }
    get wyw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_y, this.out_w);
        return v;
    }
    get out_wyw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_y, this.out_w);
        return v;
    }
    get xzw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_z, this.out_w);
        return v;
    }
    get out_xzw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_z, this.out_w);
        return v;
    }
    set xzw(other) {
        this.x = other.x;
        this.z = other.y;
        this.w = other.z;
    }
    get yzw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_z, this.out_w);
        return v;
    }
    get out_yzw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_z, this.out_w);
        return v;
    }
    set yzw(other) {
        this.y = other.x;
        this.z = other.y;
        this.w = other.z;
    }
    get zzw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_z, this.out_w);
        return v;
    }
    get out_zzw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_z, this.out_w);
        return v;
    }
    get wzw() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_z, this.out_w);
        return v;
    }
    get out_wzw() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_z, this.out_w);
        return v;
    }
    get xww() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_x, this.out_w, this.out_w);
        return v;
    }
    get out_xww() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_x, this.out_w, this.out_w);
        return v;
    }
    get yww() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_y, this.out_w, this.out_w);
        return v;
    }
    get out_yww() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_y, this.out_w, this.out_w);
        return v;
    }
    get zww() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_z, this.out_w, this.out_w);
        return v;
    }
    get out_zww() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_z, this.out_w, this.out_w);
        return v;
    }
    get www() {
        let v = vec3Data.getData();
        v.set_N_N_N(this.out_w, this.out_w, this.out_w);
        return v;
    }
    get out_www() {
        let v = outVec3Data.getData();
        v.outSet_N_N_N(this.out_w, this.out_w, this.out_w);
        return v;
    }
    get xxxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_xxxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get yxxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_yxxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get zxxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_zxxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get wxxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get out_wxxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_x);
        return v;
    }
    get xyxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_xyxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get yyxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_yyxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get zyxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_zyxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get wyxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get out_wyxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_x);
        return v;
    }
    get xzxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_xzxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get yzxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_yzxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get zzxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_zzxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get wzxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get out_wzxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_x);
        return v;
    }
    get xwxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get out_xwxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get ywxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get out_ywxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get zwxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get out_zwxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get wwxx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get out_wwxx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_x);
        return v;
    }
    get xxyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_xxyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get yxyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_yxyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get zxyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_zxyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get wxyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get out_wxyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_x);
        return v;
    }
    get xyyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_xyyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get yyyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_yyyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get zyyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_zyyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get wyyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get out_wyyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_x);
        return v;
    }
    get xzyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_xzyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get yzyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_yzyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get zzyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_zzyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get wzyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_x);
        return v;
    }
    get out_wzyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_x);
        return v;
    }
    set wzyx(other) {
        this.w = other.x;
        this.z = other.y;
        this.y = other.z;
        this.x = other.w;
    }
    get xwyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get out_xwyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get ywyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get out_ywyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get zwyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get out_zwyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_x);
        return v;
    }
    set zwyx(other) {
        this.z = other.x;
        this.w = other.y;
        this.y = other.z;
        this.x = other.w;
    }
    get wwyx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get out_wwyx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_x);
        return v;
    }
    get xxzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_xxzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get yxzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_yxzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get zxzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_zxzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get wxzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get out_wxzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_x);
        return v;
    }
    get xyzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_xyzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get yyzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_yyzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get zyzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_zyzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get wyzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_x);
        return v;
    }
    get out_wyzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_x);
        return v;
    }
    set wyzx(other) {
        this.w = other.x;
        this.y = other.y;
        this.z = other.z;
        this.x = other.w;
    }
    get xzzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_xzzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get yzzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_yzzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get zzzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_zzzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get wzzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get out_wzzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_x);
        return v;
    }
    get xwzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get out_xwzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get ywzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get out_ywzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_x);
        return v;
    }
    set ywzx(other) {
        this.y = other.x;
        this.w = other.y;
        this.z = other.z;
        this.x = other.w;
    }
    get zwzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get out_zwzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get wwzx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get out_wwzx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_x);
        return v;
    }
    get xxwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get out_xxwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get yxwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get out_yxwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get zxwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get out_zxwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get wxwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get out_wxwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_x);
        return v;
    }
    get xywx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get out_xywx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get yywx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get out_yywx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get zywx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get out_zywx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_x);
        return v;
    }
    set zywx(other) {
        this.z = other.x;
        this.y = other.y;
        this.w = other.z;
        this.x = other.w;
    }
    get wywx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get out_wywx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_x);
        return v;
    }
    get xzwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get out_xzwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get yzwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get out_yzwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_x);
        return v;
    }
    set yzwx(other) {
        this.y = other.x;
        this.z = other.y;
        this.w = other.z;
        this.x = other.w;
    }
    get zzwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get out_zzwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get wzwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get out_wzwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_x);
        return v;
    }
    get xwwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get out_xwwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get ywwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get out_ywwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get zwwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get out_zwwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get wwwx() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get out_wwwx() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_x);
        return v;
    }
    get xxxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_xxxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get yxxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_yxxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get zxxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_zxxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get wxxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get out_wxxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_y);
        return v;
    }
    get xyxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_xyxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get yyxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_yyxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get zyxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_zyxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get wyxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get out_wyxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_y);
        return v;
    }
    get xzxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_xzxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get yzxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_yzxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get zzxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_zzxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get wzxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_y);
        return v;
    }
    get out_wzxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_y);
        return v;
    }
    set wzxy(other) {
        this.w = other.x;
        this.z = other.y;
        this.x = other.z;
        this.y = other.w;
    }
    get xwxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get out_xwxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get ywxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get out_ywxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get zwxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get out_zwxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_y);
        return v;
    }
    set zwxy(other) {
        this.z = other.x;
        this.w = other.y;
        this.x = other.z;
        this.y = other.w;
    }
    get wwxy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get out_wwxy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_y);
        return v;
    }
    get xxyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_xxyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get yxyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_yxyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get zxyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_zxyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get wxyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get out_wxyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_y);
        return v;
    }
    get xyyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_xyyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get yyyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_yyyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get zyyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_zyyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get wyyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get out_wyyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_y);
        return v;
    }
    get xzyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_xzyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get yzyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_yzyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get zzyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_zzyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get wzyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get out_wzyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_y);
        return v;
    }
    get xwyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get out_xwyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get ywyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get out_ywyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get zwyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get out_zwyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get wwyy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get out_wwyy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_y);
        return v;
    }
    get xxzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_xxzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get yxzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_yxzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get zxzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_zxzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get wxzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_y);
        return v;
    }
    get out_wxzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_y);
        return v;
    }
    set wxzy(other) {
        this.w = other.x;
        this.x = other.y;
        this.z = other.z;
        this.y = other.w;
    }
    get xyzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_xyzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get yyzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_yyzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get zyzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_zyzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get wyzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get out_wyzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_y);
        return v;
    }
    get xzzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_xzzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get yzzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_yzzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get zzzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_zzzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get wzzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get out_wzzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_y);
        return v;
    }
    get xwzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get out_xwzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_y);
        return v;
    }
    set xwzy(other) {
        this.x = other.x;
        this.w = other.y;
        this.z = other.z;
        this.y = other.w;
    }
    get ywzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get out_ywzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get zwzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get out_zwzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get wwzy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get out_wwzy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_y);
        return v;
    }
    get xxwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get out_xxwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get yxwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get out_yxwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get zxwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get out_zxwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_y);
        return v;
    }
    set zxwy(other) {
        this.z = other.x;
        this.x = other.y;
        this.w = other.z;
        this.y = other.w;
    }
    get wxwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get out_wxwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_y);
        return v;
    }
    get xywy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get out_xywy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get yywy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get out_yywy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get zywy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get out_zywy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get wywy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get out_wywy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_y);
        return v;
    }
    get xzwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get out_xzwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_y);
        return v;
    }
    set xzwy(other) {
        this.x = other.x;
        this.z = other.y;
        this.w = other.z;
        this.y = other.w;
    }
    get yzwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get out_yzwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get zzwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get out_zzwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get wzwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get out_wzwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_y);
        return v;
    }
    get xwwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get out_xwwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get ywwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get out_ywwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get zwwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get out_zwwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get wwwy() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get out_wwwy() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_y);
        return v;
    }
    get xxxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_xxxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get yxxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_yxxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get zxxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_zxxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get wxxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get out_wxxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_z);
        return v;
    }
    get xyxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_xyxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get yyxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_yyxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get zyxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_zyxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get wyxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_z);
        return v;
    }
    get out_wyxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_z);
        return v;
    }
    set wyxz(other) {
        this.w = other.x;
        this.y = other.y;
        this.x = other.z;
        this.z = other.w;
    }
    get xzxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_xzxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get yzxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_yzxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get zzxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_zzxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get wzxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get out_wzxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_z);
        return v;
    }
    get xwxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get out_xwxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get ywxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get out_ywxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_z);
        return v;
    }
    set ywxz(other) {
        this.y = other.x;
        this.w = other.y;
        this.x = other.z;
        this.z = other.w;
    }
    get zwxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get out_zwxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get wwxz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get out_wwxz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_z);
        return v;
    }
    get xxyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_xxyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get yxyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_yxyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get zxyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_zxyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get wxyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_z);
        return v;
    }
    get out_wxyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_z);
        return v;
    }
    set wxyz(other) {
        this.w = other.x;
        this.x = other.y;
        this.y = other.z;
        this.z = other.w;
    }
    get xyyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_xyyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get yyyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_yyyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get zyyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_zyyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get wyyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get out_wyyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_z);
        return v;
    }
    get xzyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_xzyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get yzyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_yzyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get zzyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_zzyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get wzyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get out_wzyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_z);
        return v;
    }
    get xwyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get out_xwyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_z);
        return v;
    }
    set xwyz(other) {
        this.x = other.x;
        this.w = other.y;
        this.y = other.z;
        this.z = other.w;
    }
    get ywyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get out_ywyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get zwyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get out_zwyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get wwyz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get out_wwyz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_z);
        return v;
    }
    get xxzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_xxzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get yxzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_yxzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get zxzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_zxzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get wxzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get out_wxzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_z);
        return v;
    }
    get xyzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_xyzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get yyzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_yyzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get zyzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_zyzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get wyzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get out_wyzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_z);
        return v;
    }
    get xzzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_xzzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get yzzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_yzzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get zzzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_zzzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get wzzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get out_wzzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_z);
        return v;
    }
    get xwzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get out_xwzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get ywzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get out_ywzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get zwzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get out_zwzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get wwzz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get out_wwzz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_z);
        return v;
    }
    get xxwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get out_xxwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get yxwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get out_yxwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_z);
        return v;
    }
    set yxwz(other) {
        this.y = other.x;
        this.x = other.y;
        this.w = other.z;
        this.z = other.w;
    }
    get zxwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get out_zxwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get wxwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get out_wxwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_z);
        return v;
    }
    get xywz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get out_xywz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_z);
        return v;
    }
    set xywz(other) {
        this.x = other.x;
        this.y = other.y;
        this.w = other.z;
        this.z = other.w;
    }
    get yywz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get out_yywz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get zywz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get out_zywz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get wywz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get out_wywz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_z);
        return v;
    }
    get xzwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get out_xzwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get yzwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get out_yzwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get zzwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get out_zzwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get wzwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get out_wzwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_z);
        return v;
    }
    get xwwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get out_xwwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get ywwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get out_ywwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get zwwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get out_zwwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get wwwz() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get out_wwwz() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_z);
        return v;
    }
    get xxxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get out_xxxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get yxxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get out_yxxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get zxxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get out_zxxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get wxxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get out_wxxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_x, this.out_w);
        return v;
    }
    get xyxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get out_xyxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get yyxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get out_yyxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get zyxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get out_zyxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_x, this.out_w);
        return v;
    }
    set zyxw(other) {
        this.z = other.x;
        this.y = other.y;
        this.x = other.z;
        this.w = other.w;
    }
    get wyxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get out_wyxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_x, this.out_w);
        return v;
    }
    get xzxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get out_xzxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get yzxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get out_yzxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_x, this.out_w);
        return v;
    }
    set yzxw(other) {
        this.y = other.x;
        this.z = other.y;
        this.x = other.z;
        this.w = other.w;
    }
    get zzxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get out_zzxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get wzxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get out_wzxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_x, this.out_w);
        return v;
    }
    get xwxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get out_xwxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get ywxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get out_ywxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get zwxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get out_zwxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get wwxw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get out_wwxw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_x, this.out_w);
        return v;
    }
    get xxyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get out_xxyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get yxyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get out_yxyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get zxyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get out_zxyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_y, this.out_w);
        return v;
    }
    set zxyw(other) {
        this.z = other.x;
        this.x = other.y;
        this.y = other.z;
        this.w = other.w;
    }
    get wxyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get out_wxyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_y, this.out_w);
        return v;
    }
    get xyyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get out_xyyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get yyyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get out_yyyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get zyyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get out_zyyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get wyyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get out_wyyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_y, this.out_w);
        return v;
    }
    get xzyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get out_xzyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_y, this.out_w);
        return v;
    }
    set xzyw(other) {
        this.x = other.x;
        this.z = other.y;
        this.y = other.z;
        this.w = other.w;
    }
    get yzyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get out_yzyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get zzyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get out_zzyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get wzyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get out_wzyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_y, this.out_w);
        return v;
    }
    get xwyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get out_xwyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get ywyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get out_ywyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get zwyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get out_zwyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get wwyw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get out_wwyw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_y, this.out_w);
        return v;
    }
    get xxzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get out_xxzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get yxzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get out_yxzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_z, this.out_w);
        return v;
    }
    set yxzw(other) {
        this.y = other.x;
        this.x = other.y;
        this.z = other.z;
        this.w = other.w;
    }
    get zxzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get out_zxzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get wxzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get out_wxzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_z, this.out_w);
        return v;
    }
    get xyzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get out_xyzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_z, this.out_w);
        return v;
    }
    set xyzw(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        this.w = other.w;
    }
    get yyzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get out_yyzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get zyzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get out_zyzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get wyzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get out_wyzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_z, this.out_w);
        return v;
    }
    get xzzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get out_xzzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get yzzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get out_yzzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get zzzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get out_zzzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get wzzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get out_wzzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_z, this.out_w);
        return v;
    }
    get xwzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get out_xwzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get ywzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get out_ywzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get zwzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get out_zwzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get wwzw() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get out_wwzw() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_z, this.out_w);
        return v;
    }
    get xxww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get out_xxww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get yxww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get out_yxww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get zxww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get out_zxww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get wxww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get out_wxww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_x, this.out_w, this.out_w);
        return v;
    }
    get xyww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get out_xyww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get yyww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get out_yyww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get zyww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get out_zyww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get wyww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get out_wyww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_y, this.out_w, this.out_w);
        return v;
    }
    get xzww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get out_xzww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get yzww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get out_yzww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get zzww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get out_zzww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get wzww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get out_wzww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_z, this.out_w, this.out_w);
        return v;
    }
    get xwww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get out_xwww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_x, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get ywww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get out_ywww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_y, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get zwww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get out_zwww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_z, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get wwww() {
        let v = vec4Data.getData();
        v.set_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_w);
        return v;
    }
    get out_wwww() {
        let v = outVec4Data.getData();
        v.outSet_N_N_N_N(this.out_w, this.out_w, this.out_w, this.out_w);
        return v;
    }
}
exports.Vec4Data = Vec4Data;
class BVec34Data extends Vec4Data {
}
exports.BVec34Data = BVec34Data;
class IVec4Data extends Vec4Data {
    constructor() {
        super(...arguments);
        this.out_x = new IntData();
        this.out_y = new IntData();
        this.out_z = new IntData();
        this.out_w = new IntData();
    }
}
exports.IVec4Data = IVec4Data;
class NumData extends ValueType {
    constructor(v) {
        super();
        this._v = 0;
        this.v = v || 0;
    }
    ctor() {
        return floatData.getData();
    }
    get v() {
        return this._v;
    }
    set v(value) {
        this._v = value;
    }
    set(other) {
        this.v = other.v;
    }
}
exports.NumData = NumData;
class BoolData extends ValueType {
    constructor(v) {
        super();
        this._v = false;
        this.v = v || false;
    }
    ctor() {
        return floatData.getData();
    }
    get v() {
        return this._v;
    }
    set v(value) {
        this._v = value;
    }
    set(other) {
        this.v = other.v;
    }
}
exports.BoolData = BoolData;
class FloatData extends NumData {
}
exports.FloatData = FloatData;
class IntData extends NumData {
    set v(value) {
        this._v = floor(value);
    }
    get v() {
        return this._v;
    }
    ctor() {
        return intData.getData();
    }
}
exports.IntData = IntData;
class Sampler2D extends IntData {
}
exports.Sampler2D = Sampler2D;
class SamplerCube extends IntData {
}
exports.SamplerCube = SamplerCube;
class Mat3Data extends ValueType {
    constructor(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
        super();
        this.out_m00 = new FloatData();
        this.out_m01 = new FloatData();
        this.out_m02 = new FloatData();
        this.out_m03 = new FloatData();
        this.out_m04 = new FloatData();
        this.out_m05 = new FloatData();
        this.out_m06 = new FloatData();
        this.out_m07 = new FloatData();
        this.out_m08 = new FloatData();
        this.out_m00.v = m00 || 0;
        this.out_m01.v = m01 || 0;
        this.out_m02.v = m02 || 0;
        this.out_m03.v = m03 || 0;
        this.out_m04.v = m04 || 0;
        this.out_m05.v = m05 || 0;
        this.out_m06.v = m06 || 0;
        this.out_m07.v = m07 || 0;
        this.out_m08.v = m08 || 0;
    }
    static multiply(out, a, b) {
        const a00 = a.m00;
        const a01 = a.m01;
        const a02 = a.m02;
        const a10 = a.m03;
        const a11 = a.m04;
        const a12 = a.m05;
        const a20 = a.m06;
        const a21 = a.m07;
        const a22 = a.m08;
        const b00 = b.m00;
        const b01 = b.m01;
        const b02 = b.m02;
        const b10 = b.m03;
        const b11 = b.m04;
        const b12 = b.m05;
        const b20 = b.m06;
        const b21 = b.m07;
        const b22 = b.m08;
        out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
        out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
        out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
        out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
        out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
        out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
        out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
        out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
        out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
    }
    static multiplyScalar(out, a, b) {
        out.m00 = a.m00 * b;
        out.m01 = a.m01 * b;
        out.m02 = a.m02 * b;
        out.m03 = a.m03 * b;
        out.m04 = a.m04 * b;
        out.m05 = a.m05 * b;
        out.m06 = a.m06 * b;
        out.m07 = a.m07 * b;
        out.m08 = a.m08 * b;
        return out;
    }
    static add(out, a, b) {
        out.m00 = a.m00 + b.m00;
        out.m01 = a.m01 + b.m01;
        out.m02 = a.m02 + b.m02;
        out.m03 = a.m03 + b.m03;
        out.m04 = a.m04 + b.m04;
        out.m05 = a.m05 + b.m05;
        out.m06 = a.m06 + b.m06;
        out.m07 = a.m07 + b.m07;
        out.m08 = a.m08 + b.m08;
        return out;
    }
    static subtract(out, a, b) {
        out.m00 = a.m00 - b.m00;
        out.m01 = a.m01 - b.m01;
        out.m02 = a.m02 - b.m02;
        out.m03 = a.m03 - b.m03;
        out.m04 = a.m04 - b.m04;
        out.m05 = a.m05 - b.m05;
        out.m06 = a.m06 - b.m06;
        out.m07 = a.m07 - b.m07;
        out.m08 = a.m08 - b.m08;
        return out;
    }
    get m00() {
        return this.out_m00.v;
    }
    set m00(v) {
        this.out_m00.v = v;
    }
    get m01() {
        return this.out_m01.v;
    }
    set m01(v) {
        this.out_m01.v = v;
    }
    get m02() {
        return this.out_m02.v;
    }
    set m02(v) {
        this.out_m02.v = v;
    }
    get m03() {
        return this.out_m03.v;
    }
    set m03(v) {
        this.out_m03.v = v;
    }
    get m04() {
        return this.out_m04.v;
    }
    set m04(v) {
        this.out_m04.v = v;
    }
    get m05() {
        return this.out_m05.v;
    }
    set m05(v) {
        this.out_m05.v = v;
    }
    get m06() {
        return this.out_m06.v;
    }
    set m06(v) {
        this.out_m06.v = v;
    }
    get m07() {
        return this.out_m07.v;
    }
    set m07(v) {
        this.out_m07.v = v;
    }
    get m08() {
        return this.out_m08.v;
    }
    set m08(v) {
        this.out_m08.v = v;
    }
    get x() {
        let v3 = vec3Data.getData();
        v3.x = this.m00;
        v3.y = this.m01;
        v3.z = this.m02;
        return v3;
    }
    get out_x() {
        let v3 = outVec3Data.getData();
        v3.out_x = this.out_m00;
        v3.out_y = this.out_m01;
        v3.out_z = this.out_m02;
        return v3;
    }
    set x(v3) {
        this.m00 = v3.x;
        this.m01 = v3.y;
        this.m02 = v3.z;
    }
    get y() {
        let v3 = vec3Data.getData();
        v3.x = this.m03;
        v3.y = this.m04;
        v3.z = this.m05;
        return v3;
    }
    set(other) {
        this.m00 = other.m00;
        this.m01 = other.m01;
        this.m02 = other.m02;
        this.m03 = other.m03;
        this.m04 = other.m04;
        this.m05 = other.m05;
        this.m06 = other.m06;
        this.m07 = other.m07;
        this.m08 = other.m08;
    }
    set_M3(other) {
        this.m00 = other.m00;
        this.m01 = other.m01;
        this.m02 = other.m02;
        this.m03 = other.m03;
        this.m04 = other.m04;
        this.m05 = other.m05;
        this.m06 = other.m06;
        this.m07 = other.m07;
        this.m08 = other.m08;
    }
    get out_y() {
        let v3 = outVec3Data.getData();
        v3.out_x = this.out_m03;
        v3.out_y = this.out_m04;
        v3.out_z = this.out_m05;
        return v3;
    }
    set y(v3) {
        this.m03 = v3.x;
        this.m04 = v3.y;
        this.m05 = v3.z;
    }
    get z() {
        let v3 = vec3Data.getData();
        v3.x = this.m06;
        v3.y = this.m07;
        v3.z = this.m08;
        return v3;
    }
    get out_z() {
        let v3 = outVec3Data.getData();
        v3.out_x = this.out_m06;
        v3.out_y = this.out_m07;
        v3.out_z = this.out_m08;
        return v3;
    }
    set z(v3) {
        this.m06 = v3.x;
        this.m07 = v3.y;
        this.m08 = v3.z;
    }
}
exports.Mat3Data = Mat3Data;
// 内部的Num类型变量 不能使用
class Mat4Data extends ValueType {
    constructor(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15) {
        super();
        this.out_m00 = new FloatData();
        this.out_m01 = new FloatData();
        this.out_m02 = new FloatData();
        this.out_m03 = new FloatData();
        this.out_m04 = new FloatData();
        this.out_m05 = new FloatData();
        this.out_m06 = new FloatData();
        this.out_m07 = new FloatData();
        this.out_m08 = new FloatData();
        this.out_m09 = new FloatData();
        this.out_m10 = new FloatData();
        this.out_m11 = new FloatData();
        this.out_m12 = new FloatData();
        this.out_m13 = new FloatData();
        this.out_m14 = new FloatData();
        this.out_m15 = new FloatData();
        this.out_m00.v = m00 || 0;
        this.out_m01.v = m01 || 0;
        this.out_m02.v = m02 || 0;
        this.out_m03.v = m03 || 0;
        this.out_m04.v = m04 || 0;
        this.out_m05.v = m05 || 0;
        this.out_m06.v = m06 || 0;
        this.out_m07.v = m07 || 0;
        this.out_m08.v = m08 || 0;
        this.out_m09.v = m09 || 0;
        this.out_m10.v = m10 || 0;
        this.out_m11.v = m11 || 0;
        this.out_m12.v = m12 || 0;
        this.out_m13.v = m13 || 0;
        this.out_m14.v = m14 || 0;
        this.out_m15.v = m15 || 0;
    }
    static multiply(out, a, b) {
        const a00 = a.m00;
        const a01 = a.m01;
        const a02 = a.m02;
        const a03 = a.m03;
        const a10 = a.m04;
        const a11 = a.m05;
        const a12 = a.m06;
        const a13 = a.m07;
        const a20 = a.m08;
        const a21 = a.m09;
        const a22 = a.m10;
        const a23 = a.m11;
        const a30 = a.m12;
        const a31 = a.m13;
        const a32 = a.m14;
        const a33 = a.m15;
        // Cache only the current line of the second matrix
        let b0 = b.m00;
        let b1 = b.m01;
        let b2 = b.m02;
        let b3 = b.m03;
        out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m04;
        b1 = b.m05;
        b2 = b.m06;
        b3 = b.m07;
        out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m08;
        b1 = b.m09;
        b2 = b.m10;
        b3 = b.m11;
        out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m12;
        b1 = b.m13;
        b2 = b.m14;
        b3 = b.m15;
        out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
    }
    static multiplyScalar(out, a, b) {
        out.m00 = a.m00 * b;
        out.m01 = a.m01 * b;
        out.m02 = a.m02 * b;
        out.m03 = a.m03 * b;
        out.m04 = a.m04 * b;
        out.m05 = a.m05 * b;
        out.m06 = a.m06 * b;
        out.m07 = a.m07 * b;
        out.m08 = a.m08 * b;
        out.m09 = a.m09 * b;
        out.m10 = a.m10 * b;
        out.m11 = a.m11 * b;
        out.m12 = a.m12 * b;
        out.m13 = a.m13 * b;
        out.m14 = a.m14 * b;
        out.m15 = a.m15 * b;
        return out;
    }
    static add(out, a, b) {
        out.m00 = a.m00 + b.m00;
        out.m01 = a.m01 + b.m01;
        out.m02 = a.m02 + b.m02;
        out.m03 = a.m03 + b.m03;
        out.m04 = a.m04 + b.m04;
        out.m05 = a.m05 + b.m05;
        out.m06 = a.m06 + b.m06;
        out.m07 = a.m07 + b.m07;
        out.m08 = a.m08 + b.m08;
        out.m09 = a.m09 + b.m09;
        out.m10 = a.m10 + b.m10;
        out.m11 = a.m11 + b.m11;
        out.m12 = a.m12 + b.m12;
        out.m13 = a.m13 + b.m13;
        out.m14 = a.m14 + b.m14;
        out.m15 = a.m15 + b.m15;
        return out;
    }
    static subtract(out, a, b) {
        out.m00 = a.m00 - b.m00;
        out.m01 = a.m01 - b.m01;
        out.m02 = a.m02 - b.m02;
        out.m03 = a.m03 - b.m03;
        out.m04 = a.m04 - b.m04;
        out.m05 = a.m05 - b.m05;
        out.m06 = a.m06 - b.m06;
        out.m07 = a.m07 - b.m07;
        out.m08 = a.m08 - b.m08;
        out.m09 = a.m09 - b.m09;
        out.m10 = a.m10 - b.m10;
        out.m11 = a.m11 - b.m11;
        out.m12 = a.m12 - b.m12;
        out.m13 = a.m13 - b.m13;
        out.m14 = a.m14 - b.m14;
        out.m15 = a.m15 - b.m15;
        return out;
    }
    get m00() {
        return this.out_m00.v;
    }
    set m00(v) {
        this.out_m00.v = v;
    }
    get m01() {
        return this.out_m01.v;
    }
    set m01(v) {
        this.out_m01.v = v;
    }
    get m02() {
        return this.out_m02.v;
    }
    set m02(v) {
        this.out_m02.v = v;
    }
    get m03() {
        return this.out_m03.v;
    }
    set m03(v) {
        this.out_m03.v = v;
    }
    get m04() {
        return this.out_m04.v;
    }
    set m04(v) {
        this.out_m04.v = v;
    }
    get m05() {
        return this.out_m05.v;
    }
    set m05(v) {
        this.out_m05.v = v;
    }
    get m06() {
        return this.out_m06.v;
    }
    set m06(v) {
        this.out_m06.v = v;
    }
    get m07() {
        return this.out_m07.v;
    }
    set m07(v) {
        this.out_m07.v = v;
    }
    get m08() {
        return this.out_m08.v;
    }
    set m08(v) {
        this.out_m08.v = v;
    }
    get m09() {
        return this.out_m09.v;
    }
    set m09(v) {
        this.out_m09.v = v;
    }
    get m10() {
        return this.out_m10.v;
    }
    set m10(v) {
        this.out_m10.v = v;
    }
    get m11() {
        return this.out_m11.v;
    }
    set m11(v) {
        this.out_m11.v = v;
    }
    get m12() {
        return this.out_m12.v;
    }
    set m12(v) {
        this.out_m12.v = v;
    }
    get m13() {
        return this.out_m13.v;
    }
    set m13(v) {
        this.out_m13.v = v;
    }
    get m14() {
        return this.out_m14.v;
    }
    set m14(v) {
        this.out_m14.v = v;
    }
    get m15() {
        return this.out_m15.v;
    }
    set m15(v) {
        this.out_m15.v = v;
    }
    set(other) {
        this.m00 = other.m00;
        this.m01 = other.m01;
        this.m02 = other.m02;
        this.m03 = other.m03;
        this.m04 = other.m04;
        this.m05 = other.m05;
        this.m06 = other.m06;
        this.m07 = other.m07;
        this.m08 = other.m08;
        this.m09 = other.m09;
        this.m10 = other.m10;
        this.m11 = other.m11;
        this.m12 = other.m12;
        this.m13 = other.m13;
        this.m14 = other.m14;
        this.m15 = other.m15;
    }
    set_M4(other) {
        this.m00 = other.m00;
        this.m01 = other.m01;
        this.m02 = other.m02;
        this.m03 = other.m03;
        this.m04 = other.m04;
        this.m05 = other.m05;
        this.m06 = other.m06;
        this.m07 = other.m07;
        this.m08 = other.m08;
        this.m09 = other.m09;
        this.m10 = other.m10;
        this.m11 = other.m11;
        this.m12 = other.m12;
        this.m13 = other.m13;
        this.m14 = other.m14;
        this.m15 = other.m15;
    }
    get x() {
        let v4 = vec4Data.getData();
        v4.x = this.m00;
        v4.y = this.m01;
        v4.z = this.m02;
        v4.w = this.m03;
        return v4;
    }
    get out_x() {
        let v4 = outVec4Data.getData();
        v4.out_x = this.out_m00;
        v4.out_y = this.out_m01;
        v4.out_z = this.out_m02;
        v4.out_w = this.out_m03;
        return v4;
    }
    set x(v4) {
        this.m00 = v4.x;
        this.m01 = v4.y;
        this.m02 = v4.z;
        this.m03 = v4.w;
    }
    get y() {
        let v4 = vec4Data.getData();
        v4.x = this.m04;
        v4.y = this.m05;
        v4.z = this.m06;
        v4.w = this.m07;
        return v4;
    }
    get out_y() {
        let v4 = outVec4Data.getData();
        v4.out_x = this.out_m04;
        v4.out_y = this.out_m05;
        v4.out_z = this.out_m06;
        v4.out_w = this.out_m07;
        return v4;
    }
    set y(v4) {
        this.m04 = v4.x;
        this.m05 = v4.y;
        this.m06 = v4.z;
        this.m07 = v4.w;
    }
    get z() {
        let v4 = vec4Data.getData();
        v4.x = this.m08;
        v4.y = this.m09;
        v4.z = this.m10;
        v4.w = this.m11;
        return v4;
    }
    get out_z() {
        let v4 = outVec4Data.getData();
        v4.out_x = this.out_m08;
        v4.out_y = this.out_m09;
        v4.out_z = this.out_m10;
        v4.out_w = this.out_m11;
        return v4;
    }
    set z(v4) {
        this.m08 = v4.x;
        this.m09 = v4.y;
        this.m10 = v4.z;
        this.m11 = v4.w;
    }
    get w() {
        let v4 = vec4Data.getData();
        v4.x = this.m12;
        v4.y = this.m13;
        v4.z = this.m14;
        v4.w = this.m15;
        return v4;
    }
    get out_w() {
        let v4 = outVec4Data.getData();
        v4.out_x = this.out_m12;
        v4.out_y = this.out_m13;
        v4.out_z = this.out_m14;
        v4.out_w = this.out_m15;
        return v4;
    }
    set w(v4) {
        this.m12 = v4.x;
        this.m13 = v4.y;
        this.m14 = v4.z;
        this.m15 = v4.w;
    }
}
exports.Mat4Data = Mat4Data;


/***/ }),

/***/ "./ts/src/webglImpl/shader/builtin/BuiltinFunc.ts":
/*!********************************************************!*\
  !*** ./ts/src/webglImpl/shader/builtin/BuiltinFunc.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// import { Vec2Data, Vec3Data, Vec4Data } from "cc"
const CpuRenderingContext_1 = __webpack_require__(/*! ../../CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const BuiltinData_1 = __webpack_require__(/*! ./BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
let vec2Data = BuiltinData_1.builtinCachData.vec2Data;
let vec3Data = BuiltinData_1.builtinCachData.vec3Data;
let vec4Data = BuiltinData_1.builtinCachData.vec4Data;
let floatData = BuiltinData_1.builtinCachData.floatData;
let intData = BuiltinData_1.builtinCachData.intData;
let boolData = BuiltinData_1.builtinCachData.boolData;
let clampTmp = function (val, min, max) {
    return val < min ? min : val > max ? max : val;
};
let sinTmp = Math.sin;
let cosTmp = Math.cos;
let tanTmp = Math.tan;
let asinTmp = Math.asin;
let acosTmp = Math.acos;
let atanTmp = Math.atan;
let sinhTmp = Math.sinh;
let coshTmp = Math.cosh;
let tanhTmp = Math.tanh;
let asinhTmp = Math.asinh;
let acoshTmp = Math.acosh;
let atanhTmp = Math.atanh;
let powTmp = Math.pow;
let expTmp = Math.exp;
let logTmp = Math.log;
let log2Tmp = Math.log2;
let sqrtTmp = Math.sqrt;
let absTmp = Math.abs;
let signTmp = Math.sign;
let floorTmp = Math.floor;
let ceilTmp = Math.ceil;
let truncTmp = Math.trunc;
let roundTmp = Math.round;
let minTmp = Math.min;
let maxTmp = Math.max;
let modTmp = function (x, y) {
    return x - y * floorTmp(x / y);
};
let smoothstepTmp = function (edge0, edge1, x) {
    if (x <= edge0) {
        return 0;
    }
    else if (x >= edge1) {
        return 1;
    }
    else {
        let t = clampTmp(x - edge0 / (edge1 - edge0), 0, 1);
        return t * t * (3 - 2 * t);
    }
};
/** float step (float edge, float x) Returns 0.0 if x < edge; otherwise, it returns 1.0. */
let stepTmp = function (edge, x) {
    return x < edge ? 0 : 1;
};
// 没有内部实现的函数
/** float mix (float x, float y, float a) 返回 x*(1.0 – a) + y*a */
// let mix
const oneDegressRadin = Math.PI / 180;
function radian_N(degrees) {
    let data = degrees.ctor();
    data.v = oneDegressRadin * degrees.v;
    return data;
}
exports.radian_N = radian_N;
function radian_V2(degrees) {
    let data = vec2Data.getData();
    data.out_x.v = oneDegressRadin * degrees.x;
    data.out_y.v = oneDegressRadin * degrees.y;
    return data;
}
exports.radian_V2 = radian_V2;
function radian_V3(degrees) {
    let data = vec3Data.getData();
    data.out_x.v = oneDegressRadin * degrees.x;
    data.out_y.v = oneDegressRadin * degrees.y;
    data.out_z.v = oneDegressRadin * degrees.z;
    return data;
}
exports.radian_V3 = radian_V3;
function radian_V4(degrees) {
    let data = vec4Data.getData();
    data.out_x.v = oneDegressRadin * degrees.x;
    data.out_y.v = oneDegressRadin * degrees.y;
    data.out_z.v = oneDegressRadin * degrees.z;
    data.out_w.v = oneDegressRadin * degrees.w;
    return data;
}
exports.radian_V4 = radian_V4;
function degrees_N(radians) {
    let data = radians.ctor();
    data.v = radians.v / oneDegressRadin;
    return data;
}
exports.degrees_N = degrees_N;
function degrees_V2(radians) {
    let data = vec2Data.getData();
    data.out_x.v = radians.x / oneDegressRadin;
    data.out_y.v = radians.y / oneDegressRadin;
    return data;
}
exports.degrees_V2 = degrees_V2;
function degrees_V3(radians) {
    let data = vec3Data.getData();
    data.out_x.v = radians.x / oneDegressRadin;
    data.out_y.v = radians.y / oneDegressRadin;
    data.out_z.v = radians.z / oneDegressRadin;
    return data;
}
exports.degrees_V3 = degrees_V3;
function degrees_V4(radians) {
    let data = vec4Data.getData();
    data.out_x.v = radians.x / oneDegressRadin;
    data.out_y.v = radians.y / oneDegressRadin;
    data.out_w.v = radians.w / oneDegressRadin;
    return data;
}
exports.degrees_V4 = degrees_V4;
function sin_N(num) {
    let data = num.ctor();
    data.v = sinTmp(num.v);
    return data;
}
exports.sin_N = sin_N;
function sin_V2(num) {
    let data = vec2Data.getData();
    data.set_Vn(sinTmp(num.x), sinTmp(num.y));
    return data;
}
exports.sin_V2 = sin_V2;
function sin_V3(num) {
    let data = vec3Data.getData();
    data.set_Vn(sinTmp(num.x), sinTmp(num.y), sinTmp(num.z));
    return data;
}
exports.sin_V3 = sin_V3;
function sin_V4(num) {
    let data = vec4Data.getData();
    data.set_Vn(sinTmp(num.x), sinTmp(num.y), sinTmp(num.z), sinTmp(num.w));
    return data;
}
exports.sin_V4 = sin_V4;
function cos_N(num) {
    let data = num.ctor();
    data.v = cosTmp(num.v);
    return data;
}
exports.cos_N = cos_N;
function cos_V2(num) {
    let data = vec2Data.getData();
    data.set_Vn(cosTmp(num.x), cosTmp(num.y));
    return data;
}
exports.cos_V2 = cos_V2;
function cos_V3(num) {
    let data = vec3Data.getData();
    data.set_Vn(cosTmp(num.x), cosTmp(num.y), cosTmp(num.z));
    return data;
}
exports.cos_V3 = cos_V3;
function cos_V4(num) {
    let data = vec4Data.getData();
    data.set_Vn(cosTmp(num.x), cosTmp(num.y), cosTmp(num.z), cosTmp(num.w));
    return data;
}
exports.cos_V4 = cos_V4;
function tan_N(num) {
    let data = num.ctor();
    data.v = tanTmp(num.v);
    return data;
}
exports.tan_N = tan_N;
function tan_V2(num) {
    let data = vec2Data.getData();
    data.set_Vn(tanTmp(num.x), tanTmp(num.y));
    return data;
}
exports.tan_V2 = tan_V2;
function tan_V3(num) {
    let data = vec3Data.getData();
    data.set_Vn(tanTmp(num.x), tanTmp(num.y), tanTmp(num.z));
    return data;
}
exports.tan_V3 = tan_V3;
function tan_V4(num) {
    let data = vec4Data.getData();
    data.set_Vn(tanTmp(num.x), tanTmp(num.y), tanTmp(num.z), tanTmp(num.w));
    return data;
}
exports.tan_V4 = tan_V4;
function asin_N(num) {
    let data = num.ctor();
    data.v = asinTmp(num.v);
    return data;
}
exports.asin_N = asin_N;
function asin_V2(num) {
    let data = vec2Data.getData();
    data.set_Vn(asinTmp(num.x), asinTmp(num.y));
    return data;
}
exports.asin_V2 = asin_V2;
function asin_V3(num) {
    let data = vec3Data.getData();
    data.set_Vn(asinTmp(num.x), asinTmp(num.y), asinTmp(num.z));
    return data;
}
exports.asin_V3 = asin_V3;
function asin_V4(num) {
    let data = vec4Data.getData();
    data.set_Vn(asinTmp(num.x), asinTmp(num.y), asinTmp(num.z), asinTmp(num.w));
    return data;
}
exports.asin_V4 = asin_V4;
function acos_N(num) {
    let data = num.ctor();
    data.v = acosTmp(num.v);
    return data;
}
exports.acos_N = acos_N;
function acos_V2(num) {
    let data = vec2Data.getData();
    data.set_Vn(acosTmp(num.x), acosTmp(num.y));
    return data;
}
exports.acos_V2 = acos_V2;
function acos_V3(num) {
    let data = vec3Data.getData();
    data.set_Vn(acosTmp(num.x), acosTmp(num.y), acosTmp(num.z));
    return data;
}
exports.acos_V3 = acos_V3;
function acos_V4(num) {
    let data = vec4Data.getData();
    data.set_Vn(acosTmp(num.x), acosTmp(num.y), acosTmp(num.z), acosTmp(num.w));
    return data;
}
exports.acos_V4 = acos_V4;
function atan_N(x) {
    let data = x.ctor();
    data.v = atanTmp(x.v);
    return data;
}
exports.atan_N = atan_N;
function atan_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(atanTmp(x.x), atanTmp(x.y));
    return data;
}
exports.atan_V2 = atan_V2;
function atan_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(atanTmp(x.x), atanTmp(x.y), atanTmp(x.z));
    return data;
}
exports.atan_V3 = atan_V3;
function atan_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(atanTmp(x.x), atanTmp(x.y), atanTmp(x.z), atanTmp(x.w));
    return data;
}
exports.atan_V4 = atan_V4;
function atan_N_N(x, y) {
    let data = x.ctor();
    data.v = atanTmp(y.v / x.v);
    return data;
}
exports.atan_N_N = atan_N_N;
function atan_V2_V2(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(atanTmp(y.x / x.x), atanTmp(y.y / x.y));
    return data;
}
exports.atan_V2_V2 = atan_V2_V2;
function atan_V3_V3(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(atanTmp(y.x / x.x), atanTmp(y.y / x.y), atanTmp(y.z / x.z));
    return data;
}
exports.atan_V3_V3 = atan_V3_V3;
function atan_V4_V4(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(atanTmp(y.x / x.x), atanTmp(y.y / x.y), atanTmp(y.z / x.z), atanTmp(y.w / x.w));
    return data;
}
exports.atan_V4_V4 = atan_V4_V4;
function sinh_N(x) {
    let data = x.ctor();
    data.v = sinhTmp(x.v);
    return data;
}
exports.sinh_N = sinh_N;
function sinh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(sinhTmp(x.x), sinhTmp(x.y));
    return data;
}
exports.sinh_V2 = sinh_V2;
function sinh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(sinhTmp(x.x), sinhTmp(x.y), sinhTmp(x.z));
    return data;
}
exports.sinh_V3 = sinh_V3;
function sinh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(sinhTmp(x.x), sinhTmp(x.y), sinhTmp(x.z), sinhTmp(x.w));
    return data;
}
exports.sinh_V4 = sinh_V4;
function cosh_N(x) {
    let data = x.ctor();
    data.v = coshTmp(x.v);
    return data;
}
exports.cosh_N = cosh_N;
function cosh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(coshTmp(x.x), coshTmp(x.y));
    return data;
}
exports.cosh_V2 = cosh_V2;
function cosh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(coshTmp(x.x), coshTmp(x.y), coshTmp(x.z));
    return data;
}
exports.cosh_V3 = cosh_V3;
function cosh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(coshTmp(x.x), coshTmp(x.y), coshTmp(x.z), coshTmp(x.w));
    return data;
}
exports.cosh_V4 = cosh_V4;
function tanh_N(x) {
    let data = x.ctor();
    data.v = tanhTmp(x.v);
    return data;
}
exports.tanh_N = tanh_N;
function tanh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(tanhTmp(x.x), tanhTmp(x.y));
    return data;
}
exports.tanh_V2 = tanh_V2;
function tanh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(tanhTmp(x.x), tanhTmp(x.y), tanhTmp(x.z));
    return data;
}
exports.tanh_V3 = tanh_V3;
function tanh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(tanhTmp(x.x), tanhTmp(x.y), tanhTmp(x.z), tanhTmp(x.w));
    return data;
}
exports.tanh_V4 = tanh_V4;
function asinh_N(x) {
    let data = x.ctor();
    data.v = asinhTmp(x.v);
    return data;
}
exports.asinh_N = asinh_N;
function asinh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(asinhTmp(x.x), asinhTmp(x.y));
    return data;
}
exports.asinh_V2 = asinh_V2;
function asinh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(asinhTmp(x.x), asinhTmp(x.y), asinhTmp(x.z));
    return data;
}
exports.asinh_V3 = asinh_V3;
function asinh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(asinhTmp(x.x), asinhTmp(x.y), asinhTmp(x.z), asinhTmp(x.w));
    return data;
}
exports.asinh_V4 = asinh_V4;
function acosh_N(x) {
    let data = x.ctor();
    data.v = acoshTmp(x.v);
    return data;
}
exports.acosh_N = acosh_N;
function acosh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(acoshTmp(x.x), acoshTmp(x.y));
    return data;
}
exports.acosh_V2 = acosh_V2;
function acosh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(acoshTmp(x.x), acoshTmp(x.y), acoshTmp(x.z));
    return data;
}
exports.acosh_V3 = acosh_V3;
function acosh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(acoshTmp(x.x), acoshTmp(x.y), acoshTmp(x.z), acoshTmp(x.w));
    return data;
}
exports.acosh_V4 = acosh_V4;
function atanh_N(x) {
    let data = x.ctor();
    data.v = atanhTmp(x.v);
    return data;
}
exports.atanh_N = atanh_N;
function atanh_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(atanhTmp(x.x), atanhTmp(x.y));
    return data;
}
exports.atanh_V2 = atanh_V2;
function atanh_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(atanhTmp(x.x), atanhTmp(x.y), atanhTmp(x.z));
    return data;
}
exports.atanh_V3 = atanh_V3;
function atanh_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(atanhTmp(x.x), atanhTmp(x.y), atanhTmp(x.z), atanhTmp(x.w));
    return data;
}
exports.atanh_V4 = atanh_V4;
function abs_N(x) {
    let data = x.ctor();
    data.v = absTmp(x.v);
    return data;
}
exports.abs_N = abs_N;
function abs_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(absTmp(x.x), absTmp(x.y));
    return data;
}
exports.abs_V2 = abs_V2;
function abs_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(absTmp(x.x), absTmp(x.y), absTmp(x.z));
    return data;
}
exports.abs_V3 = abs_V3;
function abs_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(absTmp(x.x), absTmp(x.y), absTmp(x.z), absTmp(x.w));
    return data;
}
exports.abs_V4 = abs_V4;
function ceil_N(x) {
    let data = x.ctor();
    data.v = ceilTmp(x.v);
    return data;
}
exports.ceil_N = ceil_N;
function ceil_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(ceilTmp(x.x), ceilTmp(x.y));
    return data;
}
exports.ceil_V2 = ceil_V2;
function ceil_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(ceilTmp(x.x), ceilTmp(x.y), ceilTmp(x.z));
    return data;
}
exports.ceil_V3 = ceil_V3;
function ceil_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(ceilTmp(x.x), ceilTmp(x.y), ceilTmp(x.z), ceilTmp(x.w));
    return data;
}
exports.ceil_V4 = ceil_V4;
function clamp_N_N_N(x, min, max) {
    let data = x.ctor();
    data.v = clampTmp(x.v, min.v, max.v);
    return data;
}
exports.clamp_N_N_N = clamp_N_N_N;
function clamp_V2_N_N(x, min, max) {
    let data = vec2Data.getData();
    data.set_Vn(clampTmp(x.x, min.v, max.v), clampTmp(x.y, min.v, max.v));
    return data;
}
exports.clamp_V2_N_N = clamp_V2_N_N;
function clamp_V3_N_N(x, min, max) {
    let data = vec3Data.getData();
    data.set_Vn(clampTmp(x.x, min.v, max.v), clampTmp(x.y, min.v, max.v), clampTmp(x.z, min.v, max.v));
    return data;
}
exports.clamp_V3_N_N = clamp_V3_N_N;
function clamp_V4_N_N(x, min, max) {
    let data = vec4Data.getData();
    data.set_Vn(clampTmp(x.x, min.v, max.v), clampTmp(x.y, min.v, max.v), clampTmp(x.z, min.v, max.v), clampTmp(x.w, min.v, max.v));
    return data;
}
exports.clamp_V4_N_N = clamp_V4_N_N;
function clamp_V2_V2_V2(x, min, max) {
    let data = vec2Data.getData();
    data.set_Vn(clampTmp(x.x, min.x, max.x), clampTmp(x.y, min.y, max.y));
    return data;
}
exports.clamp_V2_V2_V2 = clamp_V2_V2_V2;
function clamp_V3_V3_V3(x, min, max) {
    let data = vec3Data.getData();
    data.set_Vn(clampTmp(x.x, min.x, max.x), clampTmp(x.y, min.y, max.y), clampTmp(x.z, min.z, max.z));
    return data;
}
exports.clamp_V3_V3_V3 = clamp_V3_V3_V3;
function clamp_V4_V4_V4(x, min, max) {
    let data = vec4Data.getData();
    data.set_Vn(clampTmp(x.x, min.x, max.x), clampTmp(x.y, min.y, max.y), clampTmp(x.z, min.z, max.z), clampTmp(x.w, min.w, max.w));
    return data;
}
exports.clamp_V4_V4_V4 = clamp_V4_V4_V4;
function mix_N_N_N(x, y, a) {
    let data = x.ctor();
    data.v = x.v * (1 - a.v) + y.v * a.v;
    return data;
}
exports.mix_N_N_N = mix_N_N_N;
function mix_V2_V2_N(x, y, a) {
    let data = vec2Data.getData();
    data.set_Vn(x.x * (1 - a.v) + y.x * a.v, x.y * (1 - a.v) + y.y * a.v);
    return data;
}
exports.mix_V2_V2_N = mix_V2_V2_N;
function mix_V3_V3_N(x, y, a) {
    let data = vec3Data.getData();
    data.set_Vn(x.x * (1 - a.v) + y.x * a.v, x.y * (1 - a.v) + y.y * a.v, x.z * (1 - a.v) + y.z * a.v);
    return data;
}
exports.mix_V3_V3_N = mix_V3_V3_N;
function mix_V4_V4_N(x, y, a) {
    let data = vec4Data.getData();
    data.set_Vn(x.x * (1 - a.v) + y.x * a.v, x.y * (1 - a.v) + y.y * a.v, x.z * (1 - a.v) + y.z * a.v, x.w * (1 - a.v) + y.w * a.v);
    return data;
}
exports.mix_V4_V4_N = mix_V4_V4_N;
function mix_V2_V2_V2(x, y, a) {
    let data = vec2Data.getData();
    data.set_Vn(x.x * (1 - a.x) + y.x * a.x, x.y * (1 - a.y) + y.y * a.y);
    return data;
}
exports.mix_V2_V2_V2 = mix_V2_V2_V2;
function mix_V3_V3_V3(x, y, a) {
    let data = vec3Data.getData();
    data.set_Vn(x.x * (1 - a.x) + y.x * a.x, x.y * (1 - a.y) + y.y * a.y, x.z * (1 - a.z) + y.z * a.z);
    return data;
}
exports.mix_V3_V3_V3 = mix_V3_V3_V3;
function mix_V4_V4_V4(x, y, a) {
    let data = vec4Data.getData();
    data.set_Vn(x.x * (1 - a.x) + y.x * a.x, x.y * (1 - a.y) + y.y * a.y, x.z * (1 - a.z) + y.z * a.z, x.w * (1 - a.w) + y.w * a.w);
    return data;
}
exports.mix_V4_V4_V4 = mix_V4_V4_V4;
function floor_N(x) {
    let data = x.ctor();
    data.v = floorTmp(x.v);
    return data;
}
exports.floor_N = floor_N;
function floor_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(floorTmp(x.x), floorTmp(x.y));
    return data;
}
exports.floor_V2 = floor_V2;
function floor_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(floorTmp(x.x), floorTmp(x.y), floorTmp(x.z));
    return data;
}
exports.floor_V3 = floor_V3;
function floor_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(floorTmp(x.x), floorTmp(x.y), floorTmp(x.z), floorTmp(x.w));
    return data;
}
exports.floor_V4 = floor_V4;
function fract_N(x) {
    let data = x.ctor();
    data.v = x.v - floorTmp(x.v);
    return data;
}
exports.fract_N = fract_N;
function fract_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(x.x - floorTmp(x.x), x.y - floorTmp(x.y));
    return data;
}
exports.fract_V2 = fract_V2;
function fract_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(x.x - floorTmp(x.x), x.y - floorTmp(x.y), x.z - floorTmp(x.z));
    return data;
}
exports.fract_V3 = fract_V3;
function fract_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(x.x - floorTmp(x.x), x.y - floorTmp(x.y), x.z - floorTmp(x.z), x.w - floorTmp(x.w));
    return data;
}
exports.fract_V4 = fract_V4;
function exp2_N(x) {
    let data = x.ctor();
    data.v = powTmp(2, x.v);
    return data;
}
exports.exp2_N = exp2_N;
function exp2_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(powTmp(2, x.x), powTmp(2, x.y));
    return data;
}
exports.exp2_V2 = exp2_V2;
function exp2_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(powTmp(2, x.x), powTmp(2, x.y), powTmp(2, x.z));
    return data;
}
exports.exp2_V3 = exp2_V3;
function exp2_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(powTmp(2, x.x), powTmp(2, x.y), powTmp(2, x.z), powTmp(2, x.w));
    return data;
}
exports.exp2_V4 = exp2_V4;
function exp_N(x) {
    let data = x.ctor();
    data.v = expTmp(x.v);
    return data;
}
exports.exp_N = exp_N;
function exp_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(expTmp(x.x), expTmp(x.y));
    return data;
}
exports.exp_V2 = exp_V2;
function exp_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(expTmp(x.x), expTmp(x.y), expTmp(x.z));
    return data;
}
exports.exp_V3 = exp_V3;
function exp_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(expTmp(x.x), expTmp(x.y), expTmp(x.z), expTmp(x.w));
    return data;
}
exports.exp_V4 = exp_V4;
function inversesqrt_N(x) {
    let data = x.ctor();
    data.v = 1 / sqrtTmp(x.v);
    return data;
}
exports.inversesqrt_N = inversesqrt_N;
function inversesqrt_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(1 / sqrtTmp(x.x), 1 / sqrtTmp(x.y));
    return data;
}
exports.inversesqrt_V2 = inversesqrt_V2;
function inversesqrt_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(1 / sqrtTmp(x.x), 1 / sqrtTmp(x.y), 1 / sqrtTmp(x.z));
    return data;
}
exports.inversesqrt_V3 = inversesqrt_V3;
function inversesqrt_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(1 / sqrtTmp(x.x), 1 / sqrtTmp(x.y), 1 / sqrtTmp(x.z), 1 / sqrtTmp(x.w));
    return data;
}
exports.inversesqrt_V4 = inversesqrt_V4;
function log_N(x) {
    let data = x.ctor();
    data.v = logTmp(x.v);
    return data;
}
exports.log_N = log_N;
function log_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(logTmp(x.x), logTmp(x.y));
    return data;
}
exports.log_V2 = log_V2;
function log_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(logTmp(x.x), logTmp(x.y), logTmp(x.z));
    return data;
}
exports.log_V3 = log_V3;
function log_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(logTmp(x.x), logTmp(x.y), logTmp(x.z), logTmp(x.w));
    return data;
}
exports.log_V4 = log_V4;
function log2_N(x) {
    let data = x.ctor();
    data.v = log2Tmp(x.v);
    return data;
}
exports.log2_N = log2_N;
function log2_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(log2Tmp(x.x), log2Tmp(x.y));
    return data;
}
exports.log2_V2 = log2_V2;
function log2_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(log2Tmp(x.x), log2Tmp(x.y), log2Tmp(x.z));
    return data;
}
exports.log2_V3 = log2_V3;
function log2_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(log2Tmp(x.x), log2Tmp(x.y), log2Tmp(x.z), log2Tmp(x.w));
    return data;
}
exports.log2_V4 = log2_V4;
function max_N_N(x, y) {
    let data = x.ctor();
    data.v = maxTmp(x.v, y.v);
    return data;
}
exports.max_N_N = max_N_N;
function max_V2_N(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(maxTmp(x.x, y.v), maxTmp(x.y, y.v));
    return data;
}
exports.max_V2_N = max_V2_N;
function max_V3_N(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(maxTmp(x.x, y.v), maxTmp(x.y, y.v), maxTmp(x.z, y.v));
    return data;
}
exports.max_V3_N = max_V3_N;
function max_V4_N(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(maxTmp(x.x, y.v), maxTmp(x.y, y.v), maxTmp(x.z, y.v), maxTmp(x.w, y.v));
    return data;
}
exports.max_V4_N = max_V4_N;
function max_V2_V2(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(maxTmp(x.x, y.x), maxTmp(x.y, y.y));
    return data;
}
exports.max_V2_V2 = max_V2_V2;
function max_V3_V3(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(maxTmp(x.x, y.x), maxTmp(x.y, y.y), maxTmp(x.z, y.z));
    return data;
}
exports.max_V3_V3 = max_V3_V3;
function max_V4_V4(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(maxTmp(x.x, y.x), maxTmp(x.y, y.y), maxTmp(x.z, y.z), maxTmp(x.w, y.w));
    return data;
}
exports.max_V4_V4 = max_V4_V4;
function min_N_N(x, y) {
    let data = x.ctor();
    data.v = minTmp(x.v, y.v);
    return data;
}
exports.min_N_N = min_N_N;
function min_V2_N(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(minTmp(x.x, y.v), minTmp(x.y, y.v));
    return data;
}
exports.min_V2_N = min_V2_N;
function min_V3_N(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(minTmp(x.x, y.v), minTmp(x.y, y.v), minTmp(x.z, y.v));
    return data;
}
exports.min_V3_N = min_V3_N;
function min_V4_N(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(minTmp(x.x, y.v), minTmp(x.y, y.v), minTmp(x.z, y.v), minTmp(x.w, y.v));
    return data;
}
exports.min_V4_N = min_V4_N;
function min_V2_V2(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(minTmp(x.x, y.x), minTmp(x.y, y.y));
    return data;
}
exports.min_V2_V2 = min_V2_V2;
function min_V3_V3(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(minTmp(x.x, y.x), minTmp(x.y, y.y), minTmp(x.z, y.z));
    return data;
}
exports.min_V3_V3 = min_V3_V3;
function min_V4_V4(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(minTmp(x.x, y.x), minTmp(x.y, y.y), minTmp(x.z, y.z), minTmp(x.w, y.w));
    return data;
}
exports.min_V4_V4 = min_V4_V4;
function mod_N_N(x, y) {
    let data = x.ctor();
    data.v = modTmp(x.v, y.v);
    return data;
}
exports.mod_N_N = mod_N_N;
function mod_V2_N(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(modTmp(x.x, y.v), modTmp(x.y, y.v));
    return data;
}
exports.mod_V2_N = mod_V2_N;
function mod_V3_N(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(modTmp(x.x, y.v), modTmp(x.y, y.v), modTmp(x.z, y.v));
    return data;
}
exports.mod_V3_N = mod_V3_N;
function mod_V4_N(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(modTmp(x.x, y.v), modTmp(x.y, y.v), modTmp(x.z, y.v), modTmp(x.w, y.v));
    return data;
}
exports.mod_V4_N = mod_V4_N;
function mod_V2_V2(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(modTmp(x.x, y.x), modTmp(x.y, y.y));
    return data;
}
exports.mod_V2_V2 = mod_V2_V2;
function mod_V3_V3(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(modTmp(x.x, y.x), modTmp(x.y, y.y), modTmp(x.z, y.z));
    return data;
}
exports.mod_V3_V3 = mod_V3_V3;
function mod_V4_V4(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(modTmp(x.x, y.x), modTmp(x.y, y.y), modTmp(x.z, y.z), modTmp(x.w, y.w));
    return data;
}
exports.mod_V4_V4 = mod_V4_V4;
function pow_N_N(x, y) {
    let data = x.ctor();
    data.v = powTmp(x.v, y.v);
    return data;
}
exports.pow_N_N = pow_N_N;
function pow_V2_V2(x, y) {
    let data = vec2Data.getData();
    data.set_Vn(powTmp(x.x, y.x), powTmp(x.y, y.y));
    return data;
}
exports.pow_V2_V2 = pow_V2_V2;
function pow_V3(x, y) {
    let data = vec3Data.getData();
    data.set_Vn(powTmp(x.x, y.x), powTmp(x.y, y.y), powTmp(x.z, y.z));
    return data;
}
exports.pow_V3 = pow_V3;
function pow_V4(x, y) {
    let data = vec4Data.getData();
    data.set_Vn(powTmp(x.x, y.x), powTmp(x.y, y.y), powTmp(x.z, y.z), powTmp(x.w, y.w));
    return data;
}
exports.pow_V4 = pow_V4;
function round_N(x) {
    let data = x.ctor();
    data.v = roundTmp(x.v);
    return data;
}
exports.round_N = round_N;
function round_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(roundTmp(x.x), roundTmp(x.y));
    return data;
}
exports.round_V2 = round_V2;
function round_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(roundTmp(x.x), roundTmp(x.y), roundTmp(x.z));
    return data;
}
exports.round_V3 = round_V3;
function round_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(roundTmp(x.x), roundTmp(x.y), roundTmp(x.z), roundTmp(x.w));
    return data;
}
exports.round_V4 = round_V4;
function sign_N(x) {
    let data = x.ctor();
    data.v = signTmp(x.v);
    return data;
}
exports.sign_N = sign_N;
function sign_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(signTmp(x.x), signTmp(x.y));
    return data;
}
exports.sign_V2 = sign_V2;
function sign_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(signTmp(x.x), signTmp(x.y), signTmp(x.z));
    return data;
}
exports.sign_V3 = sign_V3;
function sign_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(signTmp(x.x), signTmp(x.y), signTmp(x.z), signTmp(x.w));
    return data;
}
exports.sign_V4 = sign_V4;
function smoothstep_N_N_N(x, min, max) {
    let data = x.ctor();
    data.v = smoothstepTmp(x.v, min.v, max.v);
    return data;
}
exports.smoothstep_N_N_N = smoothstep_N_N_N;
function smoothstep_V2_N_N(x, min, max) {
    let data = vec2Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.v, max.v), smoothstepTmp(x.y, min.v, max.v));
    return data;
}
exports.smoothstep_V2_N_N = smoothstep_V2_N_N;
function smoothstep_V3_N_N(x, min, max) {
    let data = vec3Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.v, max.v), smoothstepTmp(x.y, min.v, max.v), smoothstepTmp(x.z, min.v, max.v));
    return data;
}
exports.smoothstep_V3_N_N = smoothstep_V3_N_N;
function smoothstep_V4_N_N(x, min, max) {
    let data = vec4Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.v, max.v), smoothstepTmp(x.y, min.v, max.v), smoothstepTmp(x.z, min.v, max.v), smoothstepTmp(x.w, min.v, max.v));
    return data;
}
exports.smoothstep_V4_N_N = smoothstep_V4_N_N;
function smoothstep_V2_V2_V2(x, min, max) {
    let data = vec2Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.x, max.x), smoothstepTmp(x.y, min.y, max.y));
    return data;
}
exports.smoothstep_V2_V2_V2 = smoothstep_V2_V2_V2;
function smoothstep_V3_V3_V3(x, min, max) {
    let data = vec3Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.x, max.x), smoothstepTmp(x.y, min.y, max.y), smoothstepTmp(x.z, min.z, max.z));
    return data;
}
exports.smoothstep_V3_V3_V3 = smoothstep_V3_V3_V3;
function smoothstep_V4_V4_V4(x, min, max) {
    let data = vec4Data.getData();
    data.set_Vn(smoothstepTmp(x.x, min.x, max.x), smoothstepTmp(x.y, min.y, max.y), smoothstepTmp(x.z, min.z, max.z), smoothstepTmp(x.w, min.w, max.w));
    return data;
}
exports.smoothstep_V4_V4_V4 = smoothstep_V4_V4_V4;
function sqrt_N(x) {
    let data = x.ctor();
    data.v = sqrtTmp(x.v);
    return data;
}
exports.sqrt_N = sqrt_N;
function sqrt_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(sqrtTmp(x.x), sqrtTmp(x.y));
    return data;
}
exports.sqrt_V2 = sqrt_V2;
function sqrt_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(sqrtTmp(x.x), sqrtTmp(x.y), sqrtTmp(x.z));
    return data;
}
exports.sqrt_V3 = sqrt_V3;
function sqrt_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(sqrtTmp(x.x), sqrtTmp(x.y), sqrtTmp(x.z), sqrtTmp(x.w));
    return data;
}
exports.sqrt_V4 = sqrt_V4;
function step_N_N(edge, x) {
    let data = x.ctor();
    data.v = stepTmp(edge.v, x.v);
    return data;
}
exports.step_N_N = step_N_N;
function step_N_V2(edge, x) {
    let data = vec2Data.getData();
    data.set_Vn(stepTmp(edge.v, x.x), stepTmp(edge.v, x.y));
    return data;
}
exports.step_N_V2 = step_N_V2;
function step_N_V3(edge, x) {
    let data = vec3Data.getData();
    data.set_Vn(stepTmp(edge.v, x.x), stepTmp(edge.v, x.y), stepTmp(edge.v, x.z));
    return data;
}
exports.step_N_V3 = step_N_V3;
function step_N_V4(edge, x) {
    let data = vec4Data.getData();
    data.set_Vn(stepTmp(edge.v, x.x), stepTmp(edge.v, x.y), stepTmp(edge.v, x.z), stepTmp(edge.v, x.w));
    return data;
}
exports.step_N_V4 = step_N_V4;
function step_V2_V2(edge, x) {
    let data = vec2Data.getData();
    data.set_Vn(stepTmp(edge.x, x.x), stepTmp(edge.y, x.y));
    return data;
}
exports.step_V2_V2 = step_V2_V2;
function step_V3_V3(edge, x) {
    let data = vec3Data.getData();
    data.set_Vn(stepTmp(edge.x, x.x), stepTmp(edge.y, x.y), stepTmp(edge.z, x.z));
    return data;
}
exports.step_V3_V3 = step_V3_V3;
function step_V4_V4(edge, x) {
    let data = vec4Data.getData();
    data.set_Vn(stepTmp(edge.x, x.x), stepTmp(edge.y, x.y), stepTmp(edge.z, x.z), stepTmp(edge.w, x.w));
    return data;
}
exports.step_V4_V4 = step_V4_V4;
function trunc_N(x) {
    let data = x.ctor();
    data.v = truncTmp(x.v);
    return data;
}
exports.trunc_N = trunc_N;
function trunc_V2(x) {
    let data = vec2Data.getData();
    data.set_Vn(truncTmp(x.x), truncTmp(x.y));
    return data;
}
exports.trunc_V2 = trunc_V2;
function trunc_V3(x) {
    let data = vec3Data.getData();
    data.set_Vn(truncTmp(x.x), truncTmp(x.y), truncTmp(x.z));
    return data;
}
exports.trunc_V3 = trunc_V3;
function trunc_V4(x) {
    let data = vec4Data.getData();
    data.set_Vn(truncTmp(x.x), truncTmp(x.y), truncTmp(x.z), truncTmp(x.w));
    return data;
}
exports.trunc_V4 = trunc_V4;
function cross_V3_V3(x, y) {
    let data = vec3Data.getData();
    data.set(BuiltinData_1.Vec3Data.cross(data, x, y));
    return data;
}
exports.cross_V3_V3 = cross_V3_V3;
function distance_N_N(p0, p1) {
    let data = floatData.getData();
    data.v = absTmp(p0.v - p1.v);
    return data;
}
exports.distance_N_N = distance_N_N;
function distance_V2_V2(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec2Data.distance(p0, p1);
    return data;
}
exports.distance_V2_V2 = distance_V2_V2;
function distance_V3_V3(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec3Data.distance(p0, p1);
    return data;
}
exports.distance_V3_V3 = distance_V3_V3;
function distance_V4_V4(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec4Data.distance(p0, p1);
    return data;
}
exports.distance_V4_V4 = distance_V4_V4;
function dot_N_N(p0, p1) {
    let data = floatData.getData();
    data.v = p0.v * p1.v;
    return data;
}
exports.dot_N_N = dot_N_N;
function dot_V2_V2(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec2Data.dot(p0, p1);
    return data;
}
exports.dot_V2_V2 = dot_V2_V2;
function dot_V3_V3(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec3Data.dot(p0, p1);
    return data;
}
exports.dot_V3_V3 = dot_V3_V3;
function dot_V4_V4(p0, p1) {
    let data = floatData.getData();
    data.v = BuiltinData_1.Vec4Data.dot(p0, p1);
    return data;
}
exports.dot_V4_V4 = dot_V4_V4;
function equal_N_N(p0, p1) {
    return p0.v == p1.v;
}
exports.equal_N_N = equal_N_N;
function equal_V2_V2(p0, p1) {
    return BuiltinData_1.Vec2Data.equals(p0, p1);
}
exports.equal_V2_V2 = equal_V2_V2;
function equal_V3_V3(p0, p1) {
    return BuiltinData_1.Vec3Data.equals(p0, p1);
}
exports.equal_V3_V3 = equal_V3_V3;
function equal_V4_V4(p0, p1) {
    return BuiltinData_1.Vec4Data.equals(p0, p1);
}
exports.equal_V4_V4 = equal_V4_V4;
function faceforward_N_N_N(N, I, Nref) {
    let data = N.ctor();
    data.set(N);
    if (!(Nref.v * I.v < 0)) {
        data.v = -data.v;
    }
    return data;
}
exports.faceforward_N_N_N = faceforward_N_N_N;
function faceforward_V2_V2_V2(N, I, Nref) {
    let data = vec2Data.getData();
    data.set(N);
    BuiltinData_1.Vec2Data.dot(Nref, I) < 0 ? data : data.set_Vn(-data.x, -data.y);
    return data;
}
exports.faceforward_V2_V2_V2 = faceforward_V2_V2_V2;
function faceforward_V3_V3_V3(N, I, Nref) {
    let data = vec3Data.getData();
    data.set(N);
    BuiltinData_1.Vec3Data.dot(Nref, I) < 0 ? data : data.set_Vn(-data.x, -data.y, -data.z);
    return data;
}
exports.faceforward_V3_V3_V3 = faceforward_V3_V3_V3;
function faceforward_V4_V4_V4(N, I, Nref) {
    let data = vec4Data.getData();
    data.set(N);
    BuiltinData_1.Vec4Data.dot(Nref, I) < 0 ? data : data.set_Vn(-data.x, -data.y, -data.z, -data.w);
    return data;
}
exports.faceforward_V4_V4_V4 = faceforward_V4_V4_V4;
function length_N(x) {
    let data = x.ctor();
    data.v = absTmp(x.v);
    return data;
}
exports.length_N = length_N;
function length_V2(x) {
    let data = floatData.getData();
    data.v = Math.sqrt(x.x * x.x + x.y * x.y);
    return data;
}
exports.length_V2 = length_V2;
function length_V3(x) {
    let data = floatData.getData();
    data.v = Math.sqrt(x.x * x.x + x.y * x.y + x.z * x.z);
    return data;
}
exports.length_V3 = length_V3;
function length_V4(x) {
    let data = floatData.getData();
    data.v = Math.sqrt(x.x * x.x + x.y * x.y + x.z * x.z + x.w * x.w);
    return data;
}
exports.length_V4 = length_V4;
function normalize_N(x) {
    let data = x.ctor();
    data.v = 1;
    return data;
}
exports.normalize_N = normalize_N;
function normalize_V2(v2) {
    let data = vec2Data.getData();
    data.set(v2);
    const x = data.x;
    const y = data.y;
    let len = x * x + y * y;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        data.x *= len;
        data.y *= len;
    }
    return data;
}
exports.normalize_V2 = normalize_V2;
function normalize_V3(v3) {
    let data = vec3Data.getData();
    data.set(v3);
    const x = data.x;
    const y = data.y;
    const z = data.z;
    let len = x * x + y * y + z * z;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        data.x *= len;
        data.y *= len;
        data.z *= len;
    }
    return data;
}
exports.normalize_V3 = normalize_V3;
function normalize_V4(v4) {
    let data = vec4Data.getData();
    data.set(v4);
    const x = data.x;
    const y = data.y;
    const z = data.z;
    const w = data.w;
    let len = x * x + y * y + z * z + w * w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        data.x *= len;
        data.y *= len;
        data.z *= len;
        data.w *= len;
    }
    return data;
}
exports.normalize_V4 = normalize_V4;
function notEqual_N_N(p0, p1) {
    let data = floatData.getData();
    return p0.v != p1.v;
}
exports.notEqual_N_N = notEqual_N_N;
function notEqual_V2_V2(p0, p1) {
    return !BuiltinData_1.Vec2Data.equals(p0, p1);
}
exports.notEqual_V2_V2 = notEqual_V2_V2;
function notEqual_V3_V3(p0, p1) {
    return !BuiltinData_1.Vec3Data.equals(p0, p1);
}
exports.notEqual_V3_V3 = notEqual_V3_V3;
function notEqual_V4_V4(p0, p1) {
    return !BuiltinData_1.Vec4Data.equals(p0, p1);
}
exports.notEqual_V4_V4 = notEqual_V4_V4;
// I - 2.0 * dot(N, I) * N.
function reflect_N_N(I, N) {
    let data = I.ctor();
    data.v = I.v - 2.0 * N.v * I.v * N.v;
    return data;
}
exports.reflect_N_N = reflect_N_N;
function reflect_V2_V2(I, N) {
    let data = vec2Data.getData();
    data.out_x.v = I.x - N.x * 2 * BuiltinData_1.Vec2Data.dot(N, I);
    data.out_y.v = I.y - N.y * 2 * BuiltinData_1.Vec2Data.dot(N, I);
    return data;
}
exports.reflect_V2_V2 = reflect_V2_V2;
function reflect_V3_V3(I, N) {
    let data = vec3Data.getData();
    data.out_x.v = I.x - N.x * 2 * BuiltinData_1.Vec3Data.dot(N, I);
    data.out_y.v = I.y - N.y * 2 * BuiltinData_1.Vec3Data.dot(N, I);
    data.out_z.v = I.z - N.z * 2 * BuiltinData_1.Vec3Data.dot(N, I);
    return data;
}
exports.reflect_V3_V3 = reflect_V3_V3;
function reflect_V4_V4(I, N) {
    let data = vec4Data.getData();
    data.out_x.v = I.x - N.x * 2 * BuiltinData_1.Vec4Data.dot(N, I);
    data.out_y.v = I.y - N.y * 2 * BuiltinData_1.Vec4Data.dot(N, I);
    data.out_z.v = I.z - N.z * 2 * BuiltinData_1.Vec4Data.dot(N, I);
    data.out_w.v = I.w - N.w * 2 * BuiltinData_1.Vec4Data.dot(N, I);
    return data;
}
exports.reflect_V4_V4 = reflect_V4_V4;
// 折射
// k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));
// if (k < 0.0)
//     R = genType(0.0);       // or genDType(0.0)
// else
//     R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;
function refract_N_N_N(I, N, eta) {
    let data = I.ctor();
    let v = eta.v;
    let NIDot = N.v * I.v;
    let k = 1.0 - v * v * (1.0 - NIDot * NIDot);
    if (k < 0.0) {
        data.v = 0;
    }
    else {
        let vd = v * I.v;
        data.v = vd - N.v * v * NIDot + sqrtTmp(k);
    }
    return data;
}
exports.refract_N_N_N = refract_N_N_N;
function refract_V2_V2_N(I, N, eta) {
    let data = vec2Data.getData();
    let v = eta.v;
    let NIDot = BuiltinData_1.Vec2Data.dot(N, I);
    let k = 1.0 - v * v * (1.0 - NIDot * NIDot);
    if (k < 0.0) {
        data.set_Vn(0, 0);
    }
    else {
        let vd = vec2Data.getData();
        BuiltinData_1.Vec2Data.multiplyScalar(vd, I, v);
        BuiltinData_1.Vec2Data.multiplyScalar(data, N, v * NIDot + sqrtTmp(k));
        BuiltinData_1.Vec2Data.subtract(data, vd, data);
    }
    return data;
}
exports.refract_V2_V2_N = refract_V2_V2_N;
function refract_V3_V3_N(I, N, eta) {
    let data = vec3Data.getData();
    let v = eta.v;
    let NIDot = BuiltinData_1.Vec3Data.dot(N, I);
    let k = 1.0 - v * v * (1.0 - NIDot * NIDot);
    if (k < 0.0) {
        data.set_Vn(0, 0, 0);
    }
    else {
        let vd = vec3Data.getData();
        BuiltinData_1.Vec3Data.multiplyScalar(vd, I, v);
        BuiltinData_1.Vec3Data.multiplyScalar(data, N, v * NIDot + sqrtTmp(k));
        BuiltinData_1.Vec3Data.subtract(data, vd, data);
    }
    return data;
}
exports.refract_V3_V3_N = refract_V3_V3_N;
function refract_V4_V4_N(I, N, eta) {
    let data = vec4Data.getData();
    let v = eta.v;
    let NIDot = BuiltinData_1.Vec4Data.dot(N, I);
    let k = 1.0 - v * v * (1.0 - NIDot * NIDot);
    if (k < 0.0) {
        data.set_Vn(0, 0, 0, 0);
    }
    else {
        let vd = vec4Data.getData();
        BuiltinData_1.Vec4Data.multiplyScalar(vd, I, v);
        BuiltinData_1.Vec4Data.multiplyScalar(data, N, v * NIDot + sqrtTmp(k));
        BuiltinData_1.Vec4Data.subtract(data, vd, data);
    }
    return data;
}
exports.refract_V4_V4_N = refract_V4_V4_N;
function determinant_M3(m) {
    let data = floatData.getData();
    const a00 = m.m00;
    const a01 = m.m01;
    const a02 = m.m02;
    const a10 = m.m03;
    const a11 = m.m04;
    const a12 = m.m05;
    const a20 = m.m06;
    const a21 = m.m07;
    const a22 = m.m08;
    data.v = a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
    return data;
}
exports.determinant_M3 = determinant_M3;
function determinant_M4(m) {
    let data = floatData.getData();
    const a00 = m.m00;
    const a01 = m.m01;
    const a02 = m.m02;
    const a03 = m.m03;
    const a10 = m.m04;
    const a11 = m.m05;
    const a12 = m.m06;
    const a13 = m.m07;
    const a20 = m.m08;
    const a21 = m.m09;
    const a22 = m.m10;
    const a23 = m.m11;
    const a30 = m.m12;
    const a31 = m.m13;
    const a32 = m.m14;
    const a33 = m.m15;
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    // Calculate the determinant
    data.v = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    return data;
}
exports.determinant_M4 = determinant_M4;
function inverse_M3(m) {
    let out = BuiltinData_1.builtinCachData.mat3Data.getData();
    const a00 = m.m00;
    const a01 = m.m01;
    const a02 = m.m02;
    const a10 = m.m03;
    const a11 = m.m04;
    const a12 = m.m05;
    const a20 = m.m06;
    const a21 = m.m07;
    const a22 = m.m08;
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (det === 0) {
        out.m00 = 0;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = 0;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        return out;
    }
    det = 1.0 / det;
    out.m00 = b01 * det;
    out.m01 = (-a22 * a01 + a02 * a21) * det;
    out.m02 = (a12 * a01 - a02 * a11) * det;
    out.m03 = b11 * det;
    out.m04 = (a22 * a00 - a02 * a20) * det;
    out.m05 = (-a12 * a00 + a02 * a10) * det;
    out.m06 = b21 * det;
    out.m07 = (-a21 * a00 + a01 * a20) * det;
    out.m08 = (a11 * a00 - a01 * a10) * det;
    return out;
}
exports.inverse_M3 = inverse_M3;
function inverse_M4(m) {
    let out = BuiltinData_1.builtinCachData.mat4Data.getData();
    const a00 = m.m00;
    const a01 = m.m01;
    const a02 = m.m02;
    const a03 = m.m03;
    const a10 = m.m04;
    const a11 = m.m05;
    const a12 = m.m06;
    const a13 = m.m07;
    const a20 = m.m08;
    const a21 = m.m09;
    const a22 = m.m10;
    const a23 = m.m11;
    const a30 = m.m12;
    const a31 = m.m13;
    const a32 = m.m14;
    const a33 = m.m15;
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    // Calculate the determinant
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    // Calculate the determinant
    if (det === 0) {
        out.m00 = 0;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = 0;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = 0;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 0;
        return out;
    }
    det = 1.0 / det;
    out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
}
exports.inverse_M4 = inverse_M4;
function int() {
    let data = intData.getData();
    data.v = 0;
    return data;
}
exports.int = int;
function int_N(x) {
    let data = intData.getData();
    data.v = BuiltinData_1.getNum(x) || 0;
    return data;
}
exports.int_N = int_N;
function float() {
    let data = floatData.getData();
    data.v = 0;
    return data;
}
exports.float = float;
function float_N(x) {
    let data = floatData.getData();
    data.v = BuiltinData_1.getNum(x) || 0;
    return data;
}
exports.float_N = float_N;
function vec2() {
    let data = vec2Data.getData();
    data.set_Vn(0, 0);
    return data;
}
exports.vec2 = vec2;
function vec2_N(x) {
    let data = vec2Data.getData();
    data.set_N_N(x, x);
    return data;
}
exports.vec2_N = vec2_N;
function vec2_N_N(x, y) {
    let data = vec2Data.getData();
    data.set_N_N(x, y);
    return data;
}
exports.vec2_N_N = vec2_N_N;
function vec2_V2(x) {
    let data = vec2Data.getData();
    data.set_V2(x);
    return data;
}
exports.vec2_V2 = vec2_V2;
function vec3() {
    let data = vec3Data.getData();
    data.set_Vn(0, 0, 0);
    return data;
}
exports.vec3 = vec3;
function vec3_N(x) {
    let data = vec3Data.getData();
    data.set_N_N_N(x, x, x);
    return data;
}
exports.vec3_N = vec3_N;
function vec3_N_N_N(x, y, z) {
    let data = vec3Data.getData();
    data.set_N_N_N(x, y, z);
    return data;
}
exports.vec3_N_N_N = vec3_N_N_N;
function vec3_V2_N(x, y) {
    let data = vec3Data.getData();
    data.set_N_N_N(x.out_x, x.out_y, y);
    return data;
}
exports.vec3_V2_N = vec3_V2_N;
function vec3_N_V2(x, y) {
    let data = vec3Data.getData();
    data.set_N_N_N(x, y.out_x, y.out_y);
    return data;
}
exports.vec3_N_V2 = vec3_N_V2;
function vec3_V3(x) {
    let data = vec3Data.getData();
    data.set_V3(x);
    return data;
}
exports.vec3_V3 = vec3_V3;
function vec4() {
    let data = vec4Data.getData();
    data.set_Vn(0, 0, 0, 0);
    return data;
}
exports.vec4 = vec4;
function vec4_N(x) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x, x, x, x);
    return data;
}
exports.vec4_N = vec4_N;
function vec4_N_N_N_N(x, y, z, w) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x, y, z, w);
    return data;
}
exports.vec4_N_N_N_N = vec4_N_N_N_N;
function vec4_N_N_V2(x, y, z) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x, y, z.out_x, z.out_y);
    return data;
}
exports.vec4_N_N_V2 = vec4_N_N_V2;
function vec4_N_V3(x, y) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x, y.out_x, y.out_y, y.out_z);
    return data;
}
exports.vec4_N_V3 = vec4_N_V3;
function vec4_V2_N_N(x, y, z) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x.out_x, x.out_y, y, z);
    return data;
}
exports.vec4_V2_N_N = vec4_V2_N_N;
function vec4_V2_V2(x, y) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x.out_x, x.out_y, y.out_x, y.out_x);
    return data;
}
exports.vec4_V2_V2 = vec4_V2_V2;
function vec4_V3_N(x, y) {
    let data = vec4Data.getData();
    data.set_N_N_N_N(x.out_x, x.out_y, x.out_z, y);
    return data;
}
exports.vec4_V3_N = vec4_V3_N;
function vec4_V4(x) {
    let data = vec4Data.getData();
    data.set_V4(x);
    return data;
}
exports.vec4_V4 = vec4_V4;
function mat3() {
    let out = BuiltinData_1.builtinCachData.mat3Data.getData();
    out.m00 = 0;
    out.m01 = 0;
    out.m02 = 0;
    out.m03 = 0;
    out.m04 = 0;
    out.m05 = 0;
    out.m06 = 0;
    out.m07 = 0;
    out.m08 = 0;
    return out;
}
exports.mat3 = mat3;
function mat3_M3(m00) {
    let data = BuiltinData_1.builtinCachData.mat3Data.getData();
    data.set(m00);
    return data;
}
exports.mat3_M3 = mat3_M3;
function mat3_M4(m00) {
    let out = BuiltinData_1.builtinCachData.mat3Data.getData();
    out.m00 = m00.m00;
    out.m01 = m00.m01;
    out.m02 = m00.m02;
    out.m03 = m00.m04;
    out.m04 = m00.m05;
    out.m05 = m00.m06;
    out.m06 = m00.m08;
    out.m07 = m00.m09;
    out.m08 = m00.m10;
    return out;
}
exports.mat3_M4 = mat3_M4;
function mat3_V3_V3_V3(m00, m01, m02) {
    let out = BuiltinData_1.builtinCachData.mat3Data.getData();
    out.m00 = m00.x;
    out.m01 = m00.y;
    out.m02 = m00.z;
    out.m03 = m01.x;
    out.m04 = m01.y;
    out.m05 = m01.z;
    out.m06 = m02.x;
    out.m07 = m02.y;
    out.m08 = m02.z;
    return out;
}
exports.mat3_V3_V3_V3 = mat3_V3_V3_V3;
function mat3_N_N_N_N_N_N_N_N_N(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
    let out = BuiltinData_1.builtinCachData.mat3Data.getData();
    out.m00 = m00.v;
    out.m01 = m01.v;
    out.m02 = m02.v;
    out.m03 = m03.v;
    out.m04 = m04.v;
    out.m05 = m05.v;
    out.m06 = m06.v;
    out.m07 = m07.v;
    out.m08 = m08.v;
    return out;
}
exports.mat3_N_N_N_N_N_N_N_N_N = mat3_N_N_N_N_N_N_N_N_N;
function mat4() {
    let out = BuiltinData_1.builtinCachData.mat4Data.getData();
    out.m00 = 0;
    out.m01 = 0;
    out.m02 = 0;
    out.m03 = 0;
    out.m04 = 0;
    out.m05 = 0;
    out.m06 = 0;
    out.m07 = 0;
    out.m08 = 0;
    out.m09 = 0;
    out.m10 = 0;
    out.m11 = 0;
    out.m12 = 0;
    out.m13 = 0;
    out.m14 = 0;
    out.m15 = 0;
    return out;
}
exports.mat4 = mat4;
function mat4_M3(m00) {
    let data = BuiltinData_1.builtinCachData.mat4Data.getData();
    data.m00 = m00.m00;
    data.m01 = m00.m01;
    data.m02 = m00.m02;
    data.m03 = 0;
    data.m04 = m00.m03;
    data.m05 = m00.m04;
    data.m06 = m00.m05;
    data.m07 = 0;
    data.m08 = m00.m06;
    data.m09 = m00.m07;
    data.m10 = m00.m08;
    data.m11 = 0;
    data.m12 = 0;
    data.m13 = 0;
    data.m14 = 0;
    data.m15 = 0;
    return data;
}
exports.mat4_M3 = mat4_M3;
function mat4_M4(m00) {
    let data = BuiltinData_1.builtinCachData.mat4Data.getData();
    data.set(m00);
    return data;
}
exports.mat4_M4 = mat4_M4;
function mat4_V4_V4_V4_V4(m00, m01, m02, m03) {
    let out = BuiltinData_1.builtinCachData.mat4Data.getData();
    out.m00 = m00.x;
    out.m01 = m00.y;
    out.m02 = m00.z;
    out.m03 = m00.w;
    out.m04 = m01.x;
    out.m05 = m01.y;
    out.m06 = m01.z;
    out.m07 = m01.w;
    out.m08 = m02.x;
    out.m09 = m02.y;
    out.m10 = m02.z;
    out.m11 = m02.w;
    out.m12 = m03.x;
    out.m13 = m03.y;
    out.m14 = m03.z;
    out.m15 = m03.w;
    return out;
}
exports.mat4_V4_V4_V4_V4 = mat4_V4_V4_V4_V4;
function mat4_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15) {
    let out = BuiltinData_1.builtinCachData.mat4Data.getData();
    out.m00 = m00.v;
    out.m01 = m01.v;
    out.m02 = m02.v;
    out.m03 = m03.v;
    out.m04 = m04.v;
    out.m05 = m05.v;
    out.m06 = m06.v;
    out.m07 = m07.v;
    out.m08 = m08.v;
    out.m09 = m09.v;
    out.m10 = m10.v;
    out.m11 = m11.v;
    out.m12 = m12.v;
    out.m13 = m13.v;
    out.m14 = m14.v;
    out.m15 = m15.v;
    return out;
}
exports.mat4_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N = mat4_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N_N;
function texture2D_N_V2(texIndex, uv) {
    return CpuRenderingContext_1.cpuRenderingContext.customSampler2D(texIndex.v, uv);
}
exports.texture2D_N_V2 = texture2D_N_V2;
function textureCube_N_V3(texIndex, uv) {
    return CpuRenderingContext_1.cpuRenderingContext.customSamplerCube(texIndex.v, uv);
}
exports.textureCube_N_V3 = textureCube_N_V3;
function bool() {
    let data = boolData.getData();
    data.v = false;
    return data;
}
exports.bool = bool;
function bool_N(v) {
    let data = boolData.getData();
    data.v = v;
    return data;
}
exports.bool_N = bool_N;


/***/ }),

/***/ "./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts":
/*!************************************************************!*\
  !*** ./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinData_1 = __webpack_require__(/*! ./BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
let vec2Data = BuiltinData_1.builtinCachData.vec2Data;
let vec3Data = BuiltinData_1.builtinCachData.vec3Data;
let vec4Data = BuiltinData_1.builtinCachData.vec4Data;
let mat3Data = BuiltinData_1.builtinCachData.mat3Data;
let mat4Data = BuiltinData_1.builtinCachData.mat4Data;
let boolData = BuiltinData_1.builtinCachData.boolData;
// 经测试 glsl中不会直接拿int和float做操作
function glAdd_N_N(left, right) {
    let data = left.ctor();
    data.v = left.v + right.v;
    return data;
}
exports.glAdd_N_N = glAdd_N_N;
function glAdd_N_V2(left, right) {
    let data = vec2Data.getData();
    let v = left.v;
    data.x = v + right.x;
    data.y = v + right.y;
    return data;
}
exports.glAdd_N_V2 = glAdd_N_V2;
function glAdd_N_V3(left, right) {
    let data = vec3Data.getData();
    let v = left.v;
    data.x = v + right.x;
    data.y = v + right.y;
    data.z = v + right.z;
    return data;
}
exports.glAdd_N_V3 = glAdd_N_V3;
function glAdd_N_V4(left, right) {
    let data = vec4Data.getData();
    let v = left.v;
    data.x = v + right.x;
    data.y = v + right.y;
    data.z = v + right.z;
    data.w = v + right.w;
    return data;
}
exports.glAdd_N_V4 = glAdd_N_V4;
function glAdd_V2_N(left, right) {
    let data = vec2Data.getData();
    let v = right.v;
    data.x = left.x + v;
    data.y = left.y + v;
    return data;
}
exports.glAdd_V2_N = glAdd_V2_N;
function glAdd_V2_V2(left, right) {
    let data = vec2Data.getData();
    data.x = left.x + right.x;
    data.y = left.y + right.y;
    return data;
}
exports.glAdd_V2_V2 = glAdd_V2_V2;
function glAdd_V3_N(left, right) {
    let data = vec3Data.getData();
    let v = right.v;
    data.x = left.x + v;
    data.y = left.y + v;
    data.z = left.z + v;
    return data;
}
exports.glAdd_V3_N = glAdd_V3_N;
function glAdd_V3_V3(left, right) {
    let data = vec3Data.getData();
    data.x = left.x + right.x;
    data.y = left.y + right.y;
    data.z = left.z + right.z;
    return data;
}
exports.glAdd_V3_V3 = glAdd_V3_V3;
function glAdd_V4_N(left, right) {
    let data = vec4Data.getData();
    let v = right.v;
    data.x = left.x + v;
    data.y = left.y + v;
    data.z = left.z + v;
    data.w = left.w + v;
    return data;
}
exports.glAdd_V4_N = glAdd_V4_N;
function glAdd_V4_V4(left, right) {
    let data = vec4Data.getData();
    data.x = left.x + right.x;
    data.y = left.y + right.y;
    data.z = left.z + right.z;
    data.w = left.w + right.w;
    return data;
}
exports.glAdd_V4_V4 = glAdd_V4_V4;
function glAdd_M3_M3(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.add(data, left, right);
    return data;
}
exports.glAdd_M3_M3 = glAdd_M3_M3;
function glAdd_M3_N(left, right) {
    let data = mat3Data.getData();
    let v = right.v;
    data.m00 = left.m00 + v;
    data.m01 = left.m01 + v;
    data.m02 = left.m02 + v;
    data.m03 = left.m03 + v;
    data.m04 = left.m04 + v;
    data.m05 = left.m05 + v;
    data.m06 = left.m06 + v;
    data.m07 = left.m07 + v;
    data.m08 = left.m08 + v;
    return data;
}
exports.glAdd_M3_N = glAdd_M3_N;
function glAdd_M4_N(left, right) {
    let data = mat4Data.getData();
    let v = right.v;
    data.m00 = left.m00 + v;
    data.m01 = left.m01 + v;
    data.m02 = left.m02 + v;
    data.m03 = left.m03 + v;
    data.m04 = left.m04 + v;
    data.m05 = left.m05 + v;
    data.m06 = left.m06 + v;
    data.m07 = left.m07 + v;
    data.m08 = left.m08 + v;
    data.m09 = left.m09 + v;
    data.m10 = left.m10 + v;
    data.m11 = left.m11 + v;
    data.m12 = left.m12 + v;
    data.m13 = left.m13 + v;
    data.m14 = left.m14 + v;
    data.m15 = left.m15 + v;
    return data;
}
exports.glAdd_M4_N = glAdd_M4_N;
function glAdd_N_M4(left, right) {
    let data = mat4Data.getData();
    let v = left.v;
    data.m00 = v + right.m00;
    data.m01 = v + right.m01;
    data.m02 = v + right.m02;
    data.m03 = v + right.m03;
    data.m04 = v + right.m04;
    data.m05 = v + right.m05;
    data.m06 = v + right.m06;
    data.m07 = v + right.m07;
    data.m08 = v + right.m08;
    data.m09 = v + right.m09;
    data.m10 = v + right.m10;
    data.m11 = v + right.m11;
    data.m12 = v + right.m12;
    data.m13 = v + right.m13;
    data.m14 = v + right.m14;
    data.m15 = v + right.m15;
    return data;
}
exports.glAdd_N_M4 = glAdd_N_M4;
function glAdd_N_M3(left, right) {
    let data = mat3Data.getData();
    let v = left.v;
    data.m00 = v + right.m00;
    data.m01 = v + right.m01;
    data.m02 = v + right.m02;
    data.m03 = v + right.m03;
    data.m04 = v + right.m04;
    data.m05 = v + right.m05;
    data.m06 = v + right.m06;
    data.m07 = v + right.m07;
    data.m08 = v + right.m08;
    return data;
}
exports.glAdd_N_M3 = glAdd_N_M3;
function glAdd_M4_M4(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.add(data, left, right);
    return data;
}
exports.glAdd_M4_M4 = glAdd_M4_M4;
function glAddSet_N_N(left, right) {
    left.v = left.v + right.v;
}
exports.glAddSet_N_N = glAddSet_N_N;
function glAddSet_V2_N(left, right) {
    let v = right.v;
    left.x = left.x + v;
    left.y = left.y + v;
}
exports.glAddSet_V2_N = glAddSet_V2_N;
function glAddSet_V2_V2(left, right) {
    left.x = left.x + right.x;
    left.y = left.y + right.y;
}
exports.glAddSet_V2_V2 = glAddSet_V2_V2;
function glAddSet_V3_N(left, right) {
    let v = right.v;
    left.x = left.x + v;
    left.y = left.y + v;
    left.z = left.z + v;
}
exports.glAddSet_V3_N = glAddSet_V3_N;
function glAddSet_V3_V3(left, right) {
    left.x = left.x + right.x;
    left.y = left.y + right.y;
    left.z = left.z + right.z;
}
exports.glAddSet_V3_V3 = glAddSet_V3_V3;
function glAddSet_V4_N(left, right) {
    let v = right.v;
    left.x = left.x + v;
    left.y = left.y + v;
    left.z = left.z + v;
    left.w = left.w + v;
}
exports.glAddSet_V4_N = glAddSet_V4_N;
function glAddSet_M3_N(left, right) {
    let v = right.v;
    left.m00 += v;
    left.m01 += v;
    left.m02 += v;
    left.m03 += v;
    left.m04 += v;
    left.m05 += v;
    left.m06 += v;
    left.m07 += v;
    left.m08 += v;
}
exports.glAddSet_M3_N = glAddSet_M3_N;
function glAddSet_M4_N(left, right) {
    let v = right.v;
    left.m00 += v;
    left.m01 += v;
    left.m02 += v;
    left.m03 += v;
    left.m04 += v;
    left.m05 += v;
    left.m06 += v;
    left.m07 += v;
    left.m08 += v;
    left.m09 += v;
    left.m10 += v;
    left.m11 += v;
    left.m12 += v;
    left.m13 += v;
    left.m14 += v;
    left.m15 += v;
}
exports.glAddSet_M4_N = glAddSet_M4_N;
function glAddSet_M3_M3(left, right) {
    BuiltinData_1.Mat3Data.add(left, left, right);
}
exports.glAddSet_M3_M3 = glAddSet_M3_M3;
function glAddSet_M4_M4(left, right) {
    BuiltinData_1.Mat4Data.add(left, left, right);
}
exports.glAddSet_M4_M4 = glAddSet_M4_M4;
function glAddSet_V4_V4(left, right) {
    left.x = left.x + right.x;
    left.y = left.y + right.y;
    left.z = left.z + right.z;
    left.w = left.w + right.w;
}
exports.glAddSet_V4_V4 = glAddSet_V4_V4;
function glSub_N_N(left, right) {
    let data = left.ctor();
    data.v = left.v - right.v;
    return data;
}
exports.glSub_N_N = glSub_N_N;
function glSub_N_V2(left, right) {
    let data = vec2Data.getData();
    let v = left.v;
    data.x = v - right.x;
    data.y = v - right.y;
    return data;
}
exports.glSub_N_V2 = glSub_N_V2;
function glSub_N_V3(left, right) {
    let data = vec3Data.getData();
    let v = left.v;
    data.x = v - right.x;
    data.y = v - right.y;
    data.z = v - right.z;
    return data;
}
exports.glSub_N_V3 = glSub_N_V3;
function glSub_N_V4(left, right) {
    let data = vec4Data.getData();
    let v = left.v;
    data.x = v - right.x;
    data.y = v - right.y;
    data.z = v - right.z;
    data.w = v - right.w;
    return data;
}
exports.glSub_N_V4 = glSub_N_V4;
function glSub_V2_N(left, right) {
    let data = vec2Data.getData();
    let v = right.v;
    data.x = left.x - v;
    data.y = left.y - v;
    return data;
}
exports.glSub_V2_N = glSub_V2_N;
function glSub_V2_V2(left, right) {
    let data = vec2Data.getData();
    data.x = left.x - right.x;
    data.y = left.y - right.y;
    return data;
}
exports.glSub_V2_V2 = glSub_V2_V2;
function glSub_V3_N(left, right) {
    let data = vec3Data.getData();
    let v = right.v;
    data.x = left.x - v;
    data.y = left.y - v;
    data.z = left.z - v;
    return data;
}
exports.glSub_V3_N = glSub_V3_N;
function glSub_V3_V3(left, right) {
    let data = vec3Data.getData();
    data.x = left.x - right.x;
    data.y = left.y - right.y;
    data.z = left.z - right.z;
    return data;
}
exports.glSub_V3_V3 = glSub_V3_V3;
function glSub_V4_N(left, right) {
    let data = vec4Data.getData();
    let v = right.v;
    data.x = left.x - v;
    data.y = left.y - v;
    data.z = left.z - v;
    data.w = left.w - v;
    return data;
}
exports.glSub_V4_N = glSub_V4_N;
function glSub_V4_V4(left, right) {
    let data = vec4Data.getData();
    data.x = left.x - right.x;
    data.y = left.y - right.y;
    data.z = left.z - right.z;
    data.w = left.w - right.w;
    return data;
}
exports.glSub_V4_V4 = glSub_V4_V4;
function glSub_M3_M3(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.subtract(data, left, right);
    return data;
}
exports.glSub_M3_M3 = glSub_M3_M3;
function glSub_M3_N(left, right) {
    let data = mat3Data.getData();
    let v = right.v;
    data.m00 = left.m00 - v;
    data.m01 = left.m01 - v;
    data.m02 = left.m02 - v;
    data.m03 = left.m03 - v;
    data.m04 = left.m04 - v;
    data.m05 = left.m05 - v;
    data.m06 = left.m06 - v;
    data.m07 = left.m07 - v;
    data.m08 = left.m08 - v;
    return data;
}
exports.glSub_M3_N = glSub_M3_N;
function glSub_N_M3(left, right) {
    let data = mat3Data.getData();
    let v = left.v;
    data.m00 = v - right.m00;
    data.m01 = v - right.m01;
    data.m02 = v - right.m02;
    data.m03 = v - right.m03;
    data.m04 = v - right.m04;
    data.m05 = v - right.m05;
    data.m06 = v - right.m06;
    data.m07 = v - right.m07;
    data.m08 = v - right.m08;
    return data;
}
exports.glSub_N_M3 = glSub_N_M3;
function glSub_M4_M4(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.subtract(data, left, right);
    return data;
}
exports.glSub_M4_M4 = glSub_M4_M4;
function glSub_M4_N(left, right) {
    let data = mat4Data.getData();
    let v = right.v;
    data.m00 = left.m00 - v;
    data.m01 = left.m01 - v;
    data.m02 = left.m02 - v;
    data.m03 = left.m03 - v;
    data.m04 = left.m04 - v;
    data.m05 = left.m05 - v;
    data.m06 = left.m06 - v;
    data.m07 = left.m07 - v;
    data.m08 = left.m08 - v;
    data.m09 = left.m09 - v;
    data.m10 = left.m10 - v;
    data.m11 = left.m11 - v;
    data.m12 = left.m12 - v;
    data.m13 = left.m13 - v;
    data.m14 = left.m14 - v;
    data.m15 = left.m15 - v;
    return data;
}
exports.glSub_M4_N = glSub_M4_N;
function glSub_N_M4(left, right) {
    let data = mat4Data.getData();
    let v = left.v;
    data.m00 = v - right.m00;
    data.m01 = v - right.m01;
    data.m02 = v - right.m02;
    data.m03 = v - right.m03;
    data.m04 = v - right.m04;
    data.m05 = v - right.m05;
    data.m06 = v - right.m06;
    data.m07 = v - right.m07;
    data.m08 = v - right.m08;
    data.m09 = v - right.m09;
    data.m10 = v - right.m10;
    data.m11 = v - right.m11;
    data.m12 = v - right.m12;
    data.m13 = v - right.m13;
    data.m14 = v - right.m14;
    data.m15 = v - right.m15;
    return data;
}
exports.glSub_N_M4 = glSub_N_M4;
function glSubSet_N_N(left, right) {
    left.v = left.v - right.v;
}
exports.glSubSet_N_N = glSubSet_N_N;
function glSubSet_V2_N(left, right) {
    let v = right.v;
    left.x = left.x - v;
    left.y = left.y - v;
}
exports.glSubSet_V2_N = glSubSet_V2_N;
function glSubSet_V2_V2(left, right) {
    left.x = left.x - right.x;
    left.y = left.y - right.y;
}
exports.glSubSet_V2_V2 = glSubSet_V2_V2;
function glSubSet_V3_N(left, right) {
    let v = right.v;
    left.x = left.x - v;
    left.y = left.y - v;
    left.z = left.z - v;
}
exports.glSubSet_V3_N = glSubSet_V3_N;
function glSubSet_V3_V3(left, right) {
    left.x = left.x - right.x;
    left.y = left.y - right.y;
    left.z = left.z - right.z;
}
exports.glSubSet_V3_V3 = glSubSet_V3_V3;
function glSubSet_V4_N(left, right) {
    let v = right.v;
    left.x = left.x - v;
    left.y = left.y - v;
    left.z = left.z - v;
    left.w = left.w - v;
}
exports.glSubSet_V4_N = glSubSet_V4_N;
function glSubSet_V4_V4(left, right) {
    left.x = left.x - right.x;
    left.y = left.y - right.y;
    left.z = left.z - right.z;
    left.w = left.w - right.w;
}
exports.glSubSet_V4_V4 = glSubSet_V4_V4;
function glSubSet_M3_N(left, right) {
    let v = right.v;
    left.m00 -= v;
    left.m01 -= v;
    left.m02 -= v;
    left.m03 -= v;
    left.m04 -= v;
    left.m05 -= v;
    left.m06 -= v;
    left.m07 -= v;
    left.m08 -= v;
}
exports.glSubSet_M3_N = glSubSet_M3_N;
function glSubSet_M4_N(left, right) {
    let v = right.v;
    left.m00 -= v;
    left.m01 -= v;
    left.m02 -= v;
    left.m03 -= v;
    left.m04 -= v;
    left.m05 -= v;
    left.m06 -= v;
    left.m07 -= v;
    left.m08 -= v;
    left.m09 -= v;
    left.m10 -= v;
    left.m11 -= v;
    left.m12 -= v;
    left.m13 -= v;
    left.m14 -= v;
    left.m15 -= v;
}
exports.glSubSet_M4_N = glSubSet_M4_N;
function glSubSet_M3_M3(left, right) {
    BuiltinData_1.Mat3Data.subtract(left, left, right);
}
exports.glSubSet_M3_M3 = glSubSet_M3_M3;
function glSubSet_M4_M4(left, right) {
    BuiltinData_1.Mat4Data.subtract(left, left, right);
}
exports.glSubSet_M4_M4 = glSubSet_M4_M4;
function glMul_N_N(left, right) {
    let data = left.ctor();
    data.v = left.v * right.v;
    return data;
}
exports.glMul_N_N = glMul_N_N;
function glMul_N_V2(left, right) {
    let data = vec2Data.getData();
    let v = left.v;
    data.x = v * right.x;
    data.y = v * right.y;
    return data;
}
exports.glMul_N_V2 = glMul_N_V2;
function glMul_N_V3(left, right) {
    let data = vec3Data.getData();
    let v = left.v;
    data.x = v * right.x;
    data.y = v * right.y;
    data.z = v * right.z;
    return data;
}
exports.glMul_N_V3 = glMul_N_V3;
function glMul_N_V4(left, right) {
    let data = vec4Data.getData();
    let v = left.v;
    data.x = v * right.x;
    data.y = v * right.y;
    data.z = v * right.z;
    data.w = v * right.w;
    return data;
}
exports.glMul_N_V4 = glMul_N_V4;
function glMul_V2_N(left, right) {
    let data = vec2Data.getData();
    let v = right.v;
    data.x = left.x * v;
    data.y = left.y * v;
    return data;
}
exports.glMul_V2_N = glMul_V2_N;
function glMul_V2_V2(left, right) {
    let data = vec2Data.getData();
    data.x = left.x * right.x;
    data.y = left.y * right.y;
    return data;
}
exports.glMul_V2_V2 = glMul_V2_V2;
function glMul_V3_N(left, right) {
    let data = vec3Data.getData();
    let v = right.v;
    data.x = left.x * v;
    data.y = left.y * v;
    data.z = left.z * v;
    return data;
}
exports.glMul_V3_N = glMul_V3_N;
function glMul_V3_V3(left, right) {
    let data = vec3Data.getData();
    data.x = left.x * right.x;
    data.y = left.y * right.y;
    data.z = left.z * right.z;
    return data;
}
exports.glMul_V3_V3 = glMul_V3_V3;
function glMul_V3_M3(left, right) {
    let data = vec3Data.getData();
    BuiltinData_1.Vec3Data.transformMat3(data, left, right);
    return data;
}
exports.glMul_V3_M3 = glMul_V3_M3;
function glMul_V4_N(left, right) {
    let data = vec4Data.getData();
    let v = right.v;
    data.x = left.x * v;
    data.y = left.y * v;
    data.z = left.z * v;
    data.w = left.w * v;
    return data;
}
exports.glMul_V4_N = glMul_V4_N;
function glMul_V4_V4(left, right) {
    let data = vec4Data.getData();
    data.x = left.x * right.x;
    data.y = left.y * right.y;
    data.z = left.z * right.z;
    data.w = left.w * right.w;
    return data;
}
exports.glMul_V4_V4 = glMul_V4_V4;
function glMul_M3_M3(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.multiply(data, left, right);
    return data;
}
exports.glMul_M3_M3 = glMul_M3_M3;
function glMul_M3_N(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.multiplyScalar(data, left, right.v);
    return data;
}
exports.glMul_M3_N = glMul_M3_N;
function glMul_N_M3(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.multiplyScalar(data, right, left.v);
    return data;
}
exports.glMul_N_M3 = glMul_N_M3;
function glMul_M4_M4(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.multiply(data, left, right);
    return data;
}
exports.glMul_M4_M4 = glMul_M4_M4;
function glMul_M4_N(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.multiplyScalar(data, left, right.v);
    return data;
}
exports.glMul_M4_N = glMul_M4_N;
function glMul_N_M4(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.multiplyScalar(data, right, left.v);
    return data;
}
exports.glMul_N_M4 = glMul_N_M4;
function glMulSet_N_N(left, right) {
    left.v = left.v * right.v;
}
exports.glMulSet_N_N = glMulSet_N_N;
function glMulSet_V2_N(left, right) {
    let v = right.v;
    left.x = left.x * v;
    left.y = left.y * v;
}
exports.glMulSet_V2_N = glMulSet_V2_N;
function glMulSet_V2_V2(left, right) {
    left.x = left.x * right.x;
    left.y = left.y * right.y;
}
exports.glMulSet_V2_V2 = glMulSet_V2_V2;
function glMulSet_V3_N(left, right) {
    let v = right.v;
    left.x = left.x * v;
    left.y = left.y * v;
    left.z = left.z * v;
}
exports.glMulSet_V3_N = glMulSet_V3_N;
function glMulSet_V3_V3(left, right) {
    left.x = left.x * right.x;
    left.y = left.y * right.y;
    left.z = left.z * right.z;
}
exports.glMulSet_V3_V3 = glMulSet_V3_V3;
function glMulSet_V4_N(left, right) {
    let v = right.v;
    left.x = left.x * v;
    left.y = left.y * v;
    left.z = left.z * v;
    left.w = left.w * v;
}
exports.glMulSet_V4_N = glMulSet_V4_N;
function glMulSet_V4_V4(left, right) {
    left.x = left.x * right.x;
    left.y = left.y * right.y;
    left.z = left.z * right.z;
    left.w = left.w * right.w;
}
exports.glMulSet_V4_V4 = glMulSet_V4_V4;
function glMul_M4_V4(left, right) {
    let data = vec4Data.getData();
    BuiltinData_1.Vec4Data.transformMat4(data, right, left);
    return data;
}
exports.glMul_M4_V4 = glMul_M4_V4;
function glMul_V4_M4(left, right) {
    let data = vec4Data.getData();
    BuiltinData_1.Vec4Data.transformMat4(data, left, right);
    return data;
}
exports.glMul_V4_M4 = glMul_V4_M4;
function glMulSet_M3_N(left, right) {
    BuiltinData_1.Mat3Data.multiplyScalar(left, left, right.v);
}
exports.glMulSet_M3_N = glMulSet_M3_N;
function glMulSet_M4_N(left, right) {
    BuiltinData_1.Mat4Data.multiplyScalar(left, left, right.v);
}
exports.glMulSet_M4_N = glMulSet_M4_N;
function glMulSet_M3_M3(left, right) {
    BuiltinData_1.Mat3Data.multiply(left, left, right);
}
exports.glMulSet_M3_M3 = glMulSet_M3_M3;
function glMulSet_M4_M4(left, right) {
    BuiltinData_1.Mat4Data.multiply(left, left, right);
}
exports.glMulSet_M4_M4 = glMulSet_M4_M4;
function glDiv_N_N(left, right) {
    let data = left.ctor();
    data.v = left.v / right.v;
    return data;
}
exports.glDiv_N_N = glDiv_N_N;
function glDiv_N_V2(left, right) {
    let data = vec2Data.getData();
    let v = left.v;
    data.x = v / right.x;
    data.y = v / right.y;
    return data;
}
exports.glDiv_N_V2 = glDiv_N_V2;
function glDiv_N_V3(left, right) {
    let data = vec3Data.getData();
    let v = left.v;
    data.x = v / right.x;
    data.y = v / right.y;
    data.z = v / right.z;
    return data;
}
exports.glDiv_N_V3 = glDiv_N_V3;
function glDiv_N_V4(left, right) {
    let data = vec4Data.getData();
    let v = left.v;
    data.x = v / right.x;
    data.y = v / right.y;
    data.z = v / right.z;
    data.w = v / right.w;
    return data;
}
exports.glDiv_N_V4 = glDiv_N_V4;
function glDiv_V2_N(left, right) {
    let data = vec2Data.getData();
    let v = right.v;
    data.x = left.x / v;
    data.y = left.y / v;
    return data;
}
exports.glDiv_V2_N = glDiv_V2_N;
function glDiv_V2_V2(left, right) {
    let data = vec2Data.getData();
    data.x = left.x / right.x;
    data.y = left.y / right.y;
    return data;
}
exports.glDiv_V2_V2 = glDiv_V2_V2;
function glDiv_V3_N(left, right) {
    let data = vec3Data.getData();
    let v = right.v;
    data.x = left.x / v;
    data.y = left.y / v;
    data.z = left.z / v;
    return data;
}
exports.glDiv_V3_N = glDiv_V3_N;
function glDiv_V3_V3(left, right) {
    let data = vec3Data.getData();
    data.x = left.x / right.x;
    data.y = left.y / right.y;
    data.z = left.z / right.z;
    return data;
}
exports.glDiv_V3_V3 = glDiv_V3_V3;
function glDiv_V4_N(left, right) {
    let data = vec4Data.getData();
    let v = right.v;
    data.x = left.x / v;
    data.y = left.y / v;
    data.z = left.z / v;
    data.w = left.w / v;
    return data;
}
exports.glDiv_V4_N = glDiv_V4_N;
function glDiv_V4_V4(left, right) {
    let data = vec4Data.getData();
    data.x = left.x / right.x;
    data.y = left.y / right.y;
    data.z = left.z / right.z;
    data.w = left.w / right.w;
    return data;
}
exports.glDiv_V4_V4 = glDiv_V4_V4;
function glDiv_M3_M3(left, right) {
    let data = mat3Data.getData();
    data.m00 = left.m00 / right.m00;
    data.m01 = left.m01 / right.m01;
    data.m02 = left.m02 / right.m02;
    data.m03 = left.m03 / right.m03;
    data.m04 = left.m04 / right.m04;
    data.m05 = left.m05 / right.m05;
    data.m06 = left.m06 / right.m06;
    data.m07 = left.m07 / right.m07;
    data.m08 = left.m08 / right.m08;
    return data;
}
exports.glDiv_M3_M3 = glDiv_M3_M3;
function glDiv_M3_N(left, right) {
    let data = mat3Data.getData();
    BuiltinData_1.Mat3Data.multiplyScalar(data, left, 1 / right.v);
    return data;
}
exports.glDiv_M3_N = glDiv_M3_N;
function glDiv_N_M3(left, right) {
    let data = mat3Data.getData();
    let v = left.v;
    data.m00 = v / right.m00;
    data.m01 = v / right.m01;
    data.m02 = v / right.m02;
    data.m03 = v / right.m03;
    data.m04 = v / right.m04;
    data.m05 = v / right.m05;
    data.m06 = v / right.m06;
    data.m07 = v / right.m07;
    data.m08 = v / right.m08;
    // 除法左右关系是有所谓的
    return data;
}
exports.glDiv_N_M3 = glDiv_N_M3;
function glDiv_M4_M4(left, right) {
    let data = mat4Data.getData();
    data.m00 = left.m00 / right.m00;
    data.m01 = left.m01 / right.m01;
    data.m02 = left.m02 / right.m02;
    data.m03 = left.m03 / right.m03;
    data.m04 = left.m04 / right.m04;
    data.m05 = left.m05 / right.m05;
    data.m06 = left.m06 / right.m06;
    data.m07 = left.m07 / right.m07;
    data.m08 = left.m07 / right.m08;
    data.m09 = left.m09 / right.m09;
    data.m10 = left.m10 / right.m10;
    data.m11 = left.m11 / right.m11;
    data.m12 = left.m12 / right.m12;
    data.m13 = left.m13 / right.m13;
    data.m14 = left.m14 / right.m14;
    data.m15 = left.m15 / right.m15;
    return data;
}
exports.glDiv_M4_M4 = glDiv_M4_M4;
function glDiv_M4_N(left, right) {
    let data = mat4Data.getData();
    BuiltinData_1.Mat4Data.multiplyScalar(data, left, 1 / right.v);
    return data;
}
exports.glDiv_M4_N = glDiv_M4_N;
function glDiv_N_M4(left, right) {
    let data = mat4Data.getData();
    let v = left.v;
    data.m00 = v / right.m00;
    data.m01 = v / right.m01;
    data.m02 = v / right.m02;
    data.m03 = v / right.m03;
    data.m04 = v / right.m04;
    data.m05 = v / right.m05;
    data.m06 = v / right.m06;
    data.m07 = v / right.m07;
    data.m08 = v / right.m08;
    data.m09 = v / right.m09;
    data.m10 = v / right.m10;
    data.m11 = v / right.m11;
    data.m12 = v / right.m12;
    data.m13 = v / right.m13;
    data.m14 = v / right.m14;
    data.m15 = v / right.m15;
    // 除法左右关系是有所谓的
    return data;
}
exports.glDiv_N_M4 = glDiv_N_M4;
function glDivSet_N_N(left, right) {
    left.v = left.v / right.v;
}
exports.glDivSet_N_N = glDivSet_N_N;
function glDivSet_V2_N(left, right) {
    let v = right.v;
    left.x = left.x / v;
    left.y = left.y / v;
}
exports.glDivSet_V2_N = glDivSet_V2_N;
function glDivSet_V2_V2(left, right) {
    left.x = left.x / right.x;
    left.y = left.y / right.y;
}
exports.glDivSet_V2_V2 = glDivSet_V2_V2;
function glDivSet_V3_N(left, right) {
    let v = right.v;
    left.x = left.x / v;
    left.y = left.y / v;
    left.z = left.z / v;
}
exports.glDivSet_V3_N = glDivSet_V3_N;
function glDivSet_V3_V3(left, right) {
    left.x = left.x / right.x;
    left.y = left.y / right.y;
    left.z = left.z / right.z;
}
exports.glDivSet_V3_V3 = glDivSet_V3_V3;
function glDivSet_V4_N(left, right) {
    let v = right.v;
    left.x = left.x / v;
    left.y = left.y / v;
    left.z = left.z / v;
    left.w = left.w / v;
}
exports.glDivSet_V4_N = glDivSet_V4_N;
function glDivSet_M3_M3(left, right) {
    left.m00 = left.m00 / right.m00;
    left.m01 = left.m01 / right.m01;
    left.m02 = left.m02 / right.m02;
    left.m03 = left.m03 / right.m03;
    left.m04 = left.m04 / right.m04;
    left.m05 = left.m05 / right.m05;
    left.m06 = left.m06 / right.m06;
    left.m07 = left.m07 / right.m07;
    left.m08 = left.m08 / right.m08;
}
exports.glDivSet_M3_M3 = glDivSet_M3_M3;
function glDivSet_M3_N(left, right) {
    BuiltinData_1.Mat3Data.multiplyScalar(left, left, 1 / right.v);
}
exports.glDivSet_M3_N = glDivSet_M3_N;
function glDivSet_M4_M4(left, right) {
    left.m00 = left.m00 / right.m00;
    left.m01 = left.m01 / right.m01;
    left.m02 = left.m02 / right.m02;
    left.m03 = left.m03 / right.m03;
    left.m04 = left.m04 / right.m04;
    left.m05 = left.m05 / right.m05;
    left.m06 = left.m06 / right.m06;
    left.m07 = left.m07 / right.m07;
    left.m08 = left.m07 / right.m08;
    left.m09 = left.m09 / right.m09;
    left.m10 = left.m10 / right.m10;
    left.m11 = left.m11 / right.m11;
    left.m12 = left.m12 / right.m12;
    left.m13 = left.m13 / right.m13;
    left.m14 = left.m14 / right.m14;
    left.m15 = left.m15 / right.m15;
}
exports.glDivSet_M4_M4 = glDivSet_M4_M4;
function glDivSet_M4_N(left, right) {
    BuiltinData_1.Mat4Data.multiplyScalar(left, left, 1 / right.v);
}
exports.glDivSet_M4_N = glDivSet_M4_N;
function glNegative_N(v) {
    let data = v.ctor();
    data.v = -v.v;
    return data;
}
exports.glNegative_N = glNegative_N;
function glNegative_V2(v) {
    let data = vec2Data.getData();
    data.x = -v.x;
    data.y = -v.y;
    return data;
}
exports.glNegative_V2 = glNegative_V2;
function glNegative_V3(v) {
    let data = vec3Data.getData();
    data.x = -v.x;
    data.y = -v.y;
    data.z = -v.z;
    return data;
}
exports.glNegative_V3 = glNegative_V3;
function glNegative_V4(v) {
    let data = vec4Data.getData();
    data.x = -v.x;
    data.y = -v.y;
    data.z = -v.z;
    data.w = -v.w;
    return data;
}
exports.glNegative_V4 = glNegative_V4;
function glSet_A_A(left, right) {
    for (let index = 0; index < right.length; index++) {
        left[index].set(right[index]);
    }
    return left;
}
exports.glSet_A_A = glSet_A_A;
function glSet_AA_AA(left, right) {
    for (let index = 0; index < right.length; index++) {
        glSet_A_A(left[index], right[index]);
    }
    return left;
}
exports.glSet_AA_AA = glSet_AA_AA;
function glSet_N_N(left, right) {
    left.v = right.v;
    return left;
}
exports.glSet_N_N = glSet_N_N;
function glSet_B_B(left, right) {
    left.v = right.v;
    return left;
}
exports.glSet_B_B = glSet_B_B;
function glSet_B_b(left, right) {
    left.v = right;
    return left;
}
exports.glSet_B_b = glSet_B_b;
function glSet_V2_V2(left, right) {
    left.x = right.x;
    left.y = right.y;
    return left;
}
exports.glSet_V2_V2 = glSet_V2_V2;
function glSet_V3_V3(left, right) {
    left.x = right.x;
    left.y = right.y;
    left.z = right.z;
    return left;
}
exports.glSet_V3_V3 = glSet_V3_V3;
function glSet_V4_V4(left, right) {
    left.x = right.x;
    left.y = right.y;
    left.z = right.z;
    left.w = right.w;
    return left;
}
exports.glSet_V4_V4 = glSet_V4_V4;
function glSet_M3_M3(left, right) {
    left.set(right);
    return left;
}
exports.glSet_M3_M3 = glSet_M3_M3;
function glSet_M4_M4(left, right) {
    left.set(right);
    return left;
}
exports.glSet_M4_M4 = glSet_M4_M4;
function glSet_Struct_Struct(left, right) {
    for (const key in right) {
        if (Object.prototype.hasOwnProperty.call(right, key)) {
            const element = right[key];
            if (element instanceof BuiltinData_1.ValueType) {
                ;
                left[key].set(right[key]);
            }
            else if (element instanceof Object) {
                glSet_Struct_Struct(left[key], right[key]);
            }
            else {
                left[key] = right[key];
            }
        }
    }
    return left;
}
exports.glSet_Struct_Struct = glSet_Struct_Struct;
function glIsNotEqual_N_N(left, right) {
    return left.v !== right.v;
}
exports.glIsNotEqual_N_N = glIsNotEqual_N_N;
function glIsEqual_N_N(left, right) {
    return left.v === right.v;
}
exports.glIsEqual_N_N = glIsEqual_N_N;
function glIsLessEqual_N_N(left, right) {
    return left.v <= right.v;
}
exports.glIsLessEqual_N_N = glIsLessEqual_N_N;
function glIsLess_N_N(left, right) {
    return left.v < right.v;
}
exports.glIsLess_N_N = glIsLess_N_N;
function glIsMore_N_N(left, right) {
    return left.v > right.v;
}
exports.glIsMore_N_N = glIsMore_N_N;
function glIsMoreEqual_N_N(left, right) {
    return left.v >= right.v;
}
exports.glIsMoreEqual_N_N = glIsMoreEqual_N_N;
function glFrontAddSelf_N(n) {
    ++n.v;
    return n;
}
exports.glFrontAddSelf_N = glFrontAddSelf_N;
function glAfterAddSelf_N(n) {
    n.v++;
    return n;
}
exports.glAfterAddSelf_N = glAfterAddSelf_N;
function glFrontSubSelf_N(n) {
    --n.v;
    return n;
}
exports.glFrontSubSelf_N = glFrontSubSelf_N;
function glAfterSubSelf_N(n) {
    n.v--;
    return n;
}
exports.glAfterSubSelf_N = glAfterSubSelf_N;
function glFrontAddSelf_V2(n) {
    ++n.x;
    ++n.y;
    return n;
}
exports.glFrontAddSelf_V2 = glFrontAddSelf_V2;
function glAfterAddSelf_V2(n) {
    n.x++;
    n.y++;
    return n;
}
exports.glAfterAddSelf_V2 = glAfterAddSelf_V2;
function glFrontSubSelf_V2(n) {
    --n.x;
    --n.y;
    return n;
}
exports.glFrontSubSelf_V2 = glFrontSubSelf_V2;
function glAfterSubSelf_V2(n) {
    n.x--;
    n.y--;
    return n;
}
exports.glAfterSubSelf_V2 = glAfterSubSelf_V2;
function glFrontAddSelf_V3(n) {
    ++n.x;
    ++n.y;
    ++n.z;
    return n;
}
exports.glFrontAddSelf_V3 = glFrontAddSelf_V3;
function glAfterAddSelf_V3(n) {
    n.x++;
    n.y++;
    n.z++;
    return n;
}
exports.glAfterAddSelf_V3 = glAfterAddSelf_V3;
function glFrontSubSelf_V3(n) {
    --n.x;
    --n.y;
    --n.z;
    return n;
}
exports.glFrontSubSelf_V3 = glFrontSubSelf_V3;
function glAfterSubSelf_V3(n) {
    n.x--;
    n.y--;
    n.z--;
    return n;
}
exports.glAfterSubSelf_V3 = glAfterSubSelf_V3;
function glFrontAddSelf_V4(n) {
    ++n.x;
    ++n.y;
    ++n.z;
    ++n.w;
    return n;
}
exports.glFrontAddSelf_V4 = glFrontAddSelf_V4;
function glAfterAddSelf_V4(n) {
    n.x++;
    n.y++;
    n.z++;
    n.w++;
    return n;
}
exports.glAfterAddSelf_V4 = glAfterAddSelf_V4;
function glFrontSubSelf_V4(n) {
    --n.x;
    --n.y;
    --n.z;
    --n.w;
    return n;
}
exports.glFrontSubSelf_V4 = glFrontSubSelf_V4;
function glAfterSubSelf_V4(n) {
    n.x--;
    n.y--;
    n.z--;
    n.w--;
    return n;
}
exports.glAfterSubSelf_V4 = glAfterSubSelf_V4;
function glFrontAddSelf_M3(n) {
    ++n.m01;
    ++n.m02;
    ++n.m03;
    ++n.m04;
    ++n.m05;
    ++n.m06;
    ++n.m07;
    ++n.m08;
    return n;
}
exports.glFrontAddSelf_M3 = glFrontAddSelf_M3;
function glAfterAddSelf_M3(n) {
    n.m01++;
    n.m02++;
    n.m03++;
    n.m04++;
    n.m05++;
    n.m06++;
    n.m07++;
    n.m08++;
    return n;
}
exports.glAfterAddSelf_M3 = glAfterAddSelf_M3;
function glFrontSubSelf_M3(n) {
    --n.m01;
    --n.m02;
    --n.m03;
    --n.m04;
    --n.m05;
    --n.m06;
    --n.m07;
    --n.m08;
    return n;
}
exports.glFrontSubSelf_M3 = glFrontSubSelf_M3;
function glAfterSubSelf_M3(n) {
    n.m01--;
    n.m02--;
    n.m03--;
    n.m04--;
    n.m05--;
    n.m06--;
    n.m07--;
    n.m08--;
    return n;
}
exports.glAfterSubSelf_M3 = glAfterSubSelf_M3;
function glFrontAddSelf_M4(n) {
    ++n.m01;
    ++n.m02;
    ++n.m03;
    ++n.m04;
    ++n.m05;
    ++n.m06;
    ++n.m07;
    ++n.m08;
    ++n.m09;
    ++n.m10;
    ++n.m11;
    ++n.m12;
    ++n.m13;
    ++n.m14;
    ++n.m15;
    return n;
}
exports.glFrontAddSelf_M4 = glFrontAddSelf_M4;
function glAfterAddSelf_M4(n) {
    n.m01++;
    n.m02++;
    n.m03++;
    n.m04++;
    n.m05++;
    n.m06++;
    n.m07++;
    n.m08++;
    n.m09++;
    n.m10++;
    n.m11++;
    n.m12++;
    n.m13++;
    n.m14++;
    n.m15++;
    return n;
}
exports.glAfterAddSelf_M4 = glAfterAddSelf_M4;
function glFrontSubSelf_M4(n) {
    --n.m01;
    --n.m02;
    --n.m03;
    --n.m04;
    --n.m05;
    --n.m06;
    --n.m07;
    --n.m08;
    --n.m09;
    --n.m10;
    --n.m11;
    --n.m12;
    --n.m13;
    --n.m14;
    --n.m15;
    return n;
}
exports.glFrontSubSelf_M4 = glFrontSubSelf_M4;
function glAfterSubSelf_M4(n) {
    n.m01--;
    n.m02--;
    n.m03--;
    n.m04--;
    n.m05--;
    n.m06--;
    n.m07--;
    n.m08--;
    n.m09--;
    n.m10--;
    n.m11--;
    n.m12--;
    n.m13--;
    n.m14--;
    n.m15--;
    return n;
}
exports.glAfterSubSelf_M4 = glAfterSubSelf_M4;
let numWithXYZW = ["x", "y", "z", "w"];
let numWithOutXYZW = ["out_x", "out_y", "out_z", "out_w"];
function getValueKeyByIndex(n) {
    return numWithXYZW[n.v];
}
exports.getValueKeyByIndex = getValueKeyByIndex;
function getOutValueKeyByIndex(n) {
    return numWithOutXYZW[n.v];
}
exports.getOutValueKeyByIndex = getOutValueKeyByIndex;


/***/ }),

/***/ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts":
/*!*******************************************************!*\
  !*** ./ts/src/webglImpl/shader/builtin/BuiltinVar.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinData_1 = __webpack_require__(/*! ./BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
/**自己定义非gl变量 */
exports.custom_isDiscard = new BuiltinData_1.BoolData(false);
/*输出的颜色 */
exports.gl_FragColor = new BuiltinData_1.Vec4Data();
/*输出的顶点位置 */
exports.gl_Position = new BuiltinData_1.Vec4Data();
// todo
// 以下的内部变量并没有实现
exports.gl_FragData = [new BuiltinData_1.Vec4Data(), new BuiltinData_1.Vec4Data(), new BuiltinData_1.Vec4Data(), new BuiltinData_1.Vec4Data()];
exports.gl_FragCoord = new BuiltinData_1.Vec4Data();
exports.gl_FragDepth = new BuiltinData_1.FloatData();
exports.gl_FrontFacing = new BuiltinData_1.BoolData();


/***/ }),

/***/ "./ts/src/webglImpl/shader/builtin/Rect.ts":
/*!*************************************************!*\
  !*** ./ts/src/webglImpl/shader/builtin/Rect.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinData_1 = __webpack_require__(/*! ./BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
/**
 * @en
 * A 2D rectangle defined by x, y position and width, height.
 * @zh
 * 轴对齐矩形。
 * 矩形内的所有点都大于等于矩形的最小点 (xMin, yMin) 并且小于等于矩形的最大点 (xMax, yMax)。
 * 矩形的宽度定义为 xMax - xMin；高度定义为 yMax - yMin。
 */
class Rect extends BuiltinData_1.ValueType {
    /**
     * @en Creates a rectangle from two coordinate values.
     * @zh 由任意两个点创建一个矩形，目标矩形即是这两个点各向 x、y 轴作线所得到的矩形。
     * @param v1 Specified point 1.
     * @param v2 Specified point 2.
     * @returns Target rectangle.
     */
    static fromMinMax(out, v1, v2) {
        const minX = Math.min(v1.x, v2.x);
        const minY = Math.min(v1.y, v2.y);
        const maxX = Math.max(v1.x, v2.x);
        const maxY = Math.max(v1.y, v2.y);
        out.x = minX;
        out.y = minY;
        out.width = maxX - minX;
        out.height = maxY - minY;
        return out;
    }
    /**
     * @en Calculate the interpolation result between this rect and another one with given ratio
     * @zh 根据指定的插值比率，从当前矩形到目标矩形之间做插值。
     * @param out Output rect.
     * @param from Original rect.
     * @param to Target rect.
     * @param ratio The interpolation coefficient.The range is [0,1].
     */
    static lerp(out, from, to, ratio) {
        const x = from.x;
        const y = from.y;
        const w = from.width;
        const h = from.height;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        out.width = w + (to.width - w) * ratio;
        out.height = h + (to.height - h) * ratio;
        return out;
    }
    /**
     * @en Returns the overlapping portion of 2 rectangles.
     * @zh 计算当前矩形与指定矩形重叠部分的矩形，将其赋值给出口矩形。
     * @param out Output Rect.
     * @param one One of the specify Rect.
     * @param other Another of the specify Rect.
     */
    static intersection(out, one, other) {
        const axMin = one.x;
        const ayMin = one.y;
        const axMax = one.x + one.width;
        const ayMax = one.y + one.height;
        const bxMin = other.x;
        const byMin = other.y;
        const bxMax = other.x + other.width;
        const byMax = other.y + other.height;
        out.x = Math.max(axMin, bxMin);
        out.y = Math.max(ayMin, byMin);
        out.width = Math.min(axMax, bxMax) - out.x;
        out.height = Math.min(ayMax, byMax) - out.y;
        return out;
    }
    /**
     * @en Returns the smallest rectangle that contains the current rect and the given rect.
     * @zh 创建同时包含当前矩形和指定矩形的最小矩形，将其赋值给出口矩形。
     * @param out Output Rect.
     * @param one One of the specify Rect.
     * @param other Another of the specify Rect.
     */
    static union(out, one, other) {
        const x = one.x;
        const y = one.y;
        const w = one.width;
        const h = one.height;
        const bx = other.x;
        const by = other.y;
        const bw = other.width;
        const bh = other.height;
        out.x = Math.min(x, bx);
        out.y = Math.min(y, by);
        out.width = Math.max(x + w, bx + bw) - out.x;
        out.height = Math.max(y + h, by + bh) - out.y;
        return out;
    }
    /**
     * @en The minimum x value.
     * @zh 获取或设置矩形在 x 轴上的最小值。
     */
    get xMin() {
        return this.x;
    }
    set xMin(value) {
        this.width += this.x - value;
        this.x = value;
    }
    /**
     * @en The minimum y value.
     * @zh 获取或设置矩形在 y 轴上的最小值。
     */
    get yMin() {
        return this.y;
    }
    set yMin(value) {
        this.height += this.y - value;
        this.y = value;
    }
    /**
     * @en The maximum x value.
     * @zh 获取或设置矩形在 x 轴上的最大值。
     */
    get xMax() {
        return this.x + this.width;
    }
    set xMax(value) {
        this.width = value - this.x;
    }
    /**
     * @en The maximum y value.
     * @zh 获取或设置矩形在 y 轴上的最大值。
     */
    get yMax() {
        return this.y + this.height;
    }
    set yMax(value) {
        this.height = value - this.y;
    }
    /**
     * @en The position of the center of the rectangle.
     * @zh 获取或设置矩形中心点的坐标。
     */
    get center() {
        return new BuiltinData_1.Vec2Data(this.x + this.width * 0.5, this.y + this.height * 0.5);
    }
    set center(value) {
        this.x = value.x - this.width * 0.5;
        this.y = value.y - this.height * 0.5;
    }
    /**
     * @en Returns a new {{Vec2}} object representing the position of the rectangle
     * @zh 获取或设置矩形的 x 和 y 坐标。
     */
    get origin() {
        return new BuiltinData_1.Vec2Data(this.x, this.y);
    }
    set origin(value) {
        this.x = value.x;
        this.y = value.y;
    }
    // compatibility with vector interfaces
    set z(val) {
        this.width = val;
    }
    get z() {
        return this.width;
    }
    set w(val) {
        this.height = val;
    }
    get w() {
        return this.height;
    }
    constructor(x, y, width, height) {
        super();
        if (x && typeof x === "object") {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
        }
        else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
        }
    }
    set(x, y, width, height) {
        if (x && typeof x === "object") {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
        }
        else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
        }
        return this;
    }
    /**
     * @en Check whether the current Rect equals another one.
     * @zh 判断当前矩形是否与指定矩形相等。
     * @param other Specified rectangles.
     * @returns Returns `true' when the minimum and maximum values of both rectangles are equal, respectively; otherwise, returns `false'.
     */
    equals(other) {
        return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
    }
    /**
     * @en Calculate the interpolation result between this Rect and another one with given ratio.
     * @zh 根据指定的插值比率，从当前矩形到目标矩形之间做插值。
     * @param to Target Rect.
     * @param ratio The interpolation coefficient.The range is [0,1].
     */
    lerp(to, ratio) {
        const x = this.x;
        const y = this.y;
        const w = this.width;
        const h = this.height;
        this.x = x + (to.x - x) * ratio;
        this.y = y + (to.y - y) * ratio;
        this.width = w + (to.width - w) * ratio;
        this.height = h + (to.height - h) * ratio;
        return this;
    }
    /**
     * @en Return the information of the current rect in string
     * @zh 返回当前矩形的字符串表示。
     * @returns The information of the current rect in string
     */
    toString() {
        return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
    }
    /**
     * @en Check whether the current rectangle intersects with the given one.
     * @zh 判断当前矩形是否与指定矩形相交。
     * @param other Specified rectangles.
     * @returns If intersected, return `true', otherwise return `false'.
     */
    intersects(other) {
        const maxax = this.x + this.width;
        const maxay = this.y + this.height;
        const maxbx = other.x + other.width;
        const maxby = other.y + other.height;
        return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
    }
    /**
     * @en Check whether the current rect contains the given point.
     * @zh 判断当前矩形是否包含指定的点。
     * @param point Specified point.
     * @returns The specified point is included in the rectangle and returns `true', otherwise it returns `false'.
     */
    contains(point) {
        return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
    }
    /**
     * @en Returns true if the other rect entirely inside this rectangle.
     * @zh 判断当前矩形是否包含指定矩形。
     * @param other Specified rectangles.
     * @returns Returns `true' if all the points of the specified rectangle are included in the current rectangle, `false' otherwise.
     */
    containsRect(other) {
        return (this.x <= other.x &&
            this.x + this.width >= other.x + other.width &&
            this.y <= other.y &&
            this.y + this.height >= other.y + other.height);
    }
    /**
     * @en Apply matrix4 to the rect.
     * @zh
     * 应用矩阵变换到当前矩形：
     * 应用矩阵变换到当前矩形的最小点得到新的最小点，
     * 将当前矩形的尺寸视为二维向量应用矩阵变换得到新的尺寸；
     * 并将如此构成的新矩形。
     * @param matrix The matrix4
     */
    transformMat4(mat) {
        const ol = this.x;
        const ob = this.y;
        const or = ol + this.width;
        const ot = ob + this.height;
        const lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
        const lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
        const rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
        const rby = mat.m01 * or + mat.m05 * ob + mat.m13;
        const ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
        const lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
        const rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
        const rty = mat.m01 * or + mat.m05 * ot + mat.m13;
        const minX = Math.min(lbx, rbx, ltx, rtx);
        const maxX = Math.max(lbx, rbx, ltx, rtx);
        const minY = Math.min(lby, rby, lty, rty);
        const maxY = Math.max(lby, rby, lty, rty);
        this.x = minX;
        this.y = minY;
        this.width = maxX - minX;
        this.height = maxY - minY;
        return this;
    }
    /**
     * 应用矩阵变换到当前矩形，并将结果输出到四个顶点上。
     */
    transformMat4ToPoints(mat, out_lb, out_lt, out_rt, out_rb) {
        const ol = this.x;
        const ob = this.y;
        const or = ol + this.width;
        const ot = ob + this.height;
        out_lb.x = mat.m00 * ol + mat.m04 * ob + mat.m12;
        out_lb.y = mat.m01 * ol + mat.m05 * ob + mat.m13;
        out_rb.x = mat.m00 * or + mat.m04 * ob + mat.m12;
        out_rb.y = mat.m01 * or + mat.m05 * ob + mat.m13;
        out_lt.x = mat.m00 * ol + mat.m04 * ot + mat.m12;
        out_lt.y = mat.m01 * ol + mat.m05 * ot + mat.m13;
        out_rt.x = mat.m00 * or + mat.m04 * ot + mat.m12;
        out_rt.y = mat.m01 * or + mat.m05 * ot + mat.m13;
    }
}
exports.Rect = Rect;
function rect(x = 0, y = 0, width = 0, height = 0) {
    return new Rect(x, y, width, height);
}
exports.rect = rect;


/***/ }),

/***/ "./ts/src/webglImpl/shader/tsScript/Impl_07c44d90d7e535a0c16ba9e1910f1b39.ts":
/*!***********************************************************************************!*\
  !*** ./ts/src/webglImpl/shader/tsScript/Impl_07c44d90d7e535a0c16ba9e1910f1b39.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*
origin glsl source:


precision mediump float;

varying  vec2 fTexCoord;

uniform sampler2D texture;

void main()
{
    gl_FragColor = texture2D( texture, fTexCoord);

}

*/
/*
fact do glsl source:


precision mediump float;

varying  vec2 fTexCoord;

uniform sampler2D texture;

void main()
{
    gl_FragColor = texture2D( texture, fTexCoord);

}

*/
const BuiltinFunc_1 = __webpack_require__(/*! ../builtin/BuiltinFunc */ "./ts/src/webglImpl/shader/builtin/BuiltinFunc.ts");
const BuiltinOperator_1 = __webpack_require__(/*! ../builtin/BuiltinOperator */ "./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts");
const BuiltinVar_1 = __webpack_require__(/*! ../builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
const CpuRenderingContext_1 = __webpack_require__(/*! ../../CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const ShaderDefine_1 = __webpack_require__(/*! ../../ShaderDefine */ "./ts/src/webglImpl/ShaderDefine.ts");
const BuiltinData_1 = __webpack_require__(/*! ../builtin/BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
class AttributeDataImpl {
    constructor() {
        this.dataKeys = new Map([]);
        this.dataSize = new Map([]);
    }
}
class VaryingDataImpl extends ShaderDefine_1.VaryingData {
    constructor() {
        super(...arguments);
        this.fTexCoord = new BuiltinData_1.Vec2Data();
        this.dataKeys = new Map([["fTexCoord", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.FLOAT_VEC2]]);
    }
    factoryCreate() {
        return new VaryingDataImpl();
    }
    copy(varying) {
        BuiltinOperator_1.glSet_V2_V2(varying.fTexCoord, this.fTexCoord);
    }
}
class UniformDataImpl {
    constructor() {
        this.texture = new BuiltinData_1.Sampler2D();
        this.dataKeys = new Map([["texture", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.SAMPLER_2D]]);
        this.dataSize = new Map([["texture", 1]]);
    }
}
class Impl_07c44d90d7e535a0c16ba9e1910f1b39 extends ShaderDefine_1.FragShaderHandle {
    constructor() {
        super(...arguments);
        this.varyingData = new VaryingDataImpl();
        this.uniformData = new UniformDataImpl();
    }
    main() {
        BuiltinOperator_1.glSet_V4_V4(BuiltinVar_1.gl_FragColor, BuiltinFunc_1.texture2D_N_V2(this.uniformData.texture, this.varyingData.fTexCoord));
    }
}
exports.Impl_07c44d90d7e535a0c16ba9e1910f1b39 = Impl_07c44d90d7e535a0c16ba9e1910f1b39;


/***/ }),

/***/ "./ts/src/webglImpl/shader/tsScript/Impl_5cfc69ff55897da954b972542102ca12.ts":
/*!***********************************************************************************!*\
  !*** ./ts/src/webglImpl/shader/tsScript/Impl_5cfc69ff55897da954b972542102ca12.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*
origin glsl source:


precision mediump float;

void
main()
{
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);

}

*/
/*
fact do glsl source:


precision mediump float;

void
main()
{
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);

}

*/
const BuiltinFunc_1 = __webpack_require__(/*! ../builtin/BuiltinFunc */ "./ts/src/webglImpl/shader/builtin/BuiltinFunc.ts");
const BuiltinOperator_1 = __webpack_require__(/*! ../builtin/BuiltinOperator */ "./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts");
const BuiltinVar_1 = __webpack_require__(/*! ../builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
const ShaderDefine_1 = __webpack_require__(/*! ../../ShaderDefine */ "./ts/src/webglImpl/ShaderDefine.ts");
class AttributeDataImpl {
    constructor() {
        this.dataKeys = new Map([]);
        this.dataSize = new Map([]);
    }
}
class VaryingDataImpl extends ShaderDefine_1.VaryingData {
    constructor() {
        super(...arguments);
        this.dataKeys = new Map([]);
    }
    factoryCreate() {
        return new VaryingDataImpl();
    }
    copy(varying) { }
}
class UniformDataImpl {
    constructor() {
        this.dataKeys = new Map([]);
        this.dataSize = new Map([]);
    }
}
class Impl_5cfc69ff55897da954b972542102ca12 extends ShaderDefine_1.FragShaderHandle {
    constructor() {
        super(...arguments);
        this.varyingData = new VaryingDataImpl();
        this.uniformData = new UniformDataImpl();
    }
    main() {
        BuiltinOperator_1.glSet_V4_V4(BuiltinVar_1.gl_FragColor, BuiltinFunc_1.vec4_N_N_N_N(BuiltinFunc_1.float_N(1.0), BuiltinFunc_1.float_N(0.0), BuiltinFunc_1.float_N(0.0), BuiltinFunc_1.float_N(1.0)));
    }
}
exports.Impl_5cfc69ff55897da954b972542102ca12 = Impl_5cfc69ff55897da954b972542102ca12;


/***/ }),

/***/ "./ts/src/webglImpl/shader/tsScript/Impl_a70ded9a66e6e64b4da7be7aeaa0415b.ts":
/*!***********************************************************************************!*\
  !*** ./ts/src/webglImpl/shader/tsScript/Impl_a70ded9a66e6e64b4da7be7aeaa0415b.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*
origin glsl source:


attribute vec3 vPosition;

void main()
{
    gl_Position = vec4(vPosition, 1) ;
}

*/
/*
fact do glsl source:


attribute vec3 vPosition;

void main()
{
    gl_Position = vec4(vPosition, 1) ;
}

*/
const BuiltinFunc_1 = __webpack_require__(/*! ../builtin/BuiltinFunc */ "./ts/src/webglImpl/shader/builtin/BuiltinFunc.ts");
const BuiltinOperator_1 = __webpack_require__(/*! ../builtin/BuiltinOperator */ "./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts");
const BuiltinVar_1 = __webpack_require__(/*! ../builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
const CpuRenderingContext_1 = __webpack_require__(/*! ../../CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const ShaderDefine_1 = __webpack_require__(/*! ../../ShaderDefine */ "./ts/src/webglImpl/ShaderDefine.ts");
const BuiltinData_1 = __webpack_require__(/*! ../builtin/BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
class AttributeDataImpl {
    constructor() {
        this.vPosition = new BuiltinData_1.Vec3Data();
        this.dataKeys = new Map([["vPosition", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.FLOAT_VEC3]]);
        this.dataSize = new Map([["vPosition", 1]]);
    }
}
class VaryingDataImpl extends ShaderDefine_1.VaryingData {
    constructor() {
        super(...arguments);
        this.dataKeys = new Map([]);
    }
    factoryCreate() {
        return new VaryingDataImpl();
    }
    copy(varying) { }
}
class UniformDataImpl {
    constructor() {
        this.dataKeys = new Map([]);
        this.dataSize = new Map([]);
    }
}
class Impl_a70ded9a66e6e64b4da7be7aeaa0415b extends ShaderDefine_1.VertShaderHandle {
    constructor() {
        super(...arguments);
        this.varyingData = new VaryingDataImpl();
        this.uniformData = new UniformDataImpl();
        this.attributeData = new AttributeDataImpl();
    }
    main() {
        BuiltinOperator_1.glSet_V4_V4(BuiltinVar_1.gl_Position, BuiltinFunc_1.vec4_V3_N(this.attributeData.vPosition, BuiltinFunc_1.int_N(1)));
    }
}
exports.Impl_a70ded9a66e6e64b4da7be7aeaa0415b = Impl_a70ded9a66e6e64b4da7be7aeaa0415b;


/***/ }),

/***/ "./ts/src/webglImpl/shader/tsScript/Impl_cb696f676d7a5282debf8fdfea79cb7a.ts":
/*!***********************************************************************************!*\
  !*** ./ts/src/webglImpl/shader/tsScript/Impl_cb696f676d7a5282debf8fdfea79cb7a.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BuiltinOperator_1 = __webpack_require__(/*! ../builtin/BuiltinOperator */ "./ts/src/webglImpl/shader/builtin/BuiltinOperator.ts");
const BuiltinVar_1 = __webpack_require__(/*! ../builtin/BuiltinVar */ "./ts/src/webglImpl/shader/builtin/BuiltinVar.ts");
const CpuRenderingContext_1 = __webpack_require__(/*! ../../CpuRenderingContext */ "./ts/src/webglImpl/CpuRenderingContext.ts");
const ShaderDefine_1 = __webpack_require__(/*! ../../ShaderDefine */ "./ts/src/webglImpl/ShaderDefine.ts");
const BuiltinData_1 = __webpack_require__(/*! ../builtin/BuiltinData */ "./ts/src/webglImpl/shader/builtin/BuiltinData.ts");
class AttributeDataImpl {
    constructor() {
        this.vPosition = new BuiltinData_1.Vec4Data();
        this.vTexCoord = new BuiltinData_1.Vec2Data();
        this.dataKeys = new Map([
            ["vPosition", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.FLOAT_VEC4],
            ["vTexCoord", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.FLOAT_VEC2],
        ]);
        this.dataSize = new Map([
            ["vPosition", 1],
            ["vTexCoord", 1],
        ]);
    }
}
class VaryingDataImpl extends ShaderDefine_1.VaryingData {
    constructor() {
        super(...arguments);
        this.fTexCoord = new BuiltinData_1.Vec2Data();
        this.dataKeys = new Map([["fTexCoord", CpuRenderingContext_1.cpuRenderingContext.cachGameGl.FLOAT_VEC2]]);
    }
    factoryCreate() {
        return new VaryingDataImpl();
    }
    copy(varying) {
        BuiltinOperator_1.glSet_V2_V2(varying.fTexCoord, this.fTexCoord);
    }
}
class UniformDataImpl {
    constructor() {
        this.dataKeys = new Map([]);
        this.dataSize = new Map([]);
    }
}
class Impl_cb696f676d7a5282debf8fdfea79cb7a extends ShaderDefine_1.VertShaderHandle {
    constructor() {
        super(...arguments);
        this.varyingData = new VaryingDataImpl();
        this.uniformData = new UniformDataImpl();
        this.attributeData = new AttributeDataImpl();
    }
    main() {
        BuiltinOperator_1.glSet_V4_V4(BuiltinVar_1.gl_Position, this.attributeData.vPosition);
        BuiltinOperator_1.glSet_V2_V2(this.varyingData.fTexCoord, this.attributeData.vTexCoord);
    }
}
exports.Impl_cb696f676d7a5282debf8fdfea79cb7a = Impl_cb696f676d7a5282debf8fdfea79cb7a;


/***/ }),

/***/ "./ts/src/webglImpl/shader/tsScript/ShaderManager.ts":
/*!***********************************************************!*\
  !*** ./ts/src/webglImpl/shader/tsScript/ShaderManager.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Impl_a70ded9a66e6e64b4da7be7aeaa0415b_1 = __webpack_require__(/*! ./Impl_a70ded9a66e6e64b4da7be7aeaa0415b */ "./ts/src/webglImpl/shader/tsScript/Impl_a70ded9a66e6e64b4da7be7aeaa0415b.ts");
const Impl_5cfc69ff55897da954b972542102ca12_1 = __webpack_require__(/*! ./Impl_5cfc69ff55897da954b972542102ca12 */ "./ts/src/webglImpl/shader/tsScript/Impl_5cfc69ff55897da954b972542102ca12.ts");
const Impl_cb696f676d7a5282debf8fdfea79cb7a_1 = __webpack_require__(/*! ./Impl_cb696f676d7a5282debf8fdfea79cb7a */ "./ts/src/webglImpl/shader/tsScript/Impl_cb696f676d7a5282debf8fdfea79cb7a.ts");
const Impl_07c44d90d7e535a0c16ba9e1910f1b39_1 = __webpack_require__(/*! ./Impl_07c44d90d7e535a0c16ba9e1910f1b39 */ "./ts/src/webglImpl/shader/tsScript/Impl_07c44d90d7e535a0c16ba9e1910f1b39.ts");
class ShaderManager {
    static getConstruct(source) {
        return this[source];
    }
}
exports.ShaderManager = ShaderManager;
ShaderManager.Impl_a70ded9a66e6e64b4da7be7aeaa0415b = Impl_a70ded9a66e6e64b4da7be7aeaa0415b_1.Impl_a70ded9a66e6e64b4da7be7aeaa0415b;
ShaderManager.Impl_5cfc69ff55897da954b972542102ca12 = Impl_5cfc69ff55897da954b972542102ca12_1.Impl_5cfc69ff55897da954b972542102ca12;
ShaderManager.Impl_cb696f676d7a5282debf8fdfea79cb7a = Impl_cb696f676d7a5282debf8fdfea79cb7a_1.Impl_cb696f676d7a5282debf8fdfea79cb7a;
ShaderManager.Impl_07c44d90d7e535a0c16ba9e1910f1b39 = Impl_07c44d90d7e535a0c16ba9e1910f1b39_1.Impl_07c44d90d7e535a0c16ba9e1910f1b39;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,